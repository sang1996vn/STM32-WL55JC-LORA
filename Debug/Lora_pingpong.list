
Lora_pingpong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009268  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096f0  080096f0  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  080096f0  080096f0  000196f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096f8  080096f8  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096f8  080096f8  000196f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096fc  080096fc  000196fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003200  20000184  08009884  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003384  08009884  00023384  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000272d2  00000000  00000000  000201ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000532d  00000000  00000000  00047480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022b8  00000000  00000000  0004c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020a0  00000000  00000000  0004ea68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243ce  00000000  00000000  00050b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029a3e  00000000  00000000  00074ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbd7e  00000000  00000000  0009e914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a692  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095dc  00000000  00000000  0016a6e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000184 	.word	0x20000184
 800015c:	00000000 	.word	0x00000000
 8000160:	08009390 	.word	0x08009390

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000188 	.word	0x20000188
 800017c:	08009390 	.word	0x08009390

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4013      	ands	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000558:	68fb      	ldr	r3, [r7, #12]
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <MX_AES_Init>:
__ALIGN_BEGIN static const uint32_t pKeyAES[8] __ALIGN_END = {
                            0x603DEB10,0x15CA71BE,0x2B73AEF0,0x857D7781,0x1F352C07,0x3B6108D7,0x2D9810A3,0x0914DFF4};

/* AES init function */
void MX_AES_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_AES_Init+0x4c>)
 800056a:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <MX_AES_Init+0x50>)
 800056c:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_DATATYPE_1B;
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <MX_AES_Init+0x4c>)
 8000570:	2206      	movs	r2, #6
 8000572:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_256B;
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_AES_Init+0x4c>)
 8000576:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800057a:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <MX_AES_Init+0x4c>)
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <MX_AES_Init+0x54>)
 8000580:	60da      	str	r2, [r3, #12]
  hcryp.Init.Algorithm = CRYP_AES_ECB;
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <MX_AES_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <MX_AES_Init+0x4c>)
 800058a:	2201      	movs	r2, #1
 800058c:	625a      	str	r2, [r3, #36]	; 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_BYTE;
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <MX_AES_Init+0x4c>)
 8000590:	2201      	movs	r2, #1
 8000592:	629a      	str	r2, [r3, #40]	; 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MX_AES_Init+0x4c>)
 8000596:	2200      	movs	r2, #0
 8000598:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_AES_Init+0x4c>)
 800059c:	f002 fb55 	bl	8002c4a <HAL_CRYP_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_AES_Init+0x46>
  {
    Error_Handler();
 80005a6:	f000 fa07 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200001a0 	.word	0x200001a0
 80005b4:	58001800 	.word	0x58001800
 80005b8:	0800956c 	.word	0x0800956c

080005bc <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]

  if(crypHandle->Instance==AES)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <HAL_CRYP_MspInit+0x24>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d103      	bne.n	80005d6 <HAL_CRYP_MspInit+0x1a>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 80005ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80005d2:	f7ff ffaf 	bl	8000534 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	58001800 	.word	0x58001800

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200002b4 	.word	0x200002b4
 8000614:	20000368 	.word	0x20000368

08000618 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000618:	b5b0      	push	{r4, r5, r7, lr}
 800061a:	b08e      	sub	sp, #56	; 0x38
 800061c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LoraTask */
  osThreadDef(LoraTask, StartLoraTask, osPriorityNormal, 0, 512);
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_FREERTOS_Init+0x58>)
 8000620:	f107 041c 	add.w	r4, r7, #28
 8000624:	461d      	mov	r5, r3
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LoraTaskHandle = osThreadCreate(osThread(LoraTask), NULL);
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f006 ff8b 	bl	8007554 <osThreadCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <MX_FREERTOS_Init+0x5c>)
 8000642:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPIOTask */
  osThreadDef(GPIOTask, StartGPIOTask, osPriorityHigh, 0, 1536);
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_FREERTOS_Init+0x60>)
 8000646:	463c      	mov	r4, r7
 8000648:	461d      	mov	r5, r3
 800064a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPIOTaskHandle = osThreadCreate(osThread(GPIOTask), NULL);
 8000656:	463b      	mov	r3, r7
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f006 ff7a 	bl	8007554 <osThreadCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a06      	ldr	r2, [pc, #24]	; (800067c <MX_FREERTOS_Init+0x64>)
 8000664:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000666:	bf00      	nop
 8000668:	3738      	adds	r7, #56	; 0x38
 800066a:	46bd      	mov	sp, r7
 800066c:	bdb0      	pop	{r4, r5, r7, pc}
 800066e:	bf00      	nop
 8000670:	080093c0 	.word	0x080093c0
 8000674:	200002ac 	.word	0x200002ac
 8000678:	080093dc 	.word	0x080093dc
 800067c:	200002b0 	.word	0x200002b0

08000680 <StartLoraTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLoraTask */
void StartLoraTask(void const * argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLoraTask */
  /* Infinite loop */
	//SUBGHZ();
	while (1)
	  {
		  SUBGHZ();
 8000688:	f000 feac 	bl	80013e4 <SUBGHZ>
		  //osDelay(1000);
		//BSP_LED_Toggle(LED_BLUE);
		  osDelay(100);
 800068c:	2064      	movs	r0, #100	; 0x64
 800068e:	f006 ffad 	bl	80075ec <osDelay>
		  SUBGHZ();
 8000692:	e7f9      	b.n	8000688 <StartLoraTask+0x8>

08000694 <StartGPIOTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPIOTask */
void StartGPIOTask(void const * argument)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGPIOTask */
  /* Infinite loop */
	while (1)
 800069c:	e7fe      	b.n	800069c <StartGPIOTask+0x8>

0800069e <LL_AHB1_GRP1_EnableClock>:
{
 800069e:	b480      	push	{r7}
 80006a0:	b085      	sub	sp, #20
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80006ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80006b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4013      	ands	r3, r2
 80006c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c2:	68fb      	ldr	r3, [r7, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr

080006ce <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006d2:	2004      	movs	r0, #4
 80006d4:	f7ff ffe3 	bl	800069e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ffe0 	bl	800069e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2105      	movs	r1, #5
 80006e2:	200b      	movs	r0, #11
 80006e4:	f002 fa89 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006e8:	200b      	movs	r0, #11
 80006ea:	f002 faa0 	bl	8002c2e <HAL_NVIC_EnableIRQ>

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <LL_AHB2_GRP1_EnableClock>:
{
 80006f2:	b480      	push	{r7}
 80006f4:	b085      	sub	sp, #20
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000700:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4313      	orrs	r3, r2
 8000708:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800070a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800070e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4013      	ands	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
	...

08000724 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff ffda 	bl	80006f2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2002      	movs	r0, #2
 8000740:	f7ff ffd7 	bl	80006f2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000744:	2004      	movs	r0, #4
 8000746:	f7ff ffd4 	bl	80006f2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000750:	482b      	ldr	r0, [pc, #172]	; (8000800 <MX_GPIO_Init+0xdc>)
 8000752:	f002 ff97 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2138      	movs	r1, #56	; 0x38
 800075a:	482a      	ldr	r0, [pc, #168]	; (8000804 <MX_GPIO_Init+0xe0>)
 800075c:	f002 ff92 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000760:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000764:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	4822      	ldr	r0, [pc, #136]	; (8000800 <MX_GPIO_Init+0xdc>)
 8000778:	f002 fe24 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 800077c:	2338      	movs	r3, #56	; 0x38
 800077e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4619      	mov	r1, r3
 8000790:	481c      	ldr	r0, [pc, #112]	; (8000804 <MX_GPIO_Init+0xe0>)
 8000792:	f002 fe17 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000796:	2303      	movs	r3, #3
 8000798:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800079e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f002 fe0a 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 80007b0:	2340      	movs	r3, #64	; 0x40
 80007b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	4810      	ldr	r0, [pc, #64]	; (8000804 <MX_GPIO_Init+0xe0>)
 80007c4:	f002 fdfe 	bl	80033c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2105      	movs	r1, #5
 80007cc:	2006      	movs	r0, #6
 80007ce:	f002 fa14 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007d2:	2006      	movs	r0, #6
 80007d4:	f002 fa2b 	bl	8002c2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2105      	movs	r1, #5
 80007dc:	2007      	movs	r0, #7
 80007de:	f002 fa0c 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007e2:	2007      	movs	r0, #7
 80007e4:	f002 fa23 	bl	8002c2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2105      	movs	r1, #5
 80007ec:	2016      	movs	r0, #22
 80007ee:	f002 fa04 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007f2:	2016      	movs	r0, #22
 80007f4:	f002 fa1b 	bl	8002c2e <HAL_NVIC_EnableIRQ>

}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	48000400 	.word	0x48000400
 8000804:	48000800 	.word	0x48000800

08000808 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000818:	f023 0218 	bic.w	r2, r3, #24
 800081c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4313      	orrs	r3, r2
 8000824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr

08000832 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000836:	f002 f8cb 	bl	80029d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083a:	f000 f815 	bl	8000868 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f7ff ff71 	bl	8000724 <MX_GPIO_Init>
  MX_DMA_Init();
 8000842:	f7ff ff44 	bl	80006ce <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000846:	f000 fe4f 	bl	80014e8 <MX_USART2_UART_Init>
  MX_SUBGHZ_Init();
 800084a:	f000 f9af 	bl	8000bac <MX_SUBGHZ_Init>
  MX_AES_Init();
 800084e:	f7ff fe89 	bl	8000564 <MX_AES_Init>
  /* USER CODE BEGIN 2 */
  radioInit();
 8000852:	f000 f9d1 	bl	8000bf8 <radioInit>
  fsmInit();
 8000856:	f000 fd73 	bl	8001340 <fsmInit>
  UartDmaStart();
 800085a:	f000 ff2f 	bl	80016bc <UartDmaStart>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800085e:	f7ff fedb 	bl	8000618 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000862:	f006 fe70 	bl	8007546 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000866:	e7fe      	b.n	8000866 <main+0x34>

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b09a      	sub	sp, #104	; 0x68
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	2248      	movs	r2, #72	; 0x48
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f008 f8a8 	bl	80089cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
 800088a:	615a      	str	r2, [r3, #20]
 800088c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800088e:	f002 ff41 	bl	8003714 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff ffb8 	bl	8000808 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <SystemClock_Config+0xac>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008a0:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <SystemClock_Config+0xac>)
 80008a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <SystemClock_Config+0xac>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008b4:	2324      	movs	r3, #36	; 0x24
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008b8:	2381      	movs	r3, #129	; 0x81
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008bc:	2301      	movs	r3, #1
 80008be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80008c4:	23b0      	movs	r3, #176	; 0xb0
 80008c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 f9f1 	bl	8003cb8 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008dc:	f000 f86c 	bl	80009b8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80008e0:	234f      	movs	r3, #79	; 0x4f
 80008e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2102      	movs	r1, #2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f003 fd5d 	bl	80043bc <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000908:	f000 f856 	bl	80009b8 <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	3768      	adds	r7, #104	; 0x68
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	58000400 	.word	0x58000400

08000918 <HAL_GPIO_EXTI_Callback>:
  * @param  radioIrq  interrupt pending status information
  * @retval None
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]

  if(GPIO_Pin == GPIO_PIN_0)
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d10c      	bne.n	8000942 <HAL_GPIO_EXTI_Callback+0x2a>
  {
	  BSP_LED_Off(LED_GREEN);
 8000928:	2001      	movs	r0, #1
 800092a:	f000 ff09 	bl	8001740 <BSP_LED_Off>
	  BSP_LED_Off(LED_RED);
 800092e:	2002      	movs	r0, #2
 8000930:	f000 ff06 	bl	8001740 <BSP_LED_Off>
	  BSP_LED_Toggle(LED_BLUE);
 8000934:	2000      	movs	r0, #0
 8000936:	f000 ff1d 	bl	8001774 <BSP_LED_Toggle>
	  RF_FREQUENCY = 470000000;
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_GPIO_EXTI_Callback+0x6c>)
 800093c:	4a12      	ldr	r2, [pc, #72]	; (8000988 <HAL_GPIO_EXTI_Callback+0x70>)
 800093e:	601a      	str	r2, [r3, #0]
	  BSP_LED_Toggle(LED_RED);
	  RF_FREQUENCY = 520000000;

  }

}
 8000940:	e01b      	b.n	800097a <HAL_GPIO_EXTI_Callback+0x62>
  else if (GPIO_Pin == GPIO_PIN_1)
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d109      	bne.n	800095c <HAL_GPIO_EXTI_Callback+0x44>
	  BSP_LED_Off(LED_BLUE);
 8000948:	2000      	movs	r0, #0
 800094a:	f000 fef9 	bl	8001740 <BSP_LED_Off>
	  BSP_LED_Off(LED_RED);
 800094e:	2002      	movs	r0, #2
 8000950:	f000 fef6 	bl	8001740 <BSP_LED_Off>
	  RF_FREQUENCY = 433000000;
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000956:	4a0d      	ldr	r2, [pc, #52]	; (800098c <HAL_GPIO_EXTI_Callback+0x74>)
 8000958:	601a      	str	r2, [r3, #0]
}
 800095a:	e00e      	b.n	800097a <HAL_GPIO_EXTI_Callback+0x62>
  else if (GPIO_Pin == GPIO_PIN_6)
 800095c:	88fb      	ldrh	r3, [r7, #6]
 800095e:	2b40      	cmp	r3, #64	; 0x40
 8000960:	d10b      	bne.n	800097a <HAL_GPIO_EXTI_Callback+0x62>
	  BSP_LED_Off(LED_GREEN);
 8000962:	2001      	movs	r0, #1
 8000964:	f000 feec 	bl	8001740 <BSP_LED_Off>
	  BSP_LED_Off(LED_BLUE);
 8000968:	2000      	movs	r0, #0
 800096a:	f000 fee9 	bl	8001740 <BSP_LED_Off>
	  BSP_LED_Toggle(LED_RED);
 800096e:	2002      	movs	r0, #2
 8000970:	f000 ff00 	bl	8001774 <BSP_LED_Toggle>
	  RF_FREQUENCY = 520000000;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000976:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_GPIO_EXTI_Callback+0x78>)
 8000978:	601a      	str	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000000 	.word	0x20000000
 8000988:	1c03a180 	.word	0x1c03a180
 800098c:	19cf0e40 	.word	0x19cf0e40
 8000990:	1efe9200 	.word	0x1efe9200

08000994 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009a6:	f002 f833 	bl	8002a10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40014800 	.word	0x40014800

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>

080009c2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	210f      	movs	r1, #15
 80009ca:	f06f 0001 	mvn.w	r0, #1
 80009ce:	f002 f914 	bl	8002bfa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b085      	sub	sp, #20
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4013      	ands	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009fa:	68fb      	ldr	r3, [r7, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
	...

08000a08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08e      	sub	sp, #56	; 0x38
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000a1e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000a22:	f7ff ffd8 	bl	80009d6 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a26:	f107 020c 	add.w	r2, r7, #12
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	4611      	mov	r1, r2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f003 fedd 	bl	80047f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a36:	f003 fec9 	bl	80047cc <HAL_RCC_GetPCLK2Freq>
 8000a3a:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a3e:	4a21      	ldr	r2, [pc, #132]	; (8000ac4 <HAL_InitTick+0xbc>)
 8000a40:	fba2 2303 	umull	r2, r3, r2, r3
 8000a44:	0c9b      	lsrs	r3, r3, #18
 8000a46:	3b01      	subs	r3, #1
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <HAL_InitTick+0xc0>)
 8000a4c:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <HAL_InitTick+0xc4>)
 8000a4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000a50:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <HAL_InitTick+0xc0>)
 8000a52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a56:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000a58:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <HAL_InitTick+0xc0>)
 8000a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <HAL_InitTick+0xc0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <HAL_InitTick+0xc0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000a6a:	4817      	ldr	r0, [pc, #92]	; (8000ac8 <HAL_InitTick+0xc0>)
 8000a6c:	f004 fe8c 	bl	8005788 <HAL_TIM_Base_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8000a76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d11b      	bne.n	8000ab6 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000a7e:	4812      	ldr	r0, [pc, #72]	; (8000ac8 <HAL_InitTick+0xc0>)
 8000a80:	f004 fee2 	bl	8005848 <HAL_TIM_Base_Start_IT>
 8000a84:	4603      	mov	r3, r0
 8000a86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8000a8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d111      	bne.n	8000ab6 <HAL_InitTick+0xae>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000a92:	201d      	movs	r0, #29
 8000a94:	f002 f8cb 	bl	8002c2e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b0f      	cmp	r3, #15
 8000a9c:	d808      	bhi.n	8000ab0 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	201d      	movs	r0, #29
 8000aa4:	f002 f8a9 	bl	8002bfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa8:	4a09      	ldr	r2, [pc, #36]	; (8000ad0 <HAL_InitTick+0xc8>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	e002      	b.n	8000ab6 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

 /* Return function status */
  return status;
 8000ab6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3738      	adds	r7, #56	; 0x38
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	431bde83 	.word	0x431bde83
 8000ac8:	20000768 	.word	0x20000768
 8000acc:	40014800 	.word	0x40014800
 8000ad0:	20000114 	.word	0x20000114

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f002 fdee 	bl	80036e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000b10:	2002      	movs	r0, #2
 8000b12:	f002 fde7 	bl	80036e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <DMA1_Channel1_IRQHandler+0x10>)
 8000b22:	f002 fab1 	bl	8003088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000e8c 	.word	0x20000e8c

08000b30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8000b34:	2040      	movs	r0, #64	; 0x40
 8000b36:	f002 fdd5 	bl	80036e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <TIM17_IRQHandler+0x10>)
 8000b46:	f004 fecb 	bl	80058e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000768 	.word	0x20000768

08000b54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <USART2_IRQHandler+0x10>)
 8000b5a:	f005 f979 	bl	8005e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000df8 	.word	0x20000df8

08000b68 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000b6e:	f004 fc63 	bl	8005438 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200008e8 	.word	0x200008e8

08000b7c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000b8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b98:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_SUBGHZ_Init+0x20>)
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_SUBGHZ_Init+0x20>)
 8000bb8:	f004 f9bc 	bl	8004f34 <HAL_SUBGHZ_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000bc2:	f7ff fef9 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200008e8 	.word	0x200008e8

08000bd0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f7ff ffcf 	bl	8000b7c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 5, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2105      	movs	r1, #5
 8000be2:	2032      	movs	r0, #50	; 0x32
 8000be4:	f002 f809 	bl	8002bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000be8:	2032      	movs	r0, #50	; 0x32
 8000bea:	f002 f820 	bl	8002c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <radioInit>:
  /* USER CODE END SUBGHZ_MspDeInit 1 */
}

/* USER CODE BEGIN 1 */
void radioInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
  // Initialize the hardware (SPI bus, TCXO control, RF switch)
  SUBGRF_Init(RadioOnDioIrq);
 8000bfe:	4831      	ldr	r0, [pc, #196]	; (8000cc4 <radioInit+0xcc>)
 8000c00:	f000 fee4 	bl	80019cc <SUBGRF_Init>

  // Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
  // "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
  SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 8000c04:	f640 1016 	movw	r0, #2326	; 0x916
 8000c08:	f001 fce4 	bl	80025d4 <SUBGRF_ReadRegister>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	4619      	mov	r1, r3
 8000c16:	f640 1016 	movw	r0, #2326	; 0x916
 8000c1a:	f001 fcc7 	bl	80025ac <SUBGRF_WriteRegister>
  SUBGRF_SetRegulatorMode();
 8000c1e:	f001 f85e 	bl	8001cde <SUBGRF_SetRegulatorMode>

  // Use the whole 256-byte buffer for both TX and RX
  SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000c22:	2100      	movs	r1, #0
 8000c24:	2000      	movs	r0, #0
 8000c26:	f001 fc2b 	bl	8002480 <SUBGRF_SetBufferBaseAddress>

  SUBGRF_SetRfFrequency(RF_FREQUENCY);
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <radioInit+0xd0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 f97a 	bl	8001f28 <SUBGRF_SetRfFrequency>
  SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 8000c34:	200e      	movs	r0, #14
 8000c36:	f001 fdd5 	bl	80027e4 <SUBGRF_SetRfTxPower>
  SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f001 f840 	bl	8001cc0 <SUBGRF_SetStopRxTimerOnPreambleDetect>

  SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f001 f9b7 	bl	8001fb4 <SUBGRF_SetPacketType>

  SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8000c46:	2114      	movs	r1, #20
 8000c48:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8000c4c:	f001 fcae 	bl	80025ac <SUBGRF_WriteRegister>
  SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8000c50:	2124      	movs	r1, #36	; 0x24
 8000c52:	f240 7041 	movw	r0, #1857	; 0x741
 8000c56:	f001 fca9 	bl	80025ac <SUBGRF_WriteRegister>

  ModulationParams_t modulationParams;
  modulationParams.PacketType = PACKET_TYPE_LORA;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	713b      	strb	r3, [r7, #4]
  modulationParams.Params.LoRa.Bandwidth = Bandwidths[LORA_BANDWIDTH];
 8000c5e:	2304      	movs	r3, #4
 8000c60:	777b      	strb	r3, [r7, #29]
  modulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)LORA_CODINGRATE;
 8000c62:	2301      	movs	r3, #1
 8000c64:	77bb      	strb	r3, [r7, #30]
  modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8000c66:	2300      	movs	r3, #0
 8000c68:	77fb      	strb	r3, [r7, #31]
  modulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)LORA_SPREADING_FACTOR;
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	773b      	strb	r3, [r7, #28]
  SUBGRF_SetModulationParams(&modulationParams);
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 fa93 	bl	800219c <SUBGRF_SetModulationParams>

  packetParams.PacketType = PACKET_TYPE_LORA;
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <radioInit+0xd4>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]
  packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <radioInit+0xd4>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	761a      	strb	r2, [r3, #24]
  packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <radioInit+0xd4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	749a      	strb	r2, [r3, #18]
  packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <radioInit+0xd4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	765a      	strb	r2, [r3, #25]
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <radioInit+0xd4>)
 8000c90:	22ff      	movs	r2, #255	; 0xff
 8000c92:	615a      	str	r2, [r3, #20]


  packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <radioInit+0xd4>)
 8000c96:	2208      	movs	r2, #8
 8000c98:	821a      	strh	r2, [r3, #16]
  SUBGRF_SetPacketParams(&packetParams);
 8000c9a:	480c      	ldr	r0, [pc, #48]	; (8000ccc <radioInit+0xd4>)
 8000c9c:	f001 fb50 	bl	8002340 <SUBGRF_SetPacketParams>

  //SUBGRF_SetLoRaSymbNumTimeout(LORA_SYMBOL_TIMEOUT);

  // WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
  // RegIqPolaritySetup @address 0x0736
  SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8000ca0:	f240 7036 	movw	r0, #1846	; 0x736
 8000ca4:	f001 fc96 	bl	80025d4 <SUBGRF_ReadRegister>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f240 7036 	movw	r0, #1846	; 0x736
 8000cb6:	f001 fc79 	bl	80025ac <SUBGRF_WriteRegister>
}
 8000cba:	bf00      	nop
 8000cbc:	3720      	adds	r7, #32
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	08000cd1 	.word	0x08000cd1
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	200008c8 	.word	0x200008c8

08000cd0 <RadioOnDioIrq>:
void RadioOnDioIrq(RadioIrqMasks_t radioIrq)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
  switch (radioIrq)
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ce0:	d013      	beq.n	8000d0a <RadioOnDioIrq+0x3a>
 8000ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ce6:	dc26      	bgt.n	8000d36 <RadioOnDioIrq+0x66>
 8000ce8:	2b40      	cmp	r3, #64	; 0x40
 8000cea:	d020      	beq.n	8000d2e <RadioOnDioIrq+0x5e>
 8000cec:	2b40      	cmp	r3, #64	; 0x40
 8000cee:	dc22      	bgt.n	8000d36 <RadioOnDioIrq+0x66>
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d002      	beq.n	8000cfa <RadioOnDioIrq+0x2a>
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d004      	beq.n	8000d02 <RadioOnDioIrq+0x32>
      break;
    case IRQ_CRC_ERROR:
      eventReceptor = eventRxError;
      break;
    default:
      break;
 8000cf8:	e01d      	b.n	8000d36 <RadioOnDioIrq+0x66>
      eventReceptor = eventTxDone;
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <RadioOnDioIrq+0x74>)
 8000cfc:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <RadioOnDioIrq+0x78>)
 8000cfe:	601a      	str	r2, [r3, #0]
      break;
 8000d00:	e01c      	b.n	8000d3c <RadioOnDioIrq+0x6c>
      eventReceptor = eventRxDone;
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <RadioOnDioIrq+0x74>)
 8000d04:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <RadioOnDioIrq+0x7c>)
 8000d06:	601a      	str	r2, [r3, #0]
      break;
 8000d08:	e018      	b.n	8000d3c <RadioOnDioIrq+0x6c>
      if (SUBGRF_GetOperatingMode() == MODE_TX)
 8000d0a:	f000 fea7 	bl	8001a5c <SUBGRF_GetOperatingMode>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d103      	bne.n	8000d1c <RadioOnDioIrq+0x4c>
        eventReceptor = eventTxTimeout;
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <RadioOnDioIrq+0x74>)
 8000d16:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <RadioOnDioIrq+0x80>)
 8000d18:	601a      	str	r2, [r3, #0]
      break;
 8000d1a:	e00e      	b.n	8000d3a <RadioOnDioIrq+0x6a>
      else if (SUBGRF_GetOperatingMode() == MODE_RX)
 8000d1c:	f000 fe9e 	bl	8001a5c <SUBGRF_GetOperatingMode>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b05      	cmp	r3, #5
 8000d24:	d109      	bne.n	8000d3a <RadioOnDioIrq+0x6a>
        eventReceptor = eventRxTimeout;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <RadioOnDioIrq+0x74>)
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <RadioOnDioIrq+0x84>)
 8000d2a:	601a      	str	r2, [r3, #0]
      break;
 8000d2c:	e005      	b.n	8000d3a <RadioOnDioIrq+0x6a>
      eventReceptor = eventRxError;
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <RadioOnDioIrq+0x74>)
 8000d30:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <RadioOnDioIrq+0x88>)
 8000d32:	601a      	str	r2, [r3, #0]
      break;
 8000d34:	e002      	b.n	8000d3c <RadioOnDioIrq+0x6c>
      break;
 8000d36:	bf00      	nop
 8000d38:	e000      	b.n	8000d3c <RadioOnDioIrq+0x6c>
      break;
 8000d3a:	bf00      	nop
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200008e4 	.word	0x200008e4
 8000d48:	08000d5d 	.word	0x08000d5d
 8000d4c:	08000dc5 	.word	0x08000dc5
 8000d50:	08000f99 	.word	0x08000f99
 8000d54:	08001001 	.word	0x08001001
 8000d58:	0800106d 	.word	0x0800106d

08000d5c <eventTxDone>:
  * @brief  Process the TX Done event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventTxDone(pingPongFSM_t *const fsm)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event TX Done\r\n", 15, HAL_MAX_DELAY);
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
 8000d68:	220f      	movs	r2, #15
 8000d6a:	4914      	ldr	r1, [pc, #80]	; (8000dbc <eventTxDone+0x60>)
 8000d6c:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <eventTxDone+0x64>)
 8000d6e:	f004 ffe9 	bl	8005d44 <HAL_UART_Transmit>
  switch (fsm->state)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d002      	beq.n	8000d80 <eventTxDone+0x24>
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d00d      	beq.n	8000d9a <eventTxDone+0x3e>
        default:
          break;
      }
      break;
    default:
      break;
 8000d7e:	e019      	b.n	8000db4 <eventTxDone+0x58>
      switch (fsm->subState)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	785b      	ldrb	r3, [r3, #1]
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d106      	bne.n	8000d96 <eventTxDone+0x3a>
          enterMasterRx(fsm);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f000 f9a5 	bl	80010d8 <enterMasterRx>
          fsm->subState = SSTATE_RX;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	705a      	strb	r2, [r3, #1]
          break;
 8000d94:	e000      	b.n	8000d98 <eventTxDone+0x3c>
          break;
 8000d96:	bf00      	nop
      break;
 8000d98:	e00c      	b.n	8000db4 <eventTxDone+0x58>
      switch (fsm->subState)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	785b      	ldrb	r3, [r3, #1]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d106      	bne.n	8000db0 <eventTxDone+0x54>
          enterSlaveRx(fsm);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f000 f9c6 	bl	8001134 <enterSlaveRx>
          fsm->subState = SSTATE_RX;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2201      	movs	r2, #1
 8000dac:	705a      	strb	r2, [r3, #1]
          break;
 8000dae:	e000      	b.n	8000db2 <eventTxDone+0x56>
          break;
 8000db0:	bf00      	nop
      break;
 8000db2:	bf00      	nop
  }
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	080093f8 	.word	0x080093f8
 8000dc0:	20000df8 	.word	0x20000df8

08000dc4 <eventRxDone>:
  * @brief  Process the RX Done event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventRxDone(pingPongFSM_t *const fsm)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000dd0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000dd4:	6018      	str	r0, [r3, #0]
  char DataREC[1023];
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event RX Done\r\n", 15, HAL_MAX_DELAY);
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	220f      	movs	r2, #15
 8000ddc:	4968      	ldr	r1, [pc, #416]	; (8000f80 <eventRxDone+0x1bc>)
 8000dde:	4869      	ldr	r0, [pc, #420]	; (8000f84 <eventRxDone+0x1c0>)
 8000de0:	f004 ffb0 	bl	8005d44 <HAL_UART_Transmit>
  switch(fsm->state)
 8000de4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000de8:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d002      	beq.n	8000dfa <eventRxDone+0x36>
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d07d      	beq.n	8000ef4 <eventRxDone+0x130>
        default:
          break;
      }
      break;
    default:
      break;
 8000df8:	e0bc      	b.n	8000f74 <eventRxDone+0x1b0>
      switch (fsm->subState)
 8000dfa:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000dfe:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	785b      	ldrb	r3, [r3, #1]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d172      	bne.n	8000ef0 <eventRxDone+0x12c>
          transitionRxDone(fsm);
 8000e0a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000e0e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	f000 fa4e 	bl	80012b4 <transitionRxDone>
          memcpy(rxBuffer_encypt,fsm->rxBuffer,sizeof(fsm->rxBuffer));
 8000e18:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000e1c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3310      	adds	r3, #16
 8000e24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4857      	ldr	r0, [pc, #348]	; (8000f88 <eventRxDone+0x1c4>)
 8000e2c:	f007 fdc0 	bl	80089b0 <memcpy>
          if (strncmp(fsm->rxBuffer, "PONG", 4) == 0)
 8000e30:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000e34:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	3310      	adds	r3, #16
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	4953      	ldr	r1, [pc, #332]	; (8000f8c <eventRxDone+0x1c8>)
 8000e40:	4618      	mov	r0, r3
 8000e42:	f007 fef9 	bl	8008c38 <strncmp>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d12c      	bne.n	8000ea6 <eventRxDone+0xe2>
        	sprintf(DataREC, "\n\rData rec: %s\r\n",fsm->rxBuffer);
 8000e4c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000e50:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f103 0210 	add.w	r2, r3, #16
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	494c      	ldr	r1, [pc, #304]	; (8000f90 <eventRxDone+0x1cc>)
 8000e60:	4618      	mov	r0, r3
 8000e62:	f007 fec9 	bl	8008bf8 <siprintf>
        	HAL_UART_Transmit(&huart2, (uint8_t *)DataREC, strlen(DataREC), HAL_MAX_DELAY);
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff f988 	bl	8000180 <strlen>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	f107 0108 	add.w	r1, r7, #8
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	4841      	ldr	r0, [pc, #260]	; (8000f84 <eventRxDone+0x1c0>)
 8000e7e:	f004 ff61 	bl	8005d44 <HAL_UART_Transmit>
        	 BSP_LED_Toggle(LED_GREEN);
 8000e82:	2001      	movs	r0, #1
 8000e84:	f000 fc76 	bl	8001774 <BSP_LED_Toggle>
            enterMasterTx(fsm);
 8000e88:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000e8c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	f000 f97d 	bl	8001190 <enterMasterTx>
            fsm->subState = SSTATE_TX;
 8000e96:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000e9a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	705a      	strb	r2, [r3, #1]
          break;
 8000ea4:	e025      	b.n	8000ef2 <eventRxDone+0x12e>
          else if (strncmp(fsm->rxBuffer, "PING", 4) == 0)
 8000ea6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000eaa:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3310      	adds	r3, #16
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	4937      	ldr	r1, [pc, #220]	; (8000f94 <eventRxDone+0x1d0>)
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f007 febe 	bl	8008c38 <strncmp>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10e      	bne.n	8000ee0 <eventRxDone+0x11c>
            enterSlaveRx(fsm);
 8000ec2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000ec6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	f000 f932 	bl	8001134 <enterSlaveRx>
            fsm->state = STATE_SLAVE;
 8000ed0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000ed4:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2202      	movs	r2, #2
 8000edc:	701a      	strb	r2, [r3, #0]
          break;
 8000ede:	e008      	b.n	8000ef2 <eventRxDone+0x12e>
            enterMasterRx(fsm);
 8000ee0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000ee4:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000ee8:	6818      	ldr	r0, [r3, #0]
 8000eea:	f000 f8f5 	bl	80010d8 <enterMasterRx>
          break;
 8000eee:	e000      	b.n	8000ef2 <eventRxDone+0x12e>
          break;
 8000ef0:	bf00      	nop
      break;
 8000ef2:	e03f      	b.n	8000f74 <eventRxDone+0x1b0>
      switch (fsm->subState)
 8000ef4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000ef8:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	785b      	ldrb	r3, [r3, #1]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d135      	bne.n	8000f70 <eventRxDone+0x1ac>
          transitionRxDone(fsm);
 8000f04:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000f08:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	f000 f9d1 	bl	80012b4 <transitionRxDone>
          if (strncmp(fsm->rxBuffer, "PING", 4) == 0)
 8000f12:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000f16:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3310      	adds	r3, #16
 8000f1e:	2204      	movs	r2, #4
 8000f20:	491c      	ldr	r1, [pc, #112]	; (8000f94 <eventRxDone+0x1d0>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f007 fe88 	bl	8008c38 <strncmp>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d111      	bne.n	8000f52 <eventRxDone+0x18e>
        	  BSP_LED_Toggle(LED_GREEN);
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f000 fc20 	bl	8001774 <BSP_LED_Toggle>
            enterSlaveTx(fsm);
 8000f34:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000f38:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000f3c:	6818      	ldr	r0, [r3, #0]
 8000f3e:	f000 f96d 	bl	800121c <enterSlaveTx>
            fsm->subState = SSTATE_TX;
 8000f42:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000f46:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	705a      	strb	r2, [r3, #1]
          break;
 8000f50:	e00f      	b.n	8000f72 <eventRxDone+0x1ae>
            enterMasterRx(fsm);
 8000f52:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000f56:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	f000 f8bc 	bl	80010d8 <enterMasterRx>
            fsm->state = STATE_MASTER;
 8000f60:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000f64:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
          break;
 8000f6e:	e000      	b.n	8000f72 <eventRxDone+0x1ae>
          break;
 8000f70:	bf00      	nop
      break;
 8000f72:	bf00      	nop
  }
}
 8000f74:	bf00      	nop
 8000f76:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	08009408 	.word	0x08009408
 8000f84:	20000df8 	.word	0x20000df8
 8000f88:	200008f8 	.word	0x200008f8
 8000f8c:	08009418 	.word	0x08009418
 8000f90:	08009420 	.word	0x08009420
 8000f94:	08009434 	.word	0x08009434

08000f98 <eventTxTimeout>:
  * @brief  Process the TX Timeout event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventTxTimeout(pingPongFSM_t *const fsm)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event TX Timeout\r\n", 18, HAL_MAX_DELAY);
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa4:	2212      	movs	r2, #18
 8000fa6:	4914      	ldr	r1, [pc, #80]	; (8000ff8 <eventTxTimeout+0x60>)
 8000fa8:	4814      	ldr	r0, [pc, #80]	; (8000ffc <eventTxTimeout+0x64>)
 8000faa:	f004 fecb 	bl	8005d44 <HAL_UART_Transmit>
  switch (fsm->state)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d002      	beq.n	8000fbc <eventTxTimeout+0x24>
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d00d      	beq.n	8000fd6 <eventTxTimeout+0x3e>
        default:
          break;
      }
      break;
    default:
      break;
 8000fba:	e019      	b.n	8000ff0 <eventTxTimeout+0x58>
      switch (fsm->subState)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	785b      	ldrb	r3, [r3, #1]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d106      	bne.n	8000fd2 <eventTxTimeout+0x3a>
          enterMasterRx(fsm);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 f887 	bl	80010d8 <enterMasterRx>
          fsm->subState = SSTATE_RX;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	705a      	strb	r2, [r3, #1]
          break;
 8000fd0:	e000      	b.n	8000fd4 <eventTxTimeout+0x3c>
          break;
 8000fd2:	bf00      	nop
      break;
 8000fd4:	e00c      	b.n	8000ff0 <eventTxTimeout+0x58>
      switch (fsm->subState)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	785b      	ldrb	r3, [r3, #1]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d106      	bne.n	8000fec <eventTxTimeout+0x54>
          enterSlaveRx(fsm);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f8a8 	bl	8001134 <enterSlaveRx>
          fsm->subState = SSTATE_RX;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	705a      	strb	r2, [r3, #1]
          break;
 8000fea:	e000      	b.n	8000fee <eventTxTimeout+0x56>
          break;
 8000fec:	bf00      	nop
      break;
 8000fee:	bf00      	nop
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	0800943c 	.word	0x0800943c
 8000ffc:	20000df8 	.word	0x20000df8

08001000 <eventRxTimeout>:
  * @brief  Process the RX Timeout event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventRxTimeout(pingPongFSM_t *const fsm)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event RX Timeout\r\n", 18, HAL_MAX_DELAY);
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	2212      	movs	r2, #18
 800100e:	4915      	ldr	r1, [pc, #84]	; (8001064 <eventRxTimeout+0x64>)
 8001010:	4815      	ldr	r0, [pc, #84]	; (8001068 <eventRxTimeout+0x68>)
 8001012:	f004 fe97 	bl	8005d44 <HAL_UART_Transmit>
  switch (fsm->state)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d002      	beq.n	8001024 <eventRxTimeout+0x24>
 800101e:	2b02      	cmp	r3, #2
 8001020:	d012      	beq.n	8001048 <eventRxTimeout+0x48>
        default:
          break;
      }
      break;
    default:
      break;
 8001022:	e01b      	b.n	800105c <eventRxTimeout+0x5c>
      switch (fsm->subState)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	785b      	ldrb	r3, [r3, #1]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d10b      	bne.n	8001044 <eventRxTimeout+0x44>
          HAL_Delay(fsm->randomDelay);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fd09 	bl	8002a48 <HAL_Delay>
          enterMasterTx(fsm);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f8aa 	bl	8001190 <enterMasterTx>
          fsm->subState = SSTATE_TX;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2202      	movs	r2, #2
 8001040:	705a      	strb	r2, [r3, #1]
          break;
 8001042:	e000      	b.n	8001046 <eventRxTimeout+0x46>
          break;
 8001044:	bf00      	nop
      break;
 8001046:	e009      	b.n	800105c <eventRxTimeout+0x5c>
      switch (fsm->subState)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	785b      	ldrb	r3, [r3, #1]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d103      	bne.n	8001058 <eventRxTimeout+0x58>
          enterSlaveRx(fsm);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f86f 	bl	8001134 <enterSlaveRx>
          break;
 8001056:	e000      	b.n	800105a <eventRxTimeout+0x5a>
          break;
 8001058:	bf00      	nop
      break;
 800105a:	bf00      	nop
  }
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	08009450 	.word	0x08009450
 8001068:	20000df8 	.word	0x20000df8

0800106c <eventRxError>:
  * @brief  Process the RX Error event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventRxError(pingPongFSM_t *const fsm)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event Rx Error\r\n", 16, HAL_MAX_DELAY);
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	2210      	movs	r2, #16
 800107a:	4915      	ldr	r1, [pc, #84]	; (80010d0 <eventRxError+0x64>)
 800107c:	4815      	ldr	r0, [pc, #84]	; (80010d4 <eventRxError+0x68>)
 800107e:	f004 fe61 	bl	8005d44 <HAL_UART_Transmit>
  switch (fsm->state)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d002      	beq.n	8001090 <eventRxError+0x24>
 800108a:	2b02      	cmp	r3, #2
 800108c:	d012      	beq.n	80010b4 <eventRxError+0x48>
        default:
          break;
      }
      break;
    default:
      break;
 800108e:	e01b      	b.n	80010c8 <eventRxError+0x5c>
      switch (fsm->subState)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	785b      	ldrb	r3, [r3, #1]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d10b      	bne.n	80010b0 <eventRxError+0x44>
          HAL_Delay(fsm->randomDelay);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	4618      	mov	r0, r3
 800109e:	f001 fcd3 	bl	8002a48 <HAL_Delay>
          enterMasterTx(fsm);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f874 	bl	8001190 <enterMasterTx>
          fsm->subState = SSTATE_TX;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2202      	movs	r2, #2
 80010ac:	705a      	strb	r2, [r3, #1]
          break;
 80010ae:	e000      	b.n	80010b2 <eventRxError+0x46>
          break;
 80010b0:	bf00      	nop
      break;
 80010b2:	e009      	b.n	80010c8 <eventRxError+0x5c>
      switch (fsm->subState)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	785b      	ldrb	r3, [r3, #1]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d103      	bne.n	80010c4 <eventRxError+0x58>
          enterSlaveRx(fsm);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 f839 	bl	8001134 <enterSlaveRx>
          break;
 80010c2:	e000      	b.n	80010c6 <eventRxError+0x5a>
          break;
 80010c4:	bf00      	nop
      break;
 80010c6:	bf00      	nop
  }
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	08009464 	.word	0x08009464
 80010d4:	20000df8 	.word	0x20000df8

080010d8 <enterMasterRx>:
  * @brief  Entry actions for the RX sub-state of the Master state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterMasterRx(pingPongFSM_t *const fsm)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Master Rx start\r\n", 17, HAL_MAX_DELAY);
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	2211      	movs	r2, #17
 80010e6:	4910      	ldr	r1, [pc, #64]	; (8001128 <enterMasterRx+0x50>)
 80010e8:	4810      	ldr	r0, [pc, #64]	; (800112c <enterMasterRx+0x54>)
 80010ea:	f004 fe2b 	bl	8005d44 <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
 80010ee:	2300      	movs	r3, #0
 80010f0:	2200      	movs	r2, #0
 80010f2:	f240 2162 	movw	r1, #610	; 0x262
 80010f6:	f240 2062 	movw	r0, #610	; 0x262
 80010fa:	f000 feb9 	bl	8001e70 <SUBGRF_SetDioIrqParams>
                          IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 80010fe:	2100      	movs	r1, #0
 8001100:	2001      	movs	r0, #1
 8001102:	f001 fb47 	bl	8002794 <SUBGRF_SetSwitch>
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <enterMasterRx+0x58>)
 8001108:	22ff      	movs	r2, #255	; 0xff
 800110a:	615a      	str	r2, [r3, #20]
  SUBGRF_SetPacketParams(&packetParams);
 800110c:	4808      	ldr	r0, [pc, #32]	; (8001130 <enterMasterRx+0x58>)
 800110e:	f001 f917 	bl	8002340 <SUBGRF_SetPacketParams>
  SUBGRF_SetRx(fsm->rxTimeout << 6);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	019b      	lsls	r3, r3, #6
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fdb1 	bl	8001c80 <SUBGRF_SetRx>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	08009478 	.word	0x08009478
 800112c:	20000df8 	.word	0x20000df8
 8001130:	200008c8 	.word	0x200008c8

08001134 <enterSlaveRx>:
  * @brief  Entry actions for the RX sub-state of the Slave state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterSlaveRx(pingPongFSM_t *const fsm)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Slave Rx start\r\n", 16, HAL_MAX_DELAY);
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
 8001140:	2210      	movs	r2, #16
 8001142:	4910      	ldr	r1, [pc, #64]	; (8001184 <enterSlaveRx+0x50>)
 8001144:	4810      	ldr	r0, [pc, #64]	; (8001188 <enterSlaveRx+0x54>)
 8001146:	f004 fdfd 	bl	8005d44 <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
 800114a:	2300      	movs	r3, #0
 800114c:	2200      	movs	r2, #0
 800114e:	f240 2162 	movw	r1, #610	; 0x262
 8001152:	f240 2062 	movw	r0, #610	; 0x262
 8001156:	f000 fe8b 	bl	8001e70 <SUBGRF_SetDioIrqParams>
                          IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 800115a:	2100      	movs	r1, #0
 800115c:	2001      	movs	r0, #1
 800115e:	f001 fb19 	bl	8002794 <SUBGRF_SetSwitch>
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <enterSlaveRx+0x58>)
 8001164:	22ff      	movs	r2, #255	; 0xff
 8001166:	615a      	str	r2, [r3, #20]
  SUBGRF_SetPacketParams(&packetParams);
 8001168:	4808      	ldr	r0, [pc, #32]	; (800118c <enterSlaveRx+0x58>)
 800116a:	f001 f8e9 	bl	8002340 <SUBGRF_SetPacketParams>
  SUBGRF_SetRx(fsm->rxTimeout << 6);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	019b      	lsls	r3, r3, #6
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fd83 	bl	8001c80 <SUBGRF_SetRx>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	0800948c 	.word	0x0800948c
 8001188:	20000df8 	.word	0x20000df8
 800118c:	200008c8 	.word	0x200008c8

08001190 <enterMasterTx>:
  * @brief  Entry actions for the TX sub-state of the Master state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterMasterTx(pingPongFSM_t *const fsm)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  HAL_Delay(fsm->rxMargin);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	4618      	mov	r0, r3
 800119e:	f001 fc53 	bl	8002a48 <HAL_Delay>

  HAL_UART_Transmit(&huart2, (uint8_t *)"...PING\r\n", 9, HAL_MAX_DELAY);
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	2209      	movs	r2, #9
 80011a8:	4917      	ldr	r1, [pc, #92]	; (8001208 <enterMasterTx+0x78>)
 80011aa:	4818      	ldr	r0, [pc, #96]	; (800120c <enterMasterTx+0x7c>)
 80011ac:	f004 fdca 	bl	8005d44 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t *)"Master Tx start\r\n", 17, HAL_MAX_DELAY);
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	2211      	movs	r2, #17
 80011b6:	4916      	ldr	r1, [pc, #88]	; (8001210 <enterMasterTx+0x80>)
 80011b8:	4814      	ldr	r0, [pc, #80]	; (800120c <enterMasterTx+0x7c>)
 80011ba:	f004 fdc3 	bl	8005d44 <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 80011be:	2300      	movs	r3, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	f240 2101 	movw	r1, #513	; 0x201
 80011c6:	f240 2001 	movw	r0, #513	; 0x201
 80011ca:	f000 fe51 	bl	8001e70 <SUBGRF_SetDioIrqParams>
                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 80011ce:	2101      	movs	r1, #1
 80011d0:	2001      	movs	r0, #1
 80011d2:	f001 fadf 	bl	8002794 <SUBGRF_SetSwitch>
  // Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
  SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 255));
 80011d6:	f640 0089 	movw	r0, #2185	; 0x889
 80011da:	f001 f9fb 	bl	80025d4 <SUBGRF_ReadRegister>
 80011de:	21ff      	movs	r1, #255	; 0xff
 80011e0:	f640 0089 	movw	r0, #2185	; 0x889
 80011e4:	f001 f9e2 	bl	80025ac <SUBGRF_WriteRegister>
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <enterMasterTx+0x84>)
 80011ea:	22ff      	movs	r2, #255	; 0xff
 80011ec:	615a      	str	r2, [r3, #20]
  SUBGRF_SetPacketParams(&packetParams);
 80011ee:	4809      	ldr	r0, [pc, #36]	; (8001214 <enterMasterTx+0x84>)
 80011f0:	f001 f8a6 	bl	8002340 <SUBGRF_SetPacketParams>
  SUBGRF_SendPayload((uint8_t *)"PINGpppppppppppppppppppppppppppppppppppppppp", 255, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	21ff      	movs	r1, #255	; 0xff
 80011f8:	4807      	ldr	r0, [pc, #28]	; (8001218 <enterMasterTx+0x88>)
 80011fa:	f000 fc6b 	bl	8001ad4 <SUBGRF_SendPayload>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	080094a0 	.word	0x080094a0
 800120c:	20000df8 	.word	0x20000df8
 8001210:	080094ac 	.word	0x080094ac
 8001214:	200008c8 	.word	0x200008c8
 8001218:	080094c0 	.word	0x080094c0

0800121c <enterSlaveTx>:
  * @brief  Entry actions for the TX sub-state of the Slave state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterSlaveTx(pingPongFSM_t *const fsm)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_Delay(fsm->rxMargin);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fc0d 	bl	8002a48 <HAL_Delay>

  HAL_UART_Transmit(&huart2, (uint8_t *)"...PONG\r\n", 9, HAL_MAX_DELAY);
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	2209      	movs	r2, #9
 8001234:	4919      	ldr	r1, [pc, #100]	; (800129c <enterSlaveTx+0x80>)
 8001236:	481a      	ldr	r0, [pc, #104]	; (80012a0 <enterSlaveTx+0x84>)
 8001238:	f004 fd84 	bl	8005d44 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t *)"Slave Tx start\r\n", 16, HAL_MAX_DELAY);
 800123c:	f04f 33ff 	mov.w	r3, #4294967295
 8001240:	2210      	movs	r2, #16
 8001242:	4918      	ldr	r1, [pc, #96]	; (80012a4 <enterSlaveTx+0x88>)
 8001244:	4816      	ldr	r0, [pc, #88]	; (80012a0 <enterSlaveTx+0x84>)
 8001246:	f004 fd7d 	bl	8005d44 <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800124a:	2300      	movs	r3, #0
 800124c:	2200      	movs	r2, #0
 800124e:	f240 2101 	movw	r1, #513	; 0x201
 8001252:	f240 2001 	movw	r0, #513	; 0x201
 8001256:	f000 fe0b 	bl	8001e70 <SUBGRF_SetDioIrqParams>
                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 800125a:	2101      	movs	r1, #1
 800125c:	2001      	movs	r0, #1
 800125e:	f001 fa99 	bl	8002794 <SUBGRF_SetSwitch>
  // Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
  SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0xFF));
 8001262:	f640 0089 	movw	r0, #2185	; 0x889
 8001266:	f001 f9b5 	bl	80025d4 <SUBGRF_ReadRegister>
 800126a:	21ff      	movs	r1, #255	; 0xff
 800126c:	f640 0089 	movw	r0, #2185	; 0x889
 8001270:	f001 f99c 	bl	80025ac <SUBGRF_WriteRegister>
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <enterSlaveTx+0x8c>)
 8001276:	22ff      	movs	r2, #255	; 0xff
 8001278:	615a      	str	r2, [r3, #20]
  SUBGRF_SetPacketParams(&packetParams);
 800127a:	480b      	ldr	r0, [pc, #44]	; (80012a8 <enterSlaveTx+0x8c>)
 800127c:	f001 f860 	bl	8002340 <SUBGRF_SetPacketParams>
  //SUBGRF_SendPayload((uint8_t *)"PONGdsaaahhhhhhaaaaamnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\r\n", 255, 0);
  //SUBGRF_SendPayload(rxBuffer, 255, 0);
  //memset(rxBuffer,' ',sizeof(rxBuffer));
   SUBGRF_SendPayload(rxBuffer_encypt, 255, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	21ff      	movs	r1, #255	; 0xff
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <enterSlaveTx+0x90>)
 8001286:	f000 fc25 	bl	8001ad4 <SUBGRF_SendPayload>
   //memset(rxBuffer_encypt,' ',sizeof(rxBuffer_encypt));
  //strcpy(rxBuffer,"PONGnoLoad");
  memset(rxBuffer,0,sizeof(rxBuffer));
 800128a:	22ff      	movs	r2, #255	; 0xff
 800128c:	2100      	movs	r1, #0
 800128e:	4808      	ldr	r0, [pc, #32]	; (80012b0 <enterSlaveTx+0x94>)
 8001290:	f007 fb9c 	bl	80089cc <memset>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	080094f0 	.word	0x080094f0
 80012a0:	20000df8 	.word	0x20000df8
 80012a4:	080094fc 	.word	0x080094fc
 80012a8:	200008c8 	.word	0x200008c8
 80012ac:	200008f8 	.word	0x200008f8
 80012b0:	20000008 	.word	0x20000008

080012b4 <transitionRxDone>:
  * @brief  Transition actions executed on every RX Done event (helper function)
  * @param  fsm pointer to FSM context
  * @retval None
  */
void transitionRxDone(pingPongFSM_t *const fsm)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	; 0x50
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  PacketStatus_t packetStatus;
  char uartBuff[50];

  // Workaround 15.3 in DS.SX1261-2.W.APP (because following RX w/ timeout sequence)
  SUBGRF_WriteRegister(0x0920, 0x00);
 80012bc:	2100      	movs	r1, #0
 80012be:	f44f 6012 	mov.w	r0, #2336	; 0x920
 80012c2:	f001 f973 	bl	80025ac <SUBGRF_WriteRegister>
  SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02));
 80012c6:	f640 1044 	movw	r0, #2372	; 0x944
 80012ca:	f001 f983 	bl	80025d4 <SUBGRF_ReadRegister>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	f640 1044 	movw	r0, #2372	; 0x944
 80012dc:	f001 f966 	bl	80025ac <SUBGRF_WriteRegister>

  SUBGRF_GetPayload((uint8_t *)fsm->rxBuffer, &fsm->rxSize, 0xFF);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f103 0010 	add.w	r0, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80012ec:	22ff      	movs	r2, #255	; 0xff
 80012ee:	4619      	mov	r1, r3
 80012f0:	f000 fbce 	bl	8001a90 <SUBGRF_GetPayload>
  SUBGRF_GetPacketStatus(&packetStatus);
 80012f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 f905 	bl	8002508 <SUBGRF_GetPacketStatus>

  sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n", packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 80012fe:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8001302:	461a      	mov	r2, r3
 8001304:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
 8001308:	f107 0008 	add.w	r0, r7, #8
 800130c:	490a      	ldr	r1, [pc, #40]	; (8001338 <transitionRxDone+0x84>)
 800130e:	f007 fc73 	bl	8008bf8 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	4618      	mov	r0, r3
 8001318:	f7fe ff32 	bl	8000180 <strlen>
 800131c:	4603      	mov	r3, r0
 800131e:	b29a      	uxth	r2, r3
 8001320:	f107 0108 	add.w	r1, r7, #8
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <transitionRxDone+0x88>)
 800132a:	f004 fd0b 	bl	8005d44 <HAL_UART_Transmit>
}
 800132e:	bf00      	nop
 8001330:	3750      	adds	r7, #80	; 0x50
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	08009510 	.word	0x08009510
 800133c:	20000df8 	.word	0x20000df8

08001340 <fsmInit>:
void fsmInit(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0

	// get random number
	  uint32_t rnd = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
	  SUBGRF_SetDioIrqParams(IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 800134a:	2300      	movs	r3, #0
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	2000      	movs	r0, #0
 8001352:	f000 fd8d 	bl	8001e70 <SUBGRF_SetDioIrqParams>
	  rnd = SUBGRF_GetRandom();
 8001356:	f000 fc10 	bl	8001b7a <SUBGRF_GetRandom>
 800135a:	6078      	str	r0, [r7, #4]

	  fsm.state = STATE_NULL;
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <fsmInit+0x98>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
	  fsm.subState = SSTATE_NULL;
 8001362:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <fsmInit+0x98>)
 8001364:	2200      	movs	r2, #0
 8001366:	705a      	strb	r2, [r3, #1]
	  fsm.rxTimeout = 3000; // 3000 ms
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <fsmInit+0x98>)
 800136a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800136e:	605a      	str	r2, [r3, #4]
	  fsm.rxMargin = 200;   // 200 ms
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <fsmInit+0x98>)
 8001372:	22c8      	movs	r2, #200	; 0xc8
 8001374:	609a      	str	r2, [r3, #8]
	  fsm.randomDelay = rnd >> 22; // [0, 1023] ms
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0d9b      	lsrs	r3, r3, #22
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <fsmInit+0x98>)
 800137c:	60d3      	str	r3, [r2, #12]
	  //sprintf(uartBuff, "rand=%lu\r\n", fsm.randomDelay);
	  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 800137e:	4817      	ldr	r0, [pc, #92]	; (80013dc <fsmInit+0x9c>)
 8001380:	f7fe fefe 	bl	8000180 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
 800138c:	4913      	ldr	r1, [pc, #76]	; (80013dc <fsmInit+0x9c>)
 800138e:	4814      	ldr	r0, [pc, #80]	; (80013e0 <fsmInit+0xa0>)
 8001390:	f004 fcd8 	bl	8005d44 <HAL_UART_Transmit>

	  HAL_Delay(fsm.randomDelay);
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <fsmInit+0x98>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	4618      	mov	r0, r3
 800139a:	f001 fb55 	bl	8002a48 <HAL_Delay>
	  SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
 800139e:	2300      	movs	r3, #0
 80013a0:	2200      	movs	r2, #0
 80013a2:	f240 2142 	movw	r1, #578	; 0x242
 80013a6:	f240 2042 	movw	r0, #578	; 0x242
 80013aa:	f000 fd61 	bl	8001e70 <SUBGRF_SetDioIrqParams>
	                          IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
	                          IRQ_RADIO_NONE,
	                          IRQ_RADIO_NONE );
	  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 80013ae:	2100      	movs	r1, #0
 80013b0:	2001      	movs	r0, #1
 80013b2:	f001 f9ef 	bl	8002794 <SUBGRF_SetSwitch>
	  SUBGRF_SetRx(fsm.rxTimeout << 6);
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <fsmInit+0x98>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	019b      	lsls	r3, r3, #6
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fc5f 	bl	8001c80 <SUBGRF_SetRx>
	  fsm.state = STATE_SLAVE;
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <fsmInit+0x98>)
 80013c4:	2202      	movs	r2, #2
 80013c6:	701a      	strb	r2, [r3, #0]
	  //fsm.subState = SSTATE_RX;
	  //fsm.state = STATE_MASTER;
	  fsm.subState = SSTATE_RX;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <fsmInit+0x98>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	705a      	strb	r2, [r3, #1]
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200007b4 	.word	0x200007b4
 80013dc:	200009f8 	.word	0x200009f8
 80013e0:	20000df8 	.word	0x20000df8

080013e4 <SUBGHZ>:
	  // RF_{IRQ0, IRQ1, IRQ2} pins
	  GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
void SUBGHZ(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	    eventReceptor = NULL;
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <SUBGHZ+0x24>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
	    while (eventReceptor == NULL);
 80013ee:	bf00      	nop
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SUBGHZ+0x24>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0fb      	beq.n	80013f0 <SUBGHZ+0xc>
	    {
	    radioInit();
 80013f8:	f7ff fbfe 	bl	8000bf8 <radioInit>
	    eventReceptor(&fsm);
 80013fc:	4b02      	ldr	r3, [pc, #8]	; (8001408 <SUBGHZ+0x24>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <SUBGHZ+0x28>)
 8001402:	4798      	blx	r3
	    }
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200008e4 	.word	0x200008e4
 800140c:	200007b4 	.word	0x200007b4

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f007 fa8a 	bl	8008958 <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20010000 	.word	0x20010000
 8001470:	00000400 	.word	0x00000400
 8001474:	200008f4 	.word	0x200008f4
 8001478:	20003388 	.word	0x20003388

0800147c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <LL_AHB2_GRP1_EnableClock>:
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4313      	orrs	r3, r2
 800149e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ac:	68fb      	ldr	r3, [r7, #12]
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <LL_APB1_GRP1_EnableClock>:
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80014d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014dc:	68fb      	ldr	r3, [r7, #12]
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <MX_USART2_UART_Init+0x90>)
 80014ee:	4a23      	ldr	r2, [pc, #140]	; (800157c <MX_USART2_UART_Init+0x94>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <MX_USART2_UART_Init+0x90>)
 80014f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <MX_USART2_UART_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <MX_USART2_UART_Init+0x90>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <MX_USART2_UART_Init+0x90>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_USART2_UART_Init+0x90>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <MX_USART2_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_USART2_UART_Init+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <MX_USART2_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_USART2_UART_Init+0x90>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <MX_USART2_UART_Init+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001530:	4811      	ldr	r0, [pc, #68]	; (8001578 <MX_USART2_UART_Init+0x90>)
 8001532:	f004 fbb7 	bl	8005ca4 <HAL_UART_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800153c:	f7ff fa3c 	bl	80009b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001540:	2100      	movs	r1, #0
 8001542:	480d      	ldr	r0, [pc, #52]	; (8001578 <MX_USART2_UART_Init+0x90>)
 8001544:	f005 fecc 	bl	80072e0 <HAL_UARTEx_SetTxFifoThreshold>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800154e:	f7ff fa33 	bl	80009b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001552:	2100      	movs	r1, #0
 8001554:	4808      	ldr	r0, [pc, #32]	; (8001578 <MX_USART2_UART_Init+0x90>)
 8001556:	f005 ff01 	bl	800735c <HAL_UARTEx_SetRxFifoThreshold>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001560:	f7ff fa2a 	bl	80009b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_USART2_UART_Init+0x90>)
 8001566:	f005 fe83 	bl	8007270 <HAL_UARTEx_DisableFifoMode>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001570:	f7ff fa22 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000df8 	.word	0x20000df8
 800157c:	40004400 	.word	0x40004400

08001580 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b096      	sub	sp, #88	; 0x58
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	2238      	movs	r2, #56	; 0x38
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f007 fa13 	bl	80089cc <memset>
  if(uartHandle->Instance==USART2)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a34      	ldr	r2, [pc, #208]	; (800167c <HAL_UART_MspInit+0xfc>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d161      	bne.n	8001674 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015b0:	2302      	movs	r3, #2
 80015b2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015b4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80015b8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 fb04 	bl	8004bcc <HAL_RCCEx_PeriphCLKConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015ca:	f7ff f9f5 	bl	80009b8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80015d2:	f7ff ff71 	bl	80014b8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7ff ff56 	bl	8001488 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80015dc:	230c      	movs	r3, #12
 80015de:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ec:	2307      	movs	r3, #7
 80015ee:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015f4:	4619      	mov	r1, r3
 80015f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fa:	f001 fee3 	bl	80033c4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_UART_MspInit+0x100>)
 8001600:	4a20      	ldr	r2, [pc, #128]	; (8001684 <HAL_UART_MspInit+0x104>)
 8001602:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_UART_MspInit+0x100>)
 8001606:	2213      	movs	r2, #19
 8001608:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_UART_MspInit+0x100>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_UART_MspInit+0x100>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_UART_MspInit+0x100>)
 8001618:	2280      	movs	r2, #128	; 0x80
 800161a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_UART_MspInit+0x100>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_UART_MspInit+0x100>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_UART_MspInit+0x100>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_UART_MspInit+0x100>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001634:	4812      	ldr	r0, [pc, #72]	; (8001680 <HAL_UART_MspInit+0x100>)
 8001636:	f001 fb43 	bl	8002cc0 <HAL_DMA_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001640:	f7ff f9ba 	bl	80009b8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001644:	2110      	movs	r1, #16
 8001646:	480e      	ldr	r0, [pc, #56]	; (8001680 <HAL_UART_MspInit+0x100>)
 8001648:	f001 fde4 	bl	8003214 <HAL_DMA_ConfigChannelAttributes>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_UART_MspInit+0xd6>
    {
      Error_Handler();
 8001652:	f7ff f9b1 	bl	80009b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a09      	ldr	r2, [pc, #36]	; (8001680 <HAL_UART_MspInit+0x100>)
 800165a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800165e:	4a08      	ldr	r2, [pc, #32]	; (8001680 <HAL_UART_MspInit+0x100>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2105      	movs	r1, #5
 8001668:	2025      	movs	r0, #37	; 0x25
 800166a:	f001 fac6 	bl	8002bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800166e:	2025      	movs	r0, #37	; 0x25
 8001670:	f001 fadd 	bl	8002c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001674:	bf00      	nop
 8001676:	3758      	adds	r7, #88	; 0x58
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40004400 	.word	0x40004400
 8001680:	20000e8c 	.word	0x20000e8c
 8001684:	40020008 	.word	0x40020008

08001688 <HAL_UARTEx_RxEventCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, RX_SIZE);
 8001694:	22ff      	movs	r2, #255	; 0xff
 8001696:	4906      	ldr	r1, [pc, #24]	; (80016b0 <HAL_UARTEx_RxEventCallback+0x28>)
 8001698:	4806      	ldr	r0, [pc, #24]	; (80016b4 <HAL_UARTEx_RxEventCallback+0x2c>)
 800169a:	f005 fe9d 	bl	80073d8 <HAL_UARTEx_ReceiveToIdle_DMA>
    size = Size;
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_UARTEx_RxEventCallback+0x30>)
 80016a4:	701a      	strb	r2, [r3, #0]
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000008 	.word	0x20000008
 80016b4:	20000df8 	.word	0x20000df8
 80016b8:	200009f7 	.word	0x200009f7

080016bc <UartDmaStart>:
void UartDmaStart(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, RX_SIZE);
 80016c0:	22ff      	movs	r2, #255	; 0xff
 80016c2:	4907      	ldr	r1, [pc, #28]	; (80016e0 <UartDmaStart+0x24>)
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <UartDmaStart+0x28>)
 80016c6:	f005 fe87 	bl	80073d8 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <UartDmaStart+0x2c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <UartDmaStart+0x2c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0204 	bic.w	r2, r2, #4
 80016d8:	601a      	str	r2, [r3, #0]
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000df8 	.word	0x20000df8
 80016e8:	20000e8c 	.word	0x20000e8c

080016ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016ec:	480d      	ldr	r0, [pc, #52]	; (8001724 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016f0:	f7ff fec4 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <LoopForever+0x6>)
  ldr r1, =_edata
 80016f6:	490d      	ldr	r1, [pc, #52]	; (800172c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <LoopForever+0xe>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <LoopForever+0x12>)
  ldr r4, =_ebss
 800170c:	4c0a      	ldr	r4, [pc, #40]	; (8001738 <LoopForever+0x16>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800171a:	f007 f923 	bl	8008964 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800171e:	f7ff f888 	bl	8000832 <main>

08001722 <LoopForever>:

LoopForever:
    b LoopForever
 8001722:	e7fe      	b.n	8001722 <LoopForever>
  ldr   r0, =_estack
 8001724:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001730:	08009700 	.word	0x08009700
  ldr r2, =_sbss
 8001734:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001738:	20003384 	.word	0x20003384

0800173c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC_IRQHandler>
	...

08001740 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <BSP_LED_Off+0x2c>)
 800174e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	4a06      	ldr	r2, [pc, #24]	; (8001770 <BSP_LED_Off+0x30>)
 8001756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800175a:	2200      	movs	r2, #0
 800175c:	4619      	mov	r1, r3
 800175e:	f001 ff91 	bl	8003684 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000108 	.word	0x20000108
 8001770:	0800962c 	.word	0x0800962c

08001774 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <BSP_LED_Toggle+0x2c>)
 8001782:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	4906      	ldr	r1, [pc, #24]	; (80017a4 <BSP_LED_Toggle+0x30>)
 800178a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800178e:	4619      	mov	r1, r3
 8001790:	4610      	mov	r0, r2
 8001792:	f001 ff8e 	bl	80036b2 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000108 	.word	0x20000108
 80017a4:	0800962c 	.word	0x0800962c

080017a8 <LL_AHB2_GRP1_EnableClock>:
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4313      	orrs	r3, r2
 80017be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4013      	ands	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017cc:	68fb      	ldr	r3, [r7, #12]
}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80017ec:	2004      	movs	r0, #4
 80017ee:	f7ff ffdb 	bl	80017a8 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80017f2:	2310      	movs	r3, #16
 80017f4:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4619      	mov	r1, r3
 8001806:	4812      	ldr	r0, [pc, #72]	; (8001850 <BSP_RADIO_Init+0x78>)
 8001808:	f001 fddc 	bl	80033c4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800180c:	2320      	movs	r3, #32
 800180e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	4619      	mov	r1, r3
 8001814:	480e      	ldr	r0, [pc, #56]	; (8001850 <BSP_RADIO_Init+0x78>)
 8001816:	f001 fdd5 	bl	80033c4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800181a:	2308      	movs	r3, #8
 800181c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	480b      	ldr	r0, [pc, #44]	; (8001850 <BSP_RADIO_Init+0x78>)
 8001824:	f001 fdce 	bl	80033c4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001828:	2200      	movs	r2, #0
 800182a:	2120      	movs	r1, #32
 800182c:	4808      	ldr	r0, [pc, #32]	; (8001850 <BSP_RADIO_Init+0x78>)
 800182e:	f001 ff29 	bl	8003684 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001832:	2200      	movs	r2, #0
 8001834:	2110      	movs	r1, #16
 8001836:	4806      	ldr	r0, [pc, #24]	; (8001850 <BSP_RADIO_Init+0x78>)
 8001838:	f001 ff24 	bl	8003684 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 800183c:	2200      	movs	r2, #0
 800183e:	2108      	movs	r1, #8
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <BSP_RADIO_Init+0x78>)
 8001842:	f001 ff1f 	bl	8003684 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	48000800 	.word	0x48000800

08001854 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d84b      	bhi.n	80018fc <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001864:	a201      	add	r2, pc, #4	; (adr r2, 800186c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186a:	bf00      	nop
 800186c:	0800187d 	.word	0x0800187d
 8001870:	0800189d 	.word	0x0800189d
 8001874:	080018bd 	.word	0x080018bd
 8001878:	080018dd 	.word	0x080018dd
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	2108      	movs	r1, #8
 8001880:	4821      	ldr	r0, [pc, #132]	; (8001908 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001882:	f001 feff 	bl	8003684 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2110      	movs	r1, #16
 800188a:	481f      	ldr	r0, [pc, #124]	; (8001908 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800188c:	f001 fefa 	bl	8003684 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2120      	movs	r1, #32
 8001894:	481c      	ldr	r0, [pc, #112]	; (8001908 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001896:	f001 fef5 	bl	8003684 <HAL_GPIO_WritePin>
      break;      
 800189a:	e030      	b.n	80018fe <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800189c:	2201      	movs	r2, #1
 800189e:	2108      	movs	r1, #8
 80018a0:	4819      	ldr	r0, [pc, #100]	; (8001908 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80018a2:	f001 feef 	bl	8003684 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80018a6:	2201      	movs	r2, #1
 80018a8:	2110      	movs	r1, #16
 80018aa:	4817      	ldr	r0, [pc, #92]	; (8001908 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80018ac:	f001 feea 	bl	8003684 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80018b0:	2200      	movs	r2, #0
 80018b2:	2120      	movs	r1, #32
 80018b4:	4814      	ldr	r0, [pc, #80]	; (8001908 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80018b6:	f001 fee5 	bl	8003684 <HAL_GPIO_WritePin>
      break;
 80018ba:	e020      	b.n	80018fe <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	2108      	movs	r1, #8
 80018c0:	4811      	ldr	r0, [pc, #68]	; (8001908 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80018c2:	f001 fedf 	bl	8003684 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80018c6:	2201      	movs	r2, #1
 80018c8:	2110      	movs	r1, #16
 80018ca:	480f      	ldr	r0, [pc, #60]	; (8001908 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80018cc:	f001 feda 	bl	8003684 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80018d0:	2201      	movs	r2, #1
 80018d2:	2120      	movs	r1, #32
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80018d6:	f001 fed5 	bl	8003684 <HAL_GPIO_WritePin>
      break;
 80018da:	e010      	b.n	80018fe <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	2108      	movs	r1, #8
 80018e0:	4809      	ldr	r0, [pc, #36]	; (8001908 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80018e2:	f001 fecf 	bl	8003684 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80018e6:	2200      	movs	r2, #0
 80018e8:	2110      	movs	r1, #16
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80018ec:	f001 feca 	bl	8003684 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80018f0:	2201      	movs	r2, #1
 80018f2:	2120      	movs	r1, #32
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80018f6:	f001 fec5 	bl	8003684 <HAL_GPIO_WritePin>
      break;
 80018fa:	e000      	b.n	80018fe <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 80018fc:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	48000800 	.word	0x48000800

0800190c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 800192c:	2301      	movs	r3, #1
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8001936:	b480      	push	{r7}
 8001938:	b085      	sub	sp, #20
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001946:	230f      	movs	r3, #15
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e001      	b.n	8001950 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800194c:	2316      	movs	r3, #22
 800194e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001950:	68fb      	ldr	r3, [r7, #12]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8001960:	f7ff ff3a 	bl	80017d8 <BSP_RADIO_Init>
 8001964:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001966:	4618      	mov	r0, r3
 8001968:	bd80      	pop	{r7, pc}

0800196a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff6c 	bl	8001854 <BSP_RADIO_ConfigRFSwitch>
 800197c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800198a:	f7ff ffbf 	bl	800190c <BSP_RADIO_GetTxConfig>
 800198e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}

08001994 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8001998:	f7ff ffbf 	bl	800191a <BSP_RADIO_IsTCXO>
 800199c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800199e:	4618      	mov	r0, r3
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80019a6:	f7ff ffbf 	bl	8001928 <BSP_RADIO_IsDCDC>
 80019aa:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ffba 	bl	8001936 <BSP_RADIO_GetRFOMaxPowerConfig>
 80019c2:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80019da:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <SUBGRF_Init+0x84>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80019e0:	f7ff f8e4 	bl	8000bac <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80019e4:	2002      	movs	r0, #2
 80019e6:	f000 ffd1 	bl	800298c <Radio_SMPS_Set>

    ImageCalibrated = false;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <SUBGRF_Init+0x88>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80019f0:	2000      	movs	r0, #0
 80019f2:	f000 f909 	bl	8001c08 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80019f6:	f7ff ffcd 	bl	8001994 <RBI_IsTCXO>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d10e      	bne.n	8001a1e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8001a00:	2140      	movs	r1, #64	; 0x40
 8001a02:	2001      	movs	r0, #1
 8001a04:	f000 fa6e 	bl	8001ee4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8001a08:	2100      	movs	r1, #0
 8001a0a:	f640 1011 	movw	r0, #2321	; 0x911
 8001a0e:	f000 fdcd 	bl	80025ac <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8001a12:	237f      	movs	r3, #127	; 0x7f
 8001a14:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8001a16:	7b38      	ldrb	r0, [r7, #12]
 8001a18:	f000 f978 	bl	8001d0c <SUBGRF_Calibrate>
 8001a1c:	e009      	b.n	8001a32 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8001a1e:	2120      	movs	r1, #32
 8001a20:	f640 1011 	movw	r0, #2321	; 0x911
 8001a24:	f000 fdc2 	bl	80025ac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8001a28:	2120      	movs	r1, #32
 8001a2a:	f640 1012 	movw	r0, #2322	; 0x912
 8001a2e:	f000 fdbd 	bl	80025ac <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8001a32:	210e      	movs	r1, #14
 8001a34:	f640 101f 	movw	r0, #2335	; 0x91f
 8001a38:	f000 fdb8 	bl	80025ac <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8001a3c:	f7ff ff8e 	bl	800195c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SUBGRF_Init+0x8c>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000ef8 	.word	0x20000ef8
 8001a54:	20000ef4 	.word	0x20000ef4
 8001a58:	20000eec 	.word	0x20000eec

08001a5c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8001a60:	4b02      	ldr	r3, [pc, #8]	; (8001a6c <SUBGRF_GetOperatingMode+0x10>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	20000eec 	.word	0x20000eec

08001a70 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	2000      	movs	r0, #0
 8001a84:	f000 fdfe 	bl	8002684 <SUBGRF_WriteBuffer>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8001aa2:	f107 0317 	add.w	r3, r7, #23
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	68b8      	ldr	r0, [r7, #8]
 8001aaa:	f000 fd01 	bl	80024b0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	79fa      	ldrb	r2, [r7, #7]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d201      	bcs.n	8001abc <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e007      	b.n	8001acc <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8001abc:	7df8      	ldrb	r0, [r7, #23]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68f9      	ldr	r1, [r7, #12]
 8001ac6:	f000 fdff 	bl	80026c8 <SUBGRF_ReadBuffer>

    return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	460b      	mov	r3, r1
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8001ae2:	7afb      	ldrb	r3, [r7, #11]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f7ff ffc2 	bl	8001a70 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f8a7 	bl	8001c40 <SUBGRF_SetTx>
}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001b14:	f000 fa6a 	bl	8001fec <SUBGRF_GetPacketType>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d108      	bne.n	8001b30 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	2202      	movs	r2, #2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8001b2a:	f000 fd67 	bl	80025fc <SUBGRF_WriteRegisters>
            break;
 8001b2e:	e000      	b.n	8001b32 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8001b30:	bf00      	nop
    }
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	0a1b      	lsrs	r3, r3, #8
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001b54:	f000 fa4a 	bl	8001fec <SUBGRF_GetPacketType>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d108      	bne.n	8001b70 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	2202      	movs	r2, #2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f240 60be 	movw	r0, #1726	; 0x6be
 8001b6a:	f000 fd47 	bl	80025fc <SUBGRF_WriteRegisters>
            break;
 8001b6e:	e000      	b.n	8001b72 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8001b70:	bf00      	nop
    }
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <SUBGRF_GetRandom>:
            break;
    }
}

uint32_t SUBGRF_GetRandom( void )
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8001b8c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8001b90:	f000 fd20 	bl	80025d4 <SUBGRF_ReadRegister>
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8001ba6:	f000 fd01 	bl	80025ac <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8001baa:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8001bae:	f000 fd11 	bl	80025d4 <SUBGRF_ReadRegister>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8001bb6:	79bb      	ldrb	r3, [r7, #6]
 8001bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8001bc4:	f000 fcf2 	bl	80025ac <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8001bc8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001bcc:	f000 f858 	bl	8001c80 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f640 0019 	movw	r0, #2073	; 0x819
 8001bda:	f000 fd31 	bl	8002640 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8001bde:	2000      	movs	r0, #0
 8001be0:	f000 f812 	bl	8001c08 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	4619      	mov	r1, r3
 8001be8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8001bec:	f000 fcde 	bl	80025ac <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8001bf0:	79bb      	ldrb	r3, [r7, #6]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8001bf8:	f000 fcd8 	bl	80025ac <SUBGRF_WriteRegister>

    return number;
 8001bfc:	683b      	ldr	r3, [r7, #0]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	2201      	movs	r2, #1
 8001c16:	4619      	mov	r1, r3
 8001c18:	2080      	movs	r0, #128	; 0x80
 8001c1a:	f000 fd77 	bl	800270c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d103      	bne.n	8001c2c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <SUBGRF_SetStandby+0x34>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8001c2a:	e002      	b.n	8001c32 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <SUBGRF_SetStandby+0x34>)
 8001c2e:	2202      	movs	r2, #2
 8001c30:	701a      	strb	r2, [r3, #0]
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000eec 	.word	0x20000eec

08001c40 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <SUBGRF_SetTx+0x3c>)
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	2203      	movs	r2, #3
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	2083      	movs	r0, #131	; 0x83
 8001c6e:	f000 fd4d 	bl	800270c <SUBGRF_WriteCommand>
}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000eec 	.word	0x20000eec

08001c80 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <SUBGRF_SetRx+0x3c>)
 8001c8a:	2205      	movs	r2, #5
 8001c8c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	0c1b      	lsrs	r3, r3, #16
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	2203      	movs	r2, #3
 8001caa:	4619      	mov	r1, r3
 8001cac:	2082      	movs	r0, #130	; 0x82
 8001cae:	f000 fd2d 	bl	800270c <SUBGRF_WriteCommand>
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000eec 	.word	0x20000eec

08001cc0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8001cca:	1dfb      	adds	r3, r7, #7
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4619      	mov	r1, r3
 8001cd0:	209f      	movs	r0, #159	; 0x9f
 8001cd2:	f000 fd1b 	bl	800270c <SUBGRF_WriteCommand>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8001ce4:	f7ff fe5d 	bl	80019a2 <RBI_IsDCDC>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d102      	bne.n	8001cf4 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	e001      	b.n	8001cf8 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8001cf8:	1dfb      	adds	r3, r7, #7
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	2096      	movs	r0, #150	; 0x96
 8001d00:	f000 fd04 	bl	800270c <SUBGRF_WriteCommand>
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001d14:	793b      	ldrb	r3, [r7, #4]
 8001d16:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	019b      	lsls	r3, r3, #6
 8001d1e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8001d20:	793b      	ldrb	r3, [r7, #4]
 8001d22:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8001d30:	793b      	ldrb	r3, [r7, #4]
 8001d32:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8001d3a:	b25b      	sxtb	r3, r3
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8001d40:	793b      	ldrb	r3, [r7, #4]
 8001d42:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8001d50:	793b      	ldrb	r3, [r7, #4]
 8001d52:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8001d5a:	b25b      	sxtb	r3, r3
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8001d60:	793b      	ldrb	r3, [r7, #4]
 8001d62:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8001d6a:	b25b      	sxtb	r3, r3
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8001d70:	793b      	ldrb	r3, [r7, #4]
 8001d72:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001d80:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8001d82:	f107 030f 	add.w	r3, r7, #15
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2089      	movs	r0, #137	; 0x89
 8001d8c:	f000 fcbe 	bl	800270c <SUBGRF_WriteCommand>
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <SUBGRF_CalibrateImage+0x80>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d904      	bls.n	8001db2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8001da8:	23e1      	movs	r3, #225	; 0xe1
 8001daa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8001dac:	23e9      	movs	r3, #233	; 0xe9
 8001dae:	737b      	strb	r3, [r7, #13]
 8001db0:	e027      	b.n	8001e02 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <SUBGRF_CalibrateImage+0x84>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d904      	bls.n	8001dc4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8001dba:	23d7      	movs	r3, #215	; 0xd7
 8001dbc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8001dbe:	23db      	movs	r3, #219	; 0xdb
 8001dc0:	737b      	strb	r3, [r7, #13]
 8001dc2:	e01e      	b.n	8001e02 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <SUBGRF_CalibrateImage+0x88>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d904      	bls.n	8001dd6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8001dcc:	23c1      	movs	r3, #193	; 0xc1
 8001dce:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8001dd0:	23c5      	movs	r3, #197	; 0xc5
 8001dd2:	737b      	strb	r3, [r7, #13]
 8001dd4:	e015      	b.n	8001e02 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <SUBGRF_CalibrateImage+0x8c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d904      	bls.n	8001de8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8001dde:	2375      	movs	r3, #117	; 0x75
 8001de0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8001de2:	2381      	movs	r3, #129	; 0x81
 8001de4:	737b      	strb	r3, [r7, #13]
 8001de6:	e00c      	b.n	8001e02 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <SUBGRF_CalibrateImage+0x90>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d904      	bls.n	8001dfa <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8001df0:	236b      	movs	r3, #107	; 0x6b
 8001df2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8001df4:	236f      	movs	r3, #111	; 0x6f
 8001df6:	737b      	strb	r3, [r7, #13]
 8001df8:	e003      	b.n	8001e02 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8001dfa:	2329      	movs	r3, #41	; 0x29
 8001dfc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8001dfe:	232b      	movs	r3, #43	; 0x2b
 8001e00:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	2202      	movs	r2, #2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	2098      	movs	r0, #152	; 0x98
 8001e0c:	f000 fc7e 	bl	800270c <SUBGRF_WriteCommand>
}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	35a4e900 	.word	0x35a4e900
 8001e1c:	32a9f880 	.word	0x32a9f880
 8001e20:	2de54480 	.word	0x2de54480
 8001e24:	1b6b0b00 	.word	0x1b6b0b00
 8001e28:	1954fc40 	.word	0x1954fc40

08001e2c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4604      	mov	r4, r0
 8001e34:	4608      	mov	r0, r1
 8001e36:	4611      	mov	r1, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4623      	mov	r3, r4
 8001e3c:	71fb      	strb	r3, [r7, #7]
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71bb      	strb	r3, [r7, #6]
 8001e42:	460b      	mov	r3, r1
 8001e44:	717b      	strb	r3, [r7, #5]
 8001e46:	4613      	mov	r3, r2
 8001e48:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8001e4e:	79bb      	ldrb	r3, [r7, #6]
 8001e50:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8001e52:	797b      	ldrb	r3, [r7, #5]
 8001e54:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8001e56:	793b      	ldrb	r3, [r7, #4]
 8001e58:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	2204      	movs	r2, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	2095      	movs	r0, #149	; 0x95
 8001e64:	f000 fc52 	bl	800270c <SUBGRF_WriteCommand>
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}

08001e70 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4604      	mov	r4, r0
 8001e78:	4608      	mov	r0, r1
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4623      	mov	r3, r4
 8001e80:	80fb      	strh	r3, [r7, #6]
 8001e82:	4603      	mov	r3, r0
 8001e84:	80bb      	strh	r3, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	807b      	strh	r3, [r7, #2]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8001e9e:	88bb      	ldrh	r3, [r7, #4]
 8001ea0:	0a1b      	lsrs	r3, r3, #8
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001ea8:	88bb      	ldrh	r3, [r7, #4]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8001eae:	887b      	ldrh	r3, [r7, #2]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001eb8:	887b      	ldrh	r3, [r7, #2]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8001ebe:	883b      	ldrh	r3, [r7, #0]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001ec8:	883b      	ldrh	r3, [r7, #0]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8001ece:	f107 0308 	add.w	r3, r7, #8
 8001ed2:	2208      	movs	r2, #8
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	2008      	movs	r0, #8
 8001ed8:	f000 fc18 	bl	800270c <SUBGRF_WriteCommand>
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd90      	pop	{r4, r7, pc}

08001ee4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	0c1b      	lsrs	r3, r3, #16
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	2204      	movs	r2, #4
 8001f16:	4619      	mov	r1, r3
 8001f18:	2097      	movs	r0, #151	; 0x97
 8001f1a:	f000 fbf7 	bl	800270c <SUBGRF_WriteCommand>
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8001f28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <SUBGRF_SetRfFrequency+0x84>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	f083 0301 	eor.w	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff27 	bl	8001d98 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <SUBGRF_SetRfFrequency+0x84>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	461c      	mov	r4, r3
 8001f56:	4615      	mov	r5, r2
 8001f58:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001f5c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001f60:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <SUBGRF_SetRfFrequency+0x88>)
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	4640      	mov	r0, r8
 8001f68:	4649      	mov	r1, r9
 8001f6a:	f7fe f961 	bl	8000230 <__aeabi_uldivmod>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4613      	mov	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	0e1b      	lsrs	r3, r3, #24
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	0c1b      	lsrs	r3, r3, #16
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8001f94:	f107 0308 	add.w	r3, r7, #8
 8001f98:	2204      	movs	r2, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	2086      	movs	r0, #134	; 0x86
 8001f9e:	f000 fbb5 	bl	800270c <SUBGRF_WriteCommand>
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fac:	20000ef4 	.word	0x20000ef4
 8001fb0:	01e84800 	.word	0x01e84800

08001fb4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8001fbe:	79fa      	ldrb	r2, [r7, #7]
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <SUBGRF_SetPacketType+0x34>)
 8001fc2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d104      	bne.n	8001fd4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8001fca:	2100      	movs	r1, #0
 8001fcc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8001fd0:	f000 faec 	bl	80025ac <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001fd4:	1dfb      	adds	r3, r7, #7
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4619      	mov	r1, r3
 8001fda:	208a      	movs	r0, #138	; 0x8a
 8001fdc:	f000 fb96 	bl	800270c <SUBGRF_WriteCommand>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000eed 	.word	0x20000eed

08001fec <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
    return PacketType;
 8001ff0:	4b02      	ldr	r3, [pc, #8]	; (8001ffc <SUBGRF_GetPacketType+0x10>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	20000eed 	.word	0x20000eed

08002000 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
 800200a:	460b      	mov	r3, r1
 800200c:	71bb      	strb	r3, [r7, #6]
 800200e:	4613      	mov	r3, r2
 8002010:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d149      	bne.n	80020ac <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8002018:	2000      	movs	r0, #0
 800201a:	f7ff fcc9 	bl	80019b0 <RBI_GetRFOMaxPowerConfig>
 800201e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8002020:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	429a      	cmp	r2, r3
 8002028:	da01      	bge.n	800202e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b0e      	cmp	r3, #14
 8002032:	d10e      	bne.n	8002052 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8002034:	2301      	movs	r3, #1
 8002036:	2201      	movs	r2, #1
 8002038:	2100      	movs	r1, #0
 800203a:	2004      	movs	r0, #4
 800203c:	f7ff fef6 	bl	8001e2c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8002040:	79ba      	ldrb	r2, [r7, #6]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	330e      	adds	r3, #14
 800204c:	b2db      	uxtb	r3, r3
 800204e:	71bb      	strb	r3, [r7, #6]
 8002050:	e01f      	b.n	8002092 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b0a      	cmp	r3, #10
 8002056:	d10e      	bne.n	8002076 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8002058:	2301      	movs	r3, #1
 800205a:	2201      	movs	r2, #1
 800205c:	2100      	movs	r1, #0
 800205e:	2001      	movs	r0, #1
 8002060:	f7ff fee4 	bl	8001e2c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8002064:	79ba      	ldrb	r2, [r7, #6]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	330d      	adds	r3, #13
 8002070:	b2db      	uxtb	r3, r3
 8002072:	71bb      	strb	r3, [r7, #6]
 8002074:	e00d      	b.n	8002092 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8002076:	2301      	movs	r3, #1
 8002078:	2201      	movs	r2, #1
 800207a:	2100      	movs	r1, #0
 800207c:	2007      	movs	r0, #7
 800207e:	f7ff fed5 	bl	8001e2c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8002082:	79ba      	ldrb	r2, [r7, #6]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	330e      	adds	r3, #14
 800208e:	b2db      	uxtb	r3, r3
 8002090:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8002092:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002096:	f113 0f11 	cmn.w	r3, #17
 800209a:	da01      	bge.n	80020a0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800209c:	23ef      	movs	r3, #239	; 0xef
 800209e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80020a0:	2118      	movs	r1, #24
 80020a2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80020a6:	f000 fa81 	bl	80025ac <SUBGRF_WriteRegister>
 80020aa:	e067      	b.n	800217c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80020ac:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80020b0:	f000 fa90 	bl	80025d4 <SUBGRF_ReadRegister>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f043 031e 	orr.w	r3, r3, #30
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	4619      	mov	r1, r3
 80020be:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80020c2:	f000 fa73 	bl	80025ac <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80020c6:	2001      	movs	r0, #1
 80020c8:	f7ff fc72 	bl	80019b0 <RBI_GetRFOMaxPowerConfig>
 80020cc:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80020ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	da01      	bge.n	80020dc <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b14      	cmp	r3, #20
 80020e0:	d10e      	bne.n	8002100 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80020e2:	2301      	movs	r3, #1
 80020e4:	2200      	movs	r2, #0
 80020e6:	2105      	movs	r1, #5
 80020e8:	2003      	movs	r0, #3
 80020ea:	f7ff fe9f 	bl	8001e2c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80020ee:	79ba      	ldrb	r2, [r7, #6]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	3316      	adds	r3, #22
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	71bb      	strb	r3, [r7, #6]
 80020fe:	e031      	b.n	8002164 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b11      	cmp	r3, #17
 8002104:	d10e      	bne.n	8002124 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8002106:	2301      	movs	r3, #1
 8002108:	2200      	movs	r2, #0
 800210a:	2103      	movs	r1, #3
 800210c:	2002      	movs	r0, #2
 800210e:	f7ff fe8d 	bl	8001e2c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8002112:	79ba      	ldrb	r2, [r7, #6]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	3316      	adds	r3, #22
 800211e:	b2db      	uxtb	r3, r3
 8002120:	71bb      	strb	r3, [r7, #6]
 8002122:	e01f      	b.n	8002164 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b0e      	cmp	r3, #14
 8002128:	d10e      	bne.n	8002148 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800212a:	2301      	movs	r3, #1
 800212c:	2200      	movs	r2, #0
 800212e:	2102      	movs	r1, #2
 8002130:	2002      	movs	r0, #2
 8002132:	f7ff fe7b 	bl	8001e2c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8002136:	79ba      	ldrb	r2, [r7, #6]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	330e      	adds	r3, #14
 8002142:	b2db      	uxtb	r3, r3
 8002144:	71bb      	strb	r3, [r7, #6]
 8002146:	e00d      	b.n	8002164 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8002148:	2301      	movs	r3, #1
 800214a:	2200      	movs	r2, #0
 800214c:	2107      	movs	r1, #7
 800214e:	2004      	movs	r0, #4
 8002150:	f7ff fe6c 	bl	8001e2c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8002154:	79ba      	ldrb	r2, [r7, #6]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	3316      	adds	r3, #22
 8002160:	b2db      	uxtb	r3, r3
 8002162:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8002164:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002168:	f113 0f09 	cmn.w	r3, #9
 800216c:	da01      	bge.n	8002172 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800216e:	23f7      	movs	r3, #247	; 0xf7
 8002170:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8002172:	2138      	movs	r1, #56	; 0x38
 8002174:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8002178:	f000 fa18 	bl	80025ac <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800217c:	79bb      	ldrb	r3, [r7, #6]
 800217e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8002180:	797b      	ldrb	r3, [r7, #5]
 8002182:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8002184:	f107 0308 	add.w	r3, r7, #8
 8002188:	2202      	movs	r2, #2
 800218a:	4619      	mov	r1, r3
 800218c:	208e      	movs	r0, #142	; 0x8e
 800218e:	f000 fabd 	bl	800270c <SUBGRF_WriteCommand>
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800219c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80021aa:	4a61      	ldr	r2, [pc, #388]	; (8002330 <SUBGRF_SetModulationParams+0x194>)
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021b4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	781a      	ldrb	r2, [r3, #0]
 80021bc:	4b5d      	ldr	r3, [pc, #372]	; (8002334 <SUBGRF_SetModulationParams+0x198>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d004      	beq.n	80021ce <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fef3 	bl	8001fb4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	f200 80a5 	bhi.w	8002322 <SUBGRF_SetModulationParams+0x186>
 80021d8:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <SUBGRF_SetModulationParams+0x44>)
 80021da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021de:	bf00      	nop
 80021e0:	080021f1 	.word	0x080021f1
 80021e4:	080022b1 	.word	0x080022b1
 80021e8:	08002273 	.word	0x08002273
 80021ec:	080022df 	.word	0x080022df
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80021f0:	2308      	movs	r3, #8
 80021f2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a4f      	ldr	r2, [pc, #316]	; (8002338 <SUBGRF_SetModulationParams+0x19c>)
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	0c1b      	lsrs	r3, r3, #16
 8002204:	b2db      	uxtb	r3, r3
 8002206:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	b2db      	uxtb	r3, r3
 800220e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7b1b      	ldrb	r3, [r3, #12]
 800221a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7b5b      	ldrb	r3, [r3, #13]
 8002220:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2200      	movs	r2, #0
 8002228:	461c      	mov	r4, r3
 800222a:	4615      	mov	r5, r2
 800222c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8002230:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8002234:	4a41      	ldr	r2, [pc, #260]	; (800233c <SUBGRF_SetModulationParams+0x1a0>)
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	4640      	mov	r0, r8
 800223c:	4649      	mov	r1, r9
 800223e:	f7fd fff7 	bl	8000230 <__aeabi_uldivmod>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4613      	mov	r3, r2
 8002248:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	b2db      	uxtb	r3, r3
 8002250:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	b2db      	uxtb	r3, r3
 8002258:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	b29a      	uxth	r2, r3
 8002264:	f107 0308 	add.w	r3, r7, #8
 8002268:	4619      	mov	r1, r3
 800226a:	208b      	movs	r0, #139	; 0x8b
 800226c:	f000 fa4e 	bl	800270c <SUBGRF_WriteCommand>
        break;
 8002270:	e058      	b.n	8002324 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8002272:	2304      	movs	r3, #4
 8002274:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	4a2f      	ldr	r2, [pc, #188]	; (8002338 <SUBGRF_SetModulationParams+0x19c>)
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	b2db      	uxtb	r3, r3
 8002288:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	b2db      	uxtb	r3, r3
 8002290:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7d1b      	ldrb	r3, [r3, #20]
 800229c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	4619      	mov	r1, r3
 80022a8:	208b      	movs	r0, #139	; 0x8b
 80022aa:	f000 fa2f 	bl	800270c <SUBGRF_WriteCommand>
        break;
 80022ae:	e039      	b.n	8002324 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 80022b0:	2304      	movs	r3, #4
 80022b2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	7e1b      	ldrb	r3, [r3, #24]
 80022b8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7e5b      	ldrb	r3, [r3, #25]
 80022be:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7e9b      	ldrb	r3, [r3, #26]
 80022c4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7edb      	ldrb	r3, [r3, #27]
 80022ca:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	f107 0308 	add.w	r3, r7, #8
 80022d4:	4619      	mov	r1, r3
 80022d6:	208b      	movs	r0, #139	; 0x8b
 80022d8:	f000 fa18 	bl	800270c <SUBGRF_WriteCommand>

        break;
 80022dc:	e022      	b.n	8002324 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 80022de:	2305      	movs	r3, #5
 80022e0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4a14      	ldr	r2, [pc, #80]	; (8002338 <SUBGRF_SetModulationParams+0x19c>)
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7b1b      	ldrb	r3, [r3, #12]
 8002308:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7b5b      	ldrb	r3, [r3, #13]
 800230e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	b29a      	uxth	r2, r3
 8002314:	f107 0308 	add.w	r3, r7, #8
 8002318:	4619      	mov	r1, r3
 800231a:	208b      	movs	r0, #139	; 0x8b
 800231c:	f000 f9f6 	bl	800270c <SUBGRF_WriteCommand>
        break;
 8002320:	e000      	b.n	8002324 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8002322:	bf00      	nop
    }
}
 8002324:	bf00      	nop
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800232e:	bf00      	nop
 8002330:	08009534 	.word	0x08009534
 8002334:	20000eed 	.word	0x20000eed
 8002338:	3d090000 	.word	0x3d090000
 800233c:	01e84800 	.word	0x01e84800

08002340 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800234c:	4a49      	ldr	r2, [pc, #292]	; (8002474 <SUBGRF_SetPacketParams+0x134>)
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	ca07      	ldmia	r2, {r0, r1, r2}
 8002354:	c303      	stmia	r3!, {r0, r1}
 8002356:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	4b46      	ldr	r3, [pc, #280]	; (8002478 <SUBGRF_SetPacketParams+0x138>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d004      	beq.n	800236e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fe23 	bl	8001fb4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d879      	bhi.n	800246a <SUBGRF_SetPacketParams+0x12a>
 8002376:	a201      	add	r2, pc, #4	; (adr r2, 800237c <SUBGRF_SetPacketParams+0x3c>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	0800238d 	.word	0x0800238d
 8002380:	0800241d 	.word	0x0800241d
 8002384:	08002411 	.word	0x08002411
 8002388:	0800238d 	.word	0x0800238d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7adb      	ldrb	r3, [r3, #11]
 8002390:	2bf1      	cmp	r3, #241	; 0xf1
 8002392:	d10a      	bne.n	80023aa <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8002394:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002398:	f7ff fbaf 	bl	8001afa <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800239c:	f248 0005 	movw	r0, #32773	; 0x8005
 80023a0:	f7ff fbcb 	bl	8001b3a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80023a4:	2302      	movs	r3, #2
 80023a6:	75bb      	strb	r3, [r7, #22]
 80023a8:	e011      	b.n	80023ce <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	7adb      	ldrb	r3, [r3, #11]
 80023ae:	2bf2      	cmp	r3, #242	; 0xf2
 80023b0:	d10a      	bne.n	80023c8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80023b2:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80023b6:	f7ff fba0 	bl	8001afa <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80023ba:	f241 0021 	movw	r0, #4129	; 0x1021
 80023be:	f7ff fbbc 	bl	8001b3a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80023c2:	2306      	movs	r3, #6
 80023c4:	75bb      	strb	r3, [r7, #22]
 80023c6:	e002      	b.n	80023ce <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7adb      	ldrb	r3, [r3, #11]
 80023cc:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80023ce:	2309      	movs	r3, #9
 80023d0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	889b      	ldrh	r3, [r3, #4]
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	b29b      	uxth	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	889b      	ldrh	r3, [r3, #4]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	799b      	ldrb	r3, [r3, #6]
 80023ea:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	79db      	ldrb	r3, [r3, #7]
 80023f0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7a1b      	ldrb	r3, [r3, #8]
 80023f6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7a5b      	ldrb	r3, [r3, #9]
 80023fc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	7a9b      	ldrb	r3, [r3, #10]
 8002402:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8002404:	7dbb      	ldrb	r3, [r7, #22]
 8002406:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7b1b      	ldrb	r3, [r3, #12]
 800240c:	753b      	strb	r3, [r7, #20]
        break;
 800240e:	e023      	b.n	8002458 <SUBGRF_SetPacketParams+0x118>
    case PACKET_TYPE_BPSK:
        n = 1;
 8002410:	2301      	movs	r3, #1
 8002412:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7b9b      	ldrb	r3, [r3, #14]
 8002418:	733b      	strb	r3, [r7, #12]
        break;
 800241a:	e01d      	b.n	8002458 <SUBGRF_SetPacketParams+0x118>
    case PACKET_TYPE_LORA:
        n = 6;
 800241c:	2306      	movs	r3, #6
 800241e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	8a1b      	ldrh	r3, [r3, #16]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	b29b      	uxth	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	8a1b      	ldrh	r3, [r3, #16]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	7c9a      	ldrb	r2, [r3, #18]
 8002438:	4b10      	ldr	r3, [pc, #64]	; (800247c <SUBGRF_SetPacketParams+0x13c>)
 800243a:	4611      	mov	r1, r2
 800243c:	7019      	strb	r1, [r3, #0]
 800243e:	4613      	mov	r3, r2
 8002440:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	7e1b      	ldrb	r3, [r3, #24]
 800244e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7e5b      	ldrb	r3, [r3, #25]
 8002454:	747b      	strb	r3, [r7, #17]
        break;
 8002456:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8002458:	7dfb      	ldrb	r3, [r7, #23]
 800245a:	b29a      	uxth	r2, r3
 800245c:	f107 030c 	add.w	r3, r7, #12
 8002460:	4619      	mov	r1, r3
 8002462:	208c      	movs	r0, #140	; 0x8c
 8002464:	f000 f952 	bl	800270c <SUBGRF_WriteCommand>
 8002468:	e000      	b.n	800246c <SUBGRF_SetPacketParams+0x12c>
        return;
 800246a:	bf00      	nop
}
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	0800953c 	.word	0x0800953c
 8002478:	20000eed 	.word	0x20000eed
 800247c:	20000eee 	.word	0x20000eee

08002480 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	460a      	mov	r2, r1
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	4613      	mov	r3, r2
 800248e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8002494:	79bb      	ldrb	r3, [r7, #6]
 8002496:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	2202      	movs	r2, #2
 800249e:	4619      	mov	r1, r3
 80024a0:	208f      	movs	r0, #143	; 0x8f
 80024a2:	f000 f933 	bl	800270c <SUBGRF_WriteCommand>
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	2202      	movs	r2, #2
 80024c0:	4619      	mov	r1, r3
 80024c2:	2013      	movs	r0, #19
 80024c4:	f000 f944 	bl	8002750 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80024c8:	f7ff fd90 	bl	8001fec <SUBGRF_GetPacketType>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d10d      	bne.n	80024ee <SUBGRF_GetRxBufferStatus+0x3e>
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <SUBGRF_GetRxBufferStatus+0x54>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d108      	bne.n	80024ee <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80024dc:	f240 7002 	movw	r0, #1794	; 0x702
 80024e0:	f000 f878 	bl	80025d4 <SUBGRF_ReadRegister>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e002      	b.n	80024f4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80024ee:	7b3a      	ldrb	r2, [r7, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80024f4:	7b7a      	ldrb	r2, [r7, #13]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	701a      	strb	r2, [r3, #0]
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000eee 	.word	0x20000eee

08002508 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8002510:	f107 030c 	add.w	r3, r7, #12
 8002514:	2203      	movs	r2, #3
 8002516:	4619      	mov	r1, r3
 8002518:	2014      	movs	r0, #20
 800251a:	f000 f919 	bl	8002750 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800251e:	f7ff fd65 	bl	8001fec <SUBGRF_GetPacketType>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <SUBGRF_GetPacketStatus+0x30>
 8002532:	2b01      	cmp	r3, #1
 8002534:	d013      	beq.n	800255e <SUBGRF_GetPacketStatus+0x56>
 8002536:	e02a      	b.n	800258e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8002538:	7b3a      	ldrb	r2, [r7, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800253e:	7b7b      	ldrb	r3, [r7, #13]
 8002540:	425b      	negs	r3, r3
 8002542:	105b      	asrs	r3, r3, #1
 8002544:	b25a      	sxtb	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800254a:	7bbb      	ldrb	r3, [r7, #14]
 800254c:	425b      	negs	r3, r3
 800254e:	105b      	asrs	r3, r3, #1
 8002550:	b25a      	sxtb	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
            break;
 800255c:	e020      	b.n	80025a0 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800255e:	7b3b      	ldrb	r3, [r7, #12]
 8002560:	425b      	negs	r3, r3
 8002562:	105b      	asrs	r3, r3, #1
 8002564:	b25a      	sxtb	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800256a:	7b7b      	ldrb	r3, [r7, #13]
 800256c:	b25b      	sxtb	r3, r3
 800256e:	3302      	adds	r3, #2
 8002570:	109b      	asrs	r3, r3, #2
 8002572:	b25a      	sxtb	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8002578:	7bbb      	ldrb	r3, [r7, #14]
 800257a:	425b      	negs	r3, r3
 800257c:	105b      	asrs	r3, r3, #1
 800257e:	b25a      	sxtb	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <SUBGRF_GetPacketStatus+0xa0>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	611a      	str	r2, [r3, #16]
            break;
 800258c:	e008      	b.n	80025a0 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800258e:	2214      	movs	r2, #20
 8002590:	2100      	movs	r1, #0
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f006 f9c4 	bl	8008920 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	220f      	movs	r2, #15
 800259c:	701a      	strb	r2, [r3, #0]
            break;
 800259e:	bf00      	nop
    }
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000ef0 	.word	0x20000ef0

080025ac <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	460a      	mov	r2, r1
 80025b6:	80fb      	strh	r3, [r7, #6]
 80025b8:	4613      	mov	r3, r2
 80025ba:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80025bc:	1d7a      	adds	r2, r7, #5
 80025be:	88f9      	ldrh	r1, [r7, #6]
 80025c0:	2301      	movs	r3, #1
 80025c2:	4803      	ldr	r0, [pc, #12]	; (80025d0 <SUBGRF_WriteRegister+0x24>)
 80025c4:	f002 fd1a 	bl	8004ffc <HAL_SUBGHZ_WriteRegisters>
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	200008e8 	.word	0x200008e8

080025d4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80025de:	f107 020f 	add.w	r2, r7, #15
 80025e2:	88f9      	ldrh	r1, [r7, #6]
 80025e4:	2301      	movs	r3, #1
 80025e6:	4804      	ldr	r0, [pc, #16]	; (80025f8 <SUBGRF_ReadRegister+0x24>)
 80025e8:	f002 fd67 	bl	80050ba <HAL_SUBGHZ_ReadRegisters>
    return data;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	200008e8 	.word	0x200008e8

080025fc <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	80fb      	strh	r3, [r7, #6]
 8002608:	4613      	mov	r3, r2
 800260a:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800260c:	f3ef 8310 	mrs	r3, PRIMASK
 8002610:	60fb      	str	r3, [r7, #12]
  return(result);
 8002612:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002614:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002616:	b672      	cpsid	i
}
 8002618:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800261a:	88bb      	ldrh	r3, [r7, #4]
 800261c:	88f9      	ldrh	r1, [r7, #6]
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	4806      	ldr	r0, [pc, #24]	; (800263c <SUBGRF_WriteRegisters+0x40>)
 8002622:	f002 fceb 	bl	8004ffc <HAL_SUBGHZ_WriteRegisters>
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f383 8810 	msr	PRIMASK, r3
}
 8002630:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200008e8 	.word	0x200008e8

08002640 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	80fb      	strh	r3, [r7, #6]
 800264c:	4613      	mov	r3, r2
 800264e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002650:	f3ef 8310 	mrs	r3, PRIMASK
 8002654:	60fb      	str	r3, [r7, #12]
  return(result);
 8002656:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002658:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800265a:	b672      	cpsid	i
}
 800265c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800265e:	88bb      	ldrh	r3, [r7, #4]
 8002660:	88f9      	ldrh	r1, [r7, #6]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	4806      	ldr	r0, [pc, #24]	; (8002680 <SUBGRF_ReadRegisters+0x40>)
 8002666:	f002 fd28 	bl	80050ba <HAL_SUBGHZ_ReadRegisters>
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f383 8810 	msr	PRIMASK, r3
}
 8002674:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200008e8 	.word	0x200008e8

08002684 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	71fb      	strb	r3, [r7, #7]
 8002690:	4613      	mov	r3, r2
 8002692:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002694:	f3ef 8310 	mrs	r3, PRIMASK
 8002698:	60fb      	str	r3, [r7, #12]
  return(result);
 800269a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800269c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800269e:	b672      	cpsid	i
}
 80026a0:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80026a2:	79bb      	ldrb	r3, [r7, #6]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	79f9      	ldrb	r1, [r7, #7]
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	4806      	ldr	r0, [pc, #24]	; (80026c4 <SUBGRF_WriteBuffer+0x40>)
 80026ac:	f002 fe19 	bl	80052e2 <HAL_SUBGHZ_WriteBuffer>
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f383 8810 	msr	PRIMASK, r3
}
 80026ba:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80026bc:	bf00      	nop
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	200008e8 	.word	0x200008e8

080026c8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	71fb      	strb	r3, [r7, #7]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d8:	f3ef 8310 	mrs	r3, PRIMASK
 80026dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80026de:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80026e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80026e2:	b672      	cpsid	i
}
 80026e4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80026e6:	79bb      	ldrb	r3, [r7, #6]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	79f9      	ldrb	r1, [r7, #7]
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	4806      	ldr	r0, [pc, #24]	; (8002708 <SUBGRF_ReadBuffer+0x40>)
 80026f0:	f002 fe4a 	bl	8005388 <HAL_SUBGHZ_ReadBuffer>
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f383 8810 	msr	PRIMASK, r3
}
 80026fe:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002700:	bf00      	nop
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200008e8 	.word	0x200008e8

0800270c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	71fb      	strb	r3, [r7, #7]
 8002718:	4613      	mov	r3, r2
 800271a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271c:	f3ef 8310 	mrs	r3, PRIMASK
 8002720:	60fb      	str	r3, [r7, #12]
  return(result);
 8002722:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002724:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002726:	b672      	cpsid	i
}
 8002728:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800272a:	88bb      	ldrh	r3, [r7, #4]
 800272c:	79f9      	ldrb	r1, [r7, #7]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	4806      	ldr	r0, [pc, #24]	; (800274c <SUBGRF_WriteCommand+0x40>)
 8002732:	f002 fd23 	bl	800517c <HAL_SUBGHZ_ExecSetCmd>
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f383 8810 	msr	PRIMASK, r3
}
 8002740:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002742:	bf00      	nop
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200008e8 	.word	0x200008e8

08002750 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
 800275c:	4613      	mov	r3, r2
 800275e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002760:	f3ef 8310 	mrs	r3, PRIMASK
 8002764:	60fb      	str	r3, [r7, #12]
  return(result);
 8002766:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002768:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800276a:	b672      	cpsid	i
}
 800276c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800276e:	88bb      	ldrh	r3, [r7, #4]
 8002770:	79f9      	ldrb	r1, [r7, #7]
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	4806      	ldr	r0, [pc, #24]	; (8002790 <SUBGRF_ReadCommand+0x40>)
 8002776:	f002 fd60 	bl	800523a <HAL_SUBGHZ_ExecGetCmd>
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f383 8810 	msr	PRIMASK, r3
}
 8002784:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200008e8 	.word	0x200008e8

08002794 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	460a      	mov	r2, r1
 800279e:	71fb      	strb	r3, [r7, #7]
 80027a0:	4613      	mov	r3, r2
 80027a2:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80027a8:	79bb      	ldrb	r3, [r7, #6]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d10d      	bne.n	80027ca <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d104      	bne.n	80027be <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80027b8:	2004      	movs	r0, #4
 80027ba:	f000 f8e7 	bl	800298c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d107      	bne.n	80027d4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80027c4:	2303      	movs	r3, #3
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	e004      	b.n	80027d4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80027ca:	79bb      	ldrb	r3, [r7, #6]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff f8c7 	bl	800196a <RBI_ConfigRFSwitch>
}
 80027dc:	bf00      	nop
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80027f2:	f7ff f8c8 	bl	8001986 <RBI_GetTxConfig>
 80027f6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d016      	beq.n	800282c <SUBGRF_SetRfTxPower+0x48>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b02      	cmp	r3, #2
 8002802:	dc16      	bgt.n	8002832 <SUBGRF_SetRfTxPower+0x4e>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <SUBGRF_SetRfTxPower+0x2e>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d00a      	beq.n	8002826 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8002810:	e00f      	b.n	8002832 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	dd02      	ble.n	8002820 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800281a:	2302      	movs	r3, #2
 800281c:	73fb      	strb	r3, [r7, #15]
            break;
 800281e:	e009      	b.n	8002834 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
            break;
 8002824:	e006      	b.n	8002834 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
            break;
 800282a:	e003      	b.n	8002834 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800282c:	2302      	movs	r3, #2
 800282e:	73fb      	strb	r3, [r7, #15]
            break;
 8002830:	e000      	b.n	8002834 <SUBGRF_SetRfTxPower+0x50>
            break;
 8002832:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8002834:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2202      	movs	r2, #2
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fbdf 	bl	8002000 <SUBGRF_SetTxParams>
    //SUBGRF_SetTxParams( RFO_HP, power, RADIO_RAMP_40_US );
    return paSelect;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2001      	movs	r0, #1
 800285a:	4798      	blx	r3
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000ef8 	.word	0x20000ef8

08002868 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2002      	movs	r0, #2
 8002876:	4798      	blx	r3
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20000ef8 	.word	0x20000ef8

08002884 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2040      	movs	r0, #64	; 0x40
 8002892:	4798      	blx	r3
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000ef8 	.word	0x20000ef8

080028a0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d005      	beq.n	80028c2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80028b6:	e00a      	b.n	80028ce <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80028b8:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2080      	movs	r0, #128	; 0x80
 80028be:	4798      	blx	r3
            break;
 80028c0:	e005      	b.n	80028ce <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80028ca:	4798      	blx	r3
            break;
 80028cc:	bf00      	nop
    }
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000ef8 	.word	0x20000ef8

080028dc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80028ec:	4798      	blx	r3
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000ef8 	.word	0x20000ef8

080028fc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2020      	movs	r0, #32
 800290a:	4798      	blx	r3
}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000ef8 	.word	0x20000ef8

08002918 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2004      	movs	r0, #4
 8002926:	4798      	blx	r3
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000ef8 	.word	0x20000ef8

08002934 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800293c:	4b03      	ldr	r3, [pc, #12]	; (800294c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2008      	movs	r0, #8
 8002942:	4798      	blx	r3
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000ef8 	.word	0x20000ef8

08002950 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2010      	movs	r0, #16
 800295e:	4798      	blx	r3
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000ef8 	.word	0x20000ef8

0800296c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8002974:	4b04      	ldr	r3, [pc, #16]	; (8002988 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800297c:	4798      	blx	r3
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000ef8 	.word	0x20000ef8

0800298c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8002996:	f7ff f804 	bl	80019a2 <RBI_IsDCDC>
 800299a:	4603      	mov	r3, r0
 800299c:	2b01      	cmp	r3, #1
 800299e:	d112      	bne.n	80029c6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80029a0:	f640 1023 	movw	r0, #2339	; 0x923
 80029a4:	f7ff fe16 	bl	80025d4 <SUBGRF_ReadRegister>
 80029a8:	4603      	mov	r3, r0
 80029aa:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	f023 0306 	bic.w	r3, r3, #6
 80029b2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	4619      	mov	r1, r3
 80029be:	f640 1023 	movw	r0, #2339	; 0x923
 80029c2:	f7ff fdf3 	bl	80025ac <SUBGRF_WriteRegister>
  }
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029da:	2003      	movs	r0, #3
 80029dc:	f000 f902 	bl	8002be4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029e0:	f001 fece 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4a09      	ldr	r2, [pc, #36]	; (8002a0c <HAL_Init+0x3c>)
 80029e8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029ea:	200f      	movs	r0, #15
 80029ec:	f7fe f80c 	bl	8000a08 <HAL_InitTick>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	e001      	b.n	8002a00 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029fc:	f7fd ffe1 	bl	80009c2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a00:	79fb      	ldrb	r3, [r7, #7]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000004 	.word	0x20000004

08002a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_IncTick+0x1c>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_IncTick+0x20>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a03      	ldr	r2, [pc, #12]	; (8002a30 <HAL_IncTick+0x20>)
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	20000118 	.word	0x20000118
 8002a30:	20000efc 	.word	0x20000efc

08002a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return uwTick;
 8002a38:	4b02      	ldr	r3, [pc, #8]	; (8002a44 <HAL_GetTick+0x10>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	20000efc 	.word	0x20000efc

08002a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff fff0 	bl	8002a34 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d005      	beq.n	8002a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_Delay+0x44>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a6e:	bf00      	nop
 8002a70:	f7ff ffe0 	bl	8002a34 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d8f7      	bhi.n	8002a70 <HAL_Delay+0x28>
  {
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000118 	.word	0x20000118

08002a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aac:	4013      	ands	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac2:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	60d3      	str	r3, [r2, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	f003 0307 	and.w	r3, r3, #7
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	db0b      	blt.n	8002b1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	4906      	ldr	r1, [pc, #24]	; (8002b28 <__NVIC_EnableIRQ+0x34>)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2001      	movs	r0, #1
 8002b16:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	e000e100 	.word	0xe000e100

08002b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	db0a      	blt.n	8002b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	490c      	ldr	r1, [pc, #48]	; (8002b78 <__NVIC_SetPriority+0x4c>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b54:	e00a      	b.n	8002b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4908      	ldr	r1, [pc, #32]	; (8002b7c <__NVIC_SetPriority+0x50>)
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	3b04      	subs	r3, #4
 8002b64:	0112      	lsls	r2, r2, #4
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	440b      	add	r3, r1
 8002b6a:	761a      	strb	r2, [r3, #24]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000e100 	.word	0xe000e100
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f1c3 0307 	rsb	r3, r3, #7
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	bf28      	it	cs
 8002b9e:	2304      	movcs	r3, #4
 8002ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d902      	bls.n	8002bb0 <NVIC_EncodePriority+0x30>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3b03      	subs	r3, #3
 8002bae:	e000      	b.n	8002bb2 <NVIC_EncodePriority+0x32>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	43d9      	mvns	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	4313      	orrs	r3, r2
         );
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ff4f 	bl	8002a90 <__NVIC_SetPriorityGrouping>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c08:	f7ff ff66 	bl	8002ad8 <__NVIC_GetPriorityGrouping>
 8002c0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f7ff ffb4 	bl	8002b80 <NVIC_EncodePriority>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff83 	bl	8002b2c <__NVIC_SetPriority>
}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff59 	bl	8002af4 <__NVIC_EnableIRQ>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e02d      	b.n	8002cb8 <HAL_CRYP_Init+0x6e>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d106      	bne.n	8002c76 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7fd fca3 	bl	80005bc <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 8002c80:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6851      	ldr	r1, [r2, #4]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6892      	ldr	r2, [r2, #8]
 8002c8c:	4311      	orrs	r1, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6952      	ldr	r2, [r2, #20]
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6013      	str	r3, [r2, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e08e      	b.n	8002df0 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4b47      	ldr	r3, [pc, #284]	; (8002df8 <HAL_DMA_Init+0x138>)
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d80f      	bhi.n	8002cfe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b45      	ldr	r3, [pc, #276]	; (8002dfc <HAL_DMA_Init+0x13c>)
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4a45      	ldr	r2, [pc, #276]	; (8002e00 <HAL_DMA_Init+0x140>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	009a      	lsls	r2, r3, #2
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a42      	ldr	r2, [pc, #264]	; (8002e04 <HAL_DMA_Init+0x144>)
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
 8002cfc:	e00e      	b.n	8002d1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	4b40      	ldr	r3, [pc, #256]	; (8002e08 <HAL_DMA_Init+0x148>)
 8002d06:	4413      	add	r3, r2
 8002d08:	4a3d      	ldr	r2, [pc, #244]	; (8002e00 <HAL_DMA_Init+0x140>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	009a      	lsls	r2, r3, #2
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a3c      	ldr	r2, [pc, #240]	; (8002e0c <HAL_DMA_Init+0x14c>)
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d36:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6819      	ldr	r1, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fabc 	bl	80032ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d7c:	d102      	bne.n	8002d84 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d90:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d9a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d010      	beq.n	8002dc6 <HAL_DMA_Init+0x106>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d80c      	bhi.n	8002dc6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fae5 	bl	800337c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	e008      	b.n	8002dd8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40020407 	.word	0x40020407
 8002dfc:	bffdfff8 	.word	0xbffdfff8
 8002e00:	cccccccd 	.word	0xcccccccd
 8002e04:	40020000 	.word	0x40020000
 8002e08:	bffdfbf8 	.word	0xbffdfbf8
 8002e0c:	40020400 	.word	0x40020400

08002e10 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_DMA_Start_IT+0x20>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e069      	b.n	8002f04 <HAL_DMA_Start_IT+0xf4>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d155      	bne.n	8002ef0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0201 	bic.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fa02 	bl	8003272 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 020e 	orr.w	r2, r2, #14
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	e00f      	b.n	8002ea8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0204 	bic.w	r2, r2, #4
 8002e96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 020a 	orr.w	r2, r2, #10
 8002ea6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002edc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e008      	b.n	8002f02 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e04f      	b.n	8002fbe <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d008      	beq.n	8002f3c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e040      	b.n	8002fbe <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 020e 	bic.w	r2, r2, #14
 8002f4a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	f003 021c 	and.w	r2, r3, #28
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	2101      	movs	r1, #1
 8002f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f88:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00c      	beq.n	8002fac <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fa0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002faa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d005      	beq.n	8002fec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
 8002fea:	e047      	b.n	800307c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 020e 	bic.w	r2, r2, #14
 8002ffa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800301a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003020:	f003 021c 	and.w	r2, r3, #28
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	2101      	movs	r1, #1
 800302a:	fa01 f202 	lsl.w	r2, r1, r2
 800302e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003038:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00c      	beq.n	800305c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003050:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800305a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
    }
  }
  return status;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	f003 031c 	and.w	r3, r3, #28
 80030a8:	2204      	movs	r2, #4
 80030aa:	409a      	lsls	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d027      	beq.n	8003104 <HAL_DMA_IRQHandler+0x7c>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d022      	beq.n	8003104 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d107      	bne.n	80030dc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0204 	bic.w	r2, r2, #4
 80030da:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e0:	f003 021c 	and.w	r2, r3, #28
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	2104      	movs	r1, #4
 80030ea:	fa01 f202 	lsl.w	r2, r1, r2
 80030ee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8081 	beq.w	80031fc <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003102:	e07b      	b.n	80031fc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	f003 031c 	and.w	r3, r3, #28
 800310c:	2202      	movs	r2, #2
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d03d      	beq.n	8003194 <HAL_DMA_IRQHandler+0x10c>
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d038      	beq.n	8003194 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10b      	bne.n	8003148 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 020a 	bic.w	r2, r2, #10
 800313e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	4b2e      	ldr	r3, [pc, #184]	; (8003208 <HAL_DMA_IRQHandler+0x180>)
 8003150:	429a      	cmp	r2, r3
 8003152:	d909      	bls.n	8003168 <HAL_DMA_IRQHandler+0xe0>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	f003 031c 	and.w	r3, r3, #28
 800315c:	4a2b      	ldr	r2, [pc, #172]	; (800320c <HAL_DMA_IRQHandler+0x184>)
 800315e:	2102      	movs	r1, #2
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	6053      	str	r3, [r2, #4]
 8003166:	e008      	b.n	800317a <HAL_DMA_IRQHandler+0xf2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	f003 031c 	and.w	r3, r3, #28
 8003170:	4a27      	ldr	r2, [pc, #156]	; (8003210 <HAL_DMA_IRQHandler+0x188>)
 8003172:	2102      	movs	r1, #2
 8003174:	fa01 f303 	lsl.w	r3, r1, r3
 8003178:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d038      	beq.n	80031fc <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003192:	e033      	b.n	80031fc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003198:	f003 031c 	and.w	r3, r3, #28
 800319c:	2208      	movs	r2, #8
 800319e:	409a      	lsls	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d02a      	beq.n	80031fe <HAL_DMA_IRQHandler+0x176>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d025      	beq.n	80031fe <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 020e 	bic.w	r2, r2, #14
 80031c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	f003 021c 	and.w	r2, r3, #28
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	2101      	movs	r1, #1
 80031d0:	fa01 f202 	lsl.w	r2, r1, r2
 80031d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d004      	beq.n	80031fe <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
}
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40020080 	.word	0x40020080
 800320c:	40020400 	.word	0x40020400
 8003210:	40020000 	.word	0x40020000

08003214 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d103      	bne.n	8003230 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	72fb      	strb	r3, [r7, #11]
    return status;
 800322c:	7afb      	ldrb	r3, [r7, #11]
 800322e:	e01b      	b.n	8003268 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00d      	beq.n	800325e <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d004      	beq.n	8003256 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	e003      	b.n	800325e <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800325c:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	601a      	str	r2, [r3, #0]

  return status;
 8003266:	7afb      	ldrb	r3, [r7, #11]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003272:	b480      	push	{r7}
 8003274:	b085      	sub	sp, #20
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003288:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328e:	2b00      	cmp	r3, #0
 8003290:	d004      	beq.n	800329c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800329a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	f003 021c 	and.w	r2, r3, #28
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f202 	lsl.w	r2, r1, r2
 80032ae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d108      	bne.n	80032d2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032d0:	e007      	b.n	80032e2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	60da      	str	r2, [r3, #12]
}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b1c      	ldr	r3, [pc, #112]	; (800336c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d813      	bhi.n	8003328 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800330c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	3b08      	subs	r3, #8
 800331c:	4a14      	ldr	r2, [pc, #80]	; (8003370 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	e011      	b.n	800334c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	009a      	lsls	r2, r3, #2
 8003330:	4b10      	ldr	r3, [pc, #64]	; (8003374 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003332:	4413      	add	r3, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	3b08      	subs	r3, #8
 8003340:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	3307      	adds	r3, #7
 800334a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003350:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2201      	movs	r2, #1
 800335a:	409a      	lsls	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40020407 	.word	0x40020407
 8003370:	cccccccd 	.word	0xcccccccd
 8003374:	4002081c 	.word	0x4002081c
 8003378:	40020880 	.word	0x40020880

0800337c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800338c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	461a      	mov	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a08      	ldr	r2, [pc, #32]	; (80033c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80033a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2201      	movs	r2, #1
 80033ac:	409a      	lsls	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	1000823f 	.word	0x1000823f
 80033c0:	40020940 	.word	0x40020940

080033c4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d2:	e140      	b.n	8003656 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	2101      	movs	r1, #1
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	4013      	ands	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8132 	beq.w	8003650 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d005      	beq.n	8003404 <HAL_GPIO_Init+0x40>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d130      	bne.n	8003466 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	2203      	movs	r2, #3
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800343a:	2201      	movs	r2, #1
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	f003 0201 	and.w	r2, r3, #1
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	2b03      	cmp	r3, #3
 8003470:	d017      	beq.n	80034a2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	2203      	movs	r2, #3
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d123      	bne.n	80034f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	08da      	lsrs	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3208      	adds	r2, #8
 80034b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	220f      	movs	r2, #15
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	08da      	lsrs	r2, r3, #3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3208      	adds	r2, #8
 80034f0:	6939      	ldr	r1, [r7, #16]
 80034f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	2203      	movs	r2, #3
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 0203 	and.w	r2, r3, #3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 808c 	beq.w	8003650 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003538:	4a4e      	ldr	r2, [pc, #312]	; (8003674 <HAL_GPIO_Init+0x2b0>)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	089b      	lsrs	r3, r3, #2
 800353e:	3302      	adds	r3, #2
 8003540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003544:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	2207      	movs	r2, #7
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003562:	d00d      	beq.n	8003580 <HAL_GPIO_Init+0x1bc>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a44      	ldr	r2, [pc, #272]	; (8003678 <HAL_GPIO_Init+0x2b4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d007      	beq.n	800357c <HAL_GPIO_Init+0x1b8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a43      	ldr	r2, [pc, #268]	; (800367c <HAL_GPIO_Init+0x2b8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d101      	bne.n	8003578 <HAL_GPIO_Init+0x1b4>
 8003574:	2302      	movs	r3, #2
 8003576:	e004      	b.n	8003582 <HAL_GPIO_Init+0x1be>
 8003578:	2307      	movs	r3, #7
 800357a:	e002      	b.n	8003582 <HAL_GPIO_Init+0x1be>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_GPIO_Init+0x1be>
 8003580:	2300      	movs	r3, #0
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	f002 0203 	and.w	r2, r2, #3
 8003588:	0092      	lsls	r2, r2, #2
 800358a:	4093      	lsls	r3, r2
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003592:	4938      	ldr	r1, [pc, #224]	; (8003674 <HAL_GPIO_Init+0x2b0>)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	089b      	lsrs	r3, r3, #2
 8003598:	3302      	adds	r3, #2
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035a0:	4b37      	ldr	r3, [pc, #220]	; (8003680 <HAL_GPIO_Init+0x2bc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4013      	ands	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035c4:	4a2e      	ldr	r2, [pc, #184]	; (8003680 <HAL_GPIO_Init+0x2bc>)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80035ca:	4b2d      	ldr	r3, [pc, #180]	; (8003680 <HAL_GPIO_Init+0x2bc>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	43db      	mvns	r3, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035ee:	4a24      	ldr	r2, [pc, #144]	; (8003680 <HAL_GPIO_Init+0x2bc>)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80035f4:	4b22      	ldr	r3, [pc, #136]	; (8003680 <HAL_GPIO_Init+0x2bc>)
 80035f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035fa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800361a:	4a19      	ldr	r2, [pc, #100]	; (8003680 <HAL_GPIO_Init+0x2bc>)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003622:	4b17      	ldr	r3, [pc, #92]	; (8003680 <HAL_GPIO_Init+0x2bc>)
 8003624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003628:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	43db      	mvns	r3, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003648:	4a0d      	ldr	r2, [pc, #52]	; (8003680 <HAL_GPIO_Init+0x2bc>)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	3301      	adds	r3, #1
 8003654:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	f47f aeb7 	bne.w	80033d4 <HAL_GPIO_Init+0x10>
  }
}
 8003666:	bf00      	nop
 8003668:	bf00      	nop
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40010000 	.word	0x40010000
 8003678:	48000400 	.word	0x48000400
 800367c:	48000800 	.word	0x48000800
 8003680:	58000800 	.word	0x58000800

08003684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
 8003690:	4613      	mov	r3, r2
 8003692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003694:	787b      	ldrb	r3, [r7, #1]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036a0:	e002      	b.n	80036a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036a2:	887a      	ldrh	r2, [r7, #2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	460b      	mov	r3, r1
 80036bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036c4:	887a      	ldrh	r2, [r7, #2]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4013      	ands	r3, r2
 80036ca:	041a      	lsls	r2, r3, #16
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	43d9      	mvns	r1, r3
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	400b      	ands	r3, r1
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	619a      	str	r2, [r3, #24]
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d006      	beq.n	8003708 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036fa:	4a05      	ldr	r2, [pc, #20]	; (8003710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fd f908 	bl	8000918 <HAL_GPIO_EXTI_Callback>
  }
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	58000800 	.word	0x58000800

08003714 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003718:	4b04      	ldr	r3, [pc, #16]	; (800372c <HAL_PWR_EnableBkUpAccess+0x18>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a03      	ldr	r2, [pc, #12]	; (800372c <HAL_PWR_EnableBkUpAccess+0x18>)
 800371e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003722:	6013      	str	r3, [r2, #0]
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	58000400 	.word	0x58000400

08003730 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003734:	4b03      	ldr	r3, [pc, #12]	; (8003744 <HAL_PWREx_GetVoltageRange+0x14>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	58000400 	.word	0x58000400

08003748 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003758:	d101      	bne.n	800375e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	58000400 	.word	0x58000400

0800376c <LL_RCC_HSE_EnableTcxo>:
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800377a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800377e:	6013      	str	r3, [r2, #0]
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <LL_RCC_HSE_DisableTcxo>:
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800378c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003796:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800379a:	6013      	str	r3, [r2, #0]
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr

080037a4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80037a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b6:	d101      	bne.n	80037bc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr

080037c6 <LL_RCC_HSE_Enable>:
{
 80037c6:	b480      	push	{r7}
 80037c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
}
 80037da:	bf00      	nop
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <LL_RCC_HSE_Disable>:
{
 80037e2:	b480      	push	{r7}
 80037e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80037e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
}
 80037f6:	bf00      	nop
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr

080037fe <LL_RCC_HSE_IsReady>:
{
 80037fe:	b480      	push	{r7}
 8003800:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003810:	d101      	bne.n	8003816 <LL_RCC_HSE_IsReady+0x18>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <LL_RCC_HSE_IsReady+0x1a>
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <LL_RCC_HSI_Enable>:
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800382e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003832:	6013      	str	r3, [r2, #0]
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <LL_RCC_HSI_Disable>:
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800384a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800384e:	6013      	str	r3, [r2, #0]
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <LL_RCC_HSI_IsReady>:
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386a:	d101      	bne.n	8003870 <LL_RCC_HSI_IsReady+0x18>
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <LL_RCC_HSI_IsReady+0x1a>
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <LL_RCC_HSI_SetCalibTrimming>:
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80038a2:	b480      	push	{r7}
 80038a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80038a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d101      	bne.n	80038ba <LL_RCC_LSE_IsReady+0x18>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <LL_RCC_LSE_IsReady+0x1a>
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80038c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80038e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b02      	cmp	r3, #2
 8003916:	d101      	bne.n	800391c <LL_RCC_LSI_IsReady+0x18>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <LL_RCC_LSI_IsReady+0x1a>
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003926:	b480      	push	{r7}
 8003928:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800392a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6013      	str	r3, [r2, #0]
}
 800393a:	bf00      	nop
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr

08003942 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003942:	b480      	push	{r7}
 8003944:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	6013      	str	r3, [r2, #0]
}
 8003956:	bf00      	nop
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b02      	cmp	r3, #2
 800396e:	d101      	bne.n	8003974 <LL_RCC_MSI_IsReady+0x16>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <LL_RCC_MSI_IsReady+0x18>
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800397e:	b480      	push	{r7}
 8003980:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b08      	cmp	r3, #8
 800398e:	d101      	bne.n	8003994 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr

0800399e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80039a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80039b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80039d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039e6:	4313      	orrs	r3, r2
 80039e8:	604b      	str	r3, [r1, #4]
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80039fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f023 0203 	bic.w	r2, r3, #3
 8003a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	608b      	str	r3, [r1, #8]
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr

08003a30 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	608b      	str	r3, [r1, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a90:	f023 020f 	bic.w	r2, r3, #15
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	608b      	str	r3, [r1, #8]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr

08003ad2 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ae4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr

08003af8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr

08003b0e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b16:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b66:	6013      	str	r3, [r2, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b82:	6013      	str	r3, [r2, #0]
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr

08003b8c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b9e:	d101      	bne.n	8003ba4 <LL_RCC_PLL_IsReady+0x18>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <LL_RCC_PLL_IsReady+0x1a>
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	0a1b      	lsrs	r3, r3, #8
 8003bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr

08003bf2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1a:	d101      	bne.n	8003c20 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr

08003c2a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c3e:	d101      	bne.n	8003c44 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr

08003c4e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c62:	d101      	bne.n	8003c68 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr

08003c72 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003c72:	b480      	push	{r7}
 8003c74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c84:	d101      	bne.n	8003c8a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr

08003c94 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ca6:	d101      	bne.n	8003cac <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr
	...

08003cb8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e36f      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cca:	f7ff fea6 	bl	8003a1a <LL_RCC_GetSysClkSource>
 8003cce:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd0:	f7ff ff8f 	bl	8003bf2 <LL_RCC_PLL_GetMainSource>
 8003cd4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80c4 	beq.w	8003e6c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x3e>
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2b0c      	cmp	r3, #12
 8003cee:	d176      	bne.n	8003dde <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d173      	bne.n	8003dde <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e353      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_OscConfig+0x68>
 8003d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d1e:	e006      	b.n	8003d2e <HAL_RCC_OscConfig+0x76>
 8003d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d222      	bcs.n	8003d78 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fda2 	bl	8004880 <RCC_SetFlashLatencyFromMSIRange>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e331      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d50:	f043 0308 	orr.w	r3, r3, #8
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fe2b 	bl	80039cc <LL_RCC_MSI_SetCalibTrimming>
 8003d76:	e021      	b.n	8003dbc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d82:	f043 0308 	orr.w	r3, r3, #8
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff fe12 	bl	80039cc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fd67 	bl	8004880 <RCC_SetFlashLatencyFromMSIRange>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e2f6      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003dbc:	f000 fce0 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4aa7      	ldr	r2, [pc, #668]	; (8004060 <HAL_RCC_OscConfig+0x3a8>)
 8003dc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8003dc6:	4ba7      	ldr	r3, [pc, #668]	; (8004064 <HAL_RCC_OscConfig+0x3ac>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fc fe1c 	bl	8000a08 <HAL_InitTick>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d047      	beq.n	8003e6a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8003dda:	7cfb      	ldrb	r3, [r7, #19]
 8003ddc:	e2e5      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02c      	beq.n	8003e40 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003de6:	f7ff fd9e 	bl	8003926 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dea:	f7fe fe23 	bl	8002a34 <HAL_GetTick>
 8003dee:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003df2:	f7fe fe1f 	bl	8002a34 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e2d2      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003e04:	f7ff fdab 	bl	800395e <LL_RCC_MSI_IsReady>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f1      	beq.n	8003df2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e18:	f043 0308 	orr.w	r3, r3, #8
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e30:	4313      	orrs	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff fdc7 	bl	80039cc <LL_RCC_MSI_SetCalibTrimming>
 8003e3e:	e015      	b.n	8003e6c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e40:	f7ff fd7f 	bl	8003942 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e44:	f7fe fdf6 	bl	8002a34 <HAL_GetTick>
 8003e48:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e4c:	f7fe fdf2 	bl	8002a34 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e2a5      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e5e:	f7ff fd7e 	bl	800395e <LL_RCC_MSI_IsReady>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f1      	bne.n	8003e4c <HAL_RCC_OscConfig+0x194>
 8003e68:	e000      	b.n	8003e6c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003e6a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d058      	beq.n	8003f2a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d005      	beq.n	8003e8a <HAL_RCC_OscConfig+0x1d2>
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	2b0c      	cmp	r3, #12
 8003e82:	d108      	bne.n	8003e96 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d105      	bne.n	8003e96 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d14b      	bne.n	8003f2a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e289      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb4:	d102      	bne.n	8003ebc <HAL_RCC_OscConfig+0x204>
 8003eb6:	f7ff fc86 	bl	80037c6 <LL_RCC_HSE_Enable>
 8003eba:	e00d      	b.n	8003ed8 <HAL_RCC_OscConfig+0x220>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003ec4:	d104      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x218>
 8003ec6:	f7ff fc51 	bl	800376c <LL_RCC_HSE_EnableTcxo>
 8003eca:	f7ff fc7c 	bl	80037c6 <LL_RCC_HSE_Enable>
 8003ece:	e003      	b.n	8003ed8 <HAL_RCC_OscConfig+0x220>
 8003ed0:	f7ff fc87 	bl	80037e2 <LL_RCC_HSE_Disable>
 8003ed4:	f7ff fc58 	bl	8003788 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d012      	beq.n	8003f06 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fe fda8 	bl	8002a34 <HAL_GetTick>
 8003ee4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fe fda4 	bl	8002a34 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	; 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e257      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003efa:	f7ff fc80 	bl	80037fe <LL_RCC_HSE_IsReady>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f1      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x230>
 8003f04:	e011      	b.n	8003f2a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fe fd95 	bl	8002a34 <HAL_GetTick>
 8003f0a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f0e:	f7fe fd91 	bl	8002a34 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b64      	cmp	r3, #100	; 0x64
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e244      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003f20:	f7ff fc6d 	bl	80037fe <LL_RCC_HSE_IsReady>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f1      	bne.n	8003f0e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d046      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d005      	beq.n	8003f48 <HAL_RCC_OscConfig+0x290>
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d10e      	bne.n	8003f60 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d10b      	bne.n	8003f60 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e22a      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fc8e 	bl	800387a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003f5e:	e031      	b.n	8003fc4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d019      	beq.n	8003f9c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f68:	f7ff fc5a 	bl	8003820 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fe fd62 	bl	8002a34 <HAL_GetTick>
 8003f70:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f74:	f7fe fd5e 	bl	8002a34 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e211      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f86:	f7ff fc67 	bl	8003858 <LL_RCC_HSI_IsReady>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f1      	beq.n	8003f74 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff fc70 	bl	800387a <LL_RCC_HSI_SetCalibTrimming>
 8003f9a:	e013      	b.n	8003fc4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f9c:	f7ff fc4e 	bl	800383c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fe fd48 	bl	8002a34 <HAL_GetTick>
 8003fa4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa8:	f7fe fd44 	bl	8002a34 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e1f7      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003fba:	f7ff fc4d 	bl	8003858 <LL_RCC_HSI_IsReady>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f1      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d06e      	beq.n	80040ae <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d056      	beq.n	8004086 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69da      	ldr	r2, [r3, #28]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d031      	beq.n	8004054 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d006      	beq.n	8004008 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e1d0      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d013      	beq.n	800403a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004012:	f7ff fc67 	bl	80038e4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004016:	f7fe fd0d 	bl	8002a34 <HAL_GetTick>
 800401a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800401e:	f7fe fd09 	bl	8002a34 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b11      	cmp	r3, #17
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e1bc      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004030:	f7ff fc68 	bl	8003904 <LL_RCC_LSI_IsReady>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f1      	bne.n	800401e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800403a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004042:	f023 0210 	bic.w	r2, r3, #16
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004054:	f7ff fc36 	bl	80038c4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004058:	f7fe fcec 	bl	8002a34 <HAL_GetTick>
 800405c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800405e:	e00c      	b.n	800407a <HAL_RCC_OscConfig+0x3c2>
 8004060:	20000004 	.word	0x20000004
 8004064:	20000114 	.word	0x20000114
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004068:	f7fe fce4 	bl	8002a34 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b11      	cmp	r3, #17
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e197      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800407a:	f7ff fc43 	bl	8003904 <LL_RCC_LSI_IsReady>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f1      	beq.n	8004068 <HAL_RCC_OscConfig+0x3b0>
 8004084:	e013      	b.n	80040ae <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004086:	f7ff fc2d 	bl	80038e4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408a:	f7fe fcd3 	bl	8002a34 <HAL_GetTick>
 800408e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004092:	f7fe fccf 	bl	8002a34 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b11      	cmp	r3, #17
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e182      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80040a4:	f7ff fc2e 	bl	8003904 <LL_RCC_LSI_IsReady>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f1      	bne.n	8004092 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 80d8 	beq.w	800426c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80040bc:	f7ff fb44 	bl	8003748 <LL_PWR_IsEnabledBkUpAccess>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d113      	bne.n	80040ee <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80040c6:	f7ff fb25 	bl	8003714 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ca:	f7fe fcb3 	bl	8002a34 <HAL_GetTick>
 80040ce:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d2:	f7fe fcaf 	bl	8002a34 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e162      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80040e4:	f7ff fb30 	bl	8003748 <LL_PWR_IsEnabledBkUpAccess>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f1      	beq.n	80040d2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d07b      	beq.n	80041ee <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b85      	cmp	r3, #133	; 0x85
 80040fc:	d003      	beq.n	8004106 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b05      	cmp	r3, #5
 8004104:	d109      	bne.n	800411a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004112:	f043 0304 	orr.w	r3, r3, #4
 8004116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411a:	f7fe fc8b 	bl	8002a34 <HAL_GetTick>
 800411e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004134:	e00a      	b.n	800414c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fe fc7d 	bl	8002a34 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e12e      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800414c:	f7ff fba9 	bl	80038a2 <LL_RCC_LSE_IsReady>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0ef      	beq.n	8004136 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2b81      	cmp	r3, #129	; 0x81
 800415c:	d003      	beq.n	8004166 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	2b85      	cmp	r3, #133	; 0x85
 8004164:	d121      	bne.n	80041aa <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004166:	f7fe fc65 	bl	8002a34 <HAL_GetTick>
 800416a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800416c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800417c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004180:	e00a      	b.n	8004198 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fe fc57 	bl	8002a34 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e108      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0ec      	beq.n	8004182 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80041a8:	e060      	b.n	800426c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041aa:	f7fe fc43 	bl	8002a34 <HAL_GetTick>
 80041ae:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80041b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80041c4:	e00a      	b.n	80041dc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c6:	f7fe fc35 	bl	8002a34 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e0e6      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1ec      	bne.n	80041c6 <HAL_RCC_OscConfig+0x50e>
 80041ec:	e03e      	b.n	800426c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ee:	f7fe fc21 	bl	8002a34 <HAL_GetTick>
 80041f2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80041f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004208:	e00a      	b.n	8004220 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f7fe fc13 	bl	8002a34 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	; 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e0c4      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1ec      	bne.n	800420a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004230:	f7fe fc00 	bl	8002a34 <HAL_GetTick>
 8004234:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800424a:	e00a      	b.n	8004262 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424c:	f7fe fbf2 	bl	8002a34 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	f241 3288 	movw	r2, #5000	; 0x1388
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e0a3      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004262:	f7ff fb1e 	bl	80038a2 <LL_RCC_LSE_IsReady>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ef      	bne.n	800424c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8099 	beq.w	80043a8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	2b0c      	cmp	r3, #12
 800427a:	d06c      	beq.n	8004356 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	2b02      	cmp	r3, #2
 8004282:	d14b      	bne.n	800431c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004284:	f7ff fc74 	bl	8003b70 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7fe fbd4 	bl	8002a34 <HAL_GetTick>
 800428c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004290:	f7fe fbd0 	bl	8002a34 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b0a      	cmp	r3, #10
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e083      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80042a2:	f7ff fc73 	bl	8003b8c <LL_RCC_PLL_IsReady>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f1      	bne.n	8004290 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	4b40      	ldr	r3, [pc, #256]	; (80043b4 <HAL_RCC_OscConfig+0x6fc>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042be:	4311      	orrs	r1, r2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042c4:	0212      	lsls	r2, r2, #8
 80042c6:	4311      	orrs	r1, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042cc:	4311      	orrs	r1, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042d2:	4311      	orrs	r1, r2
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80042d8:	430a      	orrs	r2, r1
 80042da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042de:	4313      	orrs	r3, r2
 80042e0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e2:	f7ff fc37 	bl	8003b54 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f6:	f7fe fb9d 	bl	8002a34 <HAL_GetTick>
 80042fa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042fe:	f7fe fb99 	bl	8002a34 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b0a      	cmp	r3, #10
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e04c      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004310:	f7ff fc3c 	bl	8003b8c <LL_RCC_PLL_IsReady>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f1      	beq.n	80042fe <HAL_RCC_OscConfig+0x646>
 800431a:	e045      	b.n	80043a8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431c:	f7ff fc28 	bl	8003b70 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fe fb88 	bl	8002a34 <HAL_GetTick>
 8004324:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004328:	f7fe fb84 	bl	8002a34 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b0a      	cmp	r3, #10
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e037      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800433a:	f7ff fc27 	bl	8003b8c <LL_RCC_PLL_IsReady>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f1      	bne.n	8004328 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800434e:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <HAL_RCC_OscConfig+0x700>)
 8004350:	4013      	ands	r3, r2
 8004352:	60cb      	str	r3, [r1, #12]
 8004354:	e028      	b.n	80043a8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e023      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	f003 0203 	and.w	r2, r3, #3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	429a      	cmp	r2, r3
 8004376:	d115      	bne.n	80043a4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004382:	429a      	cmp	r2, r3
 8004384:	d10e      	bne.n	80043a4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	429a      	cmp	r2, r3
 8004394:	d106      	bne.n	80043a4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3720      	adds	r7, #32
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	11c1808c 	.word	0x11c1808c
 80043b8:	eefefffc 	.word	0xeefefffc

080043bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e12c      	b.n	800462a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043d0:	4b98      	ldr	r3, [pc, #608]	; (8004634 <HAL_RCC_ClockConfig+0x278>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d91b      	bls.n	8004416 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b95      	ldr	r3, [pc, #596]	; (8004634 <HAL_RCC_ClockConfig+0x278>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 0207 	bic.w	r2, r3, #7
 80043e6:	4993      	ldr	r1, [pc, #588]	; (8004634 <HAL_RCC_ClockConfig+0x278>)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043ee:	f7fe fb21 	bl	8002a34 <HAL_GetTick>
 80043f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80043f6:	f7fe fb1d 	bl	8002a34 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e110      	b.n	800462a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004408:	4b8a      	ldr	r3, [pc, #552]	; (8004634 <HAL_RCC_ClockConfig+0x278>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d1ef      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d016      	beq.n	8004450 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fb02 	bl	8003a30 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800442c:	f7fe fb02 	bl	8002a34 <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004434:	f7fe fafe 	bl	8002a34 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0f1      	b.n	800462a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004446:	f7ff fbdf 	bl	8003c08 <LL_RCC_IsActiveFlag_HPRE>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f1      	beq.n	8004434 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d016      	beq.n	800448a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff faf8 	bl	8003a56 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004466:	f7fe fae5 	bl	8002a34 <HAL_GetTick>
 800446a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800446c:	e008      	b.n	8004480 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800446e:	f7fe fae1 	bl	8002a34 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e0d4      	b.n	800462a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004480:	f7ff fbd3 	bl	8003c2a <LL_RCC_IsActiveFlag_C2HPRE>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f1      	beq.n	800446e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d016      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff faf0 	bl	8003a80 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044a0:	f7fe fac8 	bl	8002a34 <HAL_GetTick>
 80044a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044a8:	f7fe fac4 	bl	8002a34 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e0b7      	b.n	800462a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80044ba:	f7ff fbc8 	bl	8003c4e <LL_RCC_IsActiveFlag_SHDHPRE>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f1      	beq.n	80044a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d016      	beq.n	80044fe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fae9 	bl	8003aac <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044da:	f7fe faab 	bl	8002a34 <HAL_GetTick>
 80044de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044e2:	f7fe faa7 	bl	8002a34 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e09a      	b.n	800462a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80044f4:	f7ff fbbd 	bl	8003c72 <LL_RCC_IsActiveFlag_PPRE1>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f1      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d017      	beq.n	800453a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff fade 	bl	8003ad2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004516:	f7fe fa8d 	bl	8002a34 <HAL_GetTick>
 800451a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800451c:	e008      	b.n	8004530 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800451e:	f7fe fa89 	bl	8002a34 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e07c      	b.n	800462a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004530:	f7ff fbb0 	bl	8003c94 <LL_RCC_IsActiveFlag_PPRE2>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f1      	beq.n	800451e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d043      	beq.n	80045ce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d106      	bne.n	800455c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800454e:	f7ff f956 	bl	80037fe <LL_RCC_HSE_IsReady>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d11e      	bne.n	8004596 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e066      	b.n	800462a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b03      	cmp	r3, #3
 8004562:	d106      	bne.n	8004572 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004564:	f7ff fb12 	bl	8003b8c <LL_RCC_PLL_IsReady>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d113      	bne.n	8004596 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e05b      	b.n	800462a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800457a:	f7ff f9f0 	bl	800395e <LL_RCC_MSI_IsReady>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d108      	bne.n	8004596 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e050      	b.n	800462a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004588:	f7ff f966 	bl	8003858 <LL_RCC_HSI_IsReady>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e049      	b.n	800462a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff fa2a 	bl	80039f4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a0:	f7fe fa48 	bl	8002a34 <HAL_GetTick>
 80045a4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a6:	e00a      	b.n	80045be <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a8:	f7fe fa44 	bl	8002a34 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e035      	b.n	800462a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045be:	f7ff fa2c 	bl	8003a1a <LL_RCC_GetSysClkSource>
 80045c2:	4602      	mov	r2, r0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d1ec      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045ce:	4b19      	ldr	r3, [pc, #100]	; (8004634 <HAL_RCC_ClockConfig+0x278>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d21b      	bcs.n	8004614 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045dc:	4b15      	ldr	r3, [pc, #84]	; (8004634 <HAL_RCC_ClockConfig+0x278>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f023 0207 	bic.w	r2, r3, #7
 80045e4:	4913      	ldr	r1, [pc, #76]	; (8004634 <HAL_RCC_ClockConfig+0x278>)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045ec:	f7fe fa22 	bl	8002a34 <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80045f4:	f7fe fa1e 	bl	8002a34 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e011      	b.n	800462a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004606:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCC_ClockConfig+0x278>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d1ef      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004614:	f000 f8b4 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 8004618:	4603      	mov	r3, r0
 800461a:	4a07      	ldr	r2, [pc, #28]	; (8004638 <HAL_RCC_ClockConfig+0x27c>)
 800461c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800461e:	4b07      	ldr	r3, [pc, #28]	; (800463c <HAL_RCC_ClockConfig+0x280>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fc f9f0 	bl	8000a08 <HAL_InitTick>
 8004628:	4603      	mov	r3, r0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	58004000 	.word	0x58004000
 8004638:	20000004 	.word	0x20000004
 800463c:	20000114 	.word	0x20000114

08004640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004640:	b590      	push	{r4, r7, lr}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800464e:	f7ff f9e4 	bl	8003a1a <LL_RCC_GetSysClkSource>
 8004652:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004654:	f7ff facd 	bl	8003bf2 <LL_RCC_PLL_GetMainSource>
 8004658:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0x2c>
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b0c      	cmp	r3, #12
 8004664:	d139      	bne.n	80046da <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d136      	bne.n	80046da <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800466c:	f7ff f987 	bl	800397e <LL_RCC_MSI_IsEnabledRangeSelect>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d115      	bne.n	80046a2 <HAL_RCC_GetSysClockFreq+0x62>
 8004676:	f7ff f982 	bl	800397e <LL_RCC_MSI_IsEnabledRangeSelect>
 800467a:	4603      	mov	r3, r0
 800467c:	2b01      	cmp	r3, #1
 800467e:	d106      	bne.n	800468e <HAL_RCC_GetSysClockFreq+0x4e>
 8004680:	f7ff f98d 	bl	800399e <LL_RCC_MSI_GetRange>
 8004684:	4603      	mov	r3, r0
 8004686:	0a1b      	lsrs	r3, r3, #8
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	e005      	b.n	800469a <HAL_RCC_GetSysClockFreq+0x5a>
 800468e:	f7ff f991 	bl	80039b4 <LL_RCC_MSI_GetRangeAfterStandby>
 8004692:	4603      	mov	r3, r0
 8004694:	0a1b      	lsrs	r3, r3, #8
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	4a36      	ldr	r2, [pc, #216]	; (8004774 <HAL_RCC_GetSysClockFreq+0x134>)
 800469c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a0:	e014      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x8c>
 80046a2:	f7ff f96c 	bl	800397e <LL_RCC_MSI_IsEnabledRangeSelect>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d106      	bne.n	80046ba <HAL_RCC_GetSysClockFreq+0x7a>
 80046ac:	f7ff f977 	bl	800399e <LL_RCC_MSI_GetRange>
 80046b0:	4603      	mov	r3, r0
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	e005      	b.n	80046c6 <HAL_RCC_GetSysClockFreq+0x86>
 80046ba:	f7ff f97b 	bl	80039b4 <LL_RCC_MSI_GetRangeAfterStandby>
 80046be:	4603      	mov	r3, r0
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	4a2b      	ldr	r2, [pc, #172]	; (8004774 <HAL_RCC_GetSysClockFreq+0x134>)
 80046c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046cc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d115      	bne.n	8004700 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80046d8:	e012      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d102      	bne.n	80046e6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046e0:	4b25      	ldr	r3, [pc, #148]	; (8004778 <HAL_RCC_GetSysClockFreq+0x138>)
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e00c      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d109      	bne.n	8004700 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80046ec:	f7ff f85a 	bl	80037a4 <LL_RCC_HSE_IsEnabledDiv2>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d102      	bne.n	80046fc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <HAL_RCC_GetSysClockFreq+0x138>)
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	e001      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80046fc:	4b1f      	ldr	r3, [pc, #124]	; (800477c <HAL_RCC_GetSysClockFreq+0x13c>)
 80046fe:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004700:	f7ff f98b 	bl	8003a1a <LL_RCC_GetSysClkSource>
 8004704:	4603      	mov	r3, r0
 8004706:	2b0c      	cmp	r3, #12
 8004708:	d12f      	bne.n	800476a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800470a:	f7ff fa72 	bl	8003bf2 <LL_RCC_PLL_GetMainSource>
 800470e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d003      	beq.n	800471e <HAL_RCC_GetSysClockFreq+0xde>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d003      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0xe4>
 800471c:	e00d      	b.n	800473a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800471e:	4b16      	ldr	r3, [pc, #88]	; (8004778 <HAL_RCC_GetSysClockFreq+0x138>)
 8004720:	60fb      	str	r3, [r7, #12]
        break;
 8004722:	e00d      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004724:	f7ff f83e 	bl	80037a4 <LL_RCC_HSE_IsEnabledDiv2>
 8004728:	4603      	mov	r3, r0
 800472a:	2b01      	cmp	r3, #1
 800472c:	d102      	bne.n	8004734 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800472e:	4b12      	ldr	r3, [pc, #72]	; (8004778 <HAL_RCC_GetSysClockFreq+0x138>)
 8004730:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004732:	e005      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004734:	4b11      	ldr	r3, [pc, #68]	; (800477c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004736:	60fb      	str	r3, [r7, #12]
        break;
 8004738:	e002      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	60fb      	str	r3, [r7, #12]
        break;
 800473e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004740:	f7ff fa35 	bl	8003bae <LL_RCC_PLL_GetN>
 8004744:	4602      	mov	r2, r0
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	fb03 f402 	mul.w	r4, r3, r2
 800474c:	f7ff fa46 	bl	8003bdc <LL_RCC_PLL_GetDivider>
 8004750:	4603      	mov	r3, r0
 8004752:	091b      	lsrs	r3, r3, #4
 8004754:	3301      	adds	r3, #1
 8004756:	fbb4 f4f3 	udiv	r4, r4, r3
 800475a:	f7ff fa34 	bl	8003bc6 <LL_RCC_PLL_GetR>
 800475e:	4603      	mov	r3, r0
 8004760:	0f5b      	lsrs	r3, r3, #29
 8004762:	3301      	adds	r3, #1
 8004764:	fbb4 f3f3 	udiv	r3, r4, r3
 8004768:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800476a:	697b      	ldr	r3, [r7, #20]
}
 800476c:	4618      	mov	r0, r3
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	bd90      	pop	{r4, r7, pc}
 8004774:	080095ec 	.word	0x080095ec
 8004778:	00f42400 	.word	0x00f42400
 800477c:	01e84800 	.word	0x01e84800

08004780 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004780:	b598      	push	{r3, r4, r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004784:	f7ff ff5c 	bl	8004640 <HAL_RCC_GetSysClockFreq>
 8004788:	4604      	mov	r4, r0
 800478a:	f7ff f9b5 	bl	8003af8 <LL_RCC_GetAHBPrescaler>
 800478e:	4603      	mov	r3, r0
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	4a03      	ldr	r2, [pc, #12]	; (80047a4 <HAL_RCC_GetHCLKFreq+0x24>)
 8004798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd98      	pop	{r3, r4, r7, pc}
 80047a4:	0800958c 	.word	0x0800958c

080047a8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a8:	b598      	push	{r3, r4, r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80047ac:	f7ff ffe8 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047b0:	4604      	mov	r4, r0
 80047b2:	f7ff f9b9 	bl	8003b28 <LL_RCC_GetAPB1Prescaler>
 80047b6:	4603      	mov	r3, r0
 80047b8:	0a1b      	lsrs	r3, r3, #8
 80047ba:	4a03      	ldr	r2, [pc, #12]	; (80047c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd98      	pop	{r3, r4, r7, pc}
 80047c8:	080095cc 	.word	0x080095cc

080047cc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047cc:	b598      	push	{r3, r4, r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80047d0:	f7ff ffd6 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047d4:	4604      	mov	r4, r0
 80047d6:	f7ff f9b2 	bl	8003b3e <LL_RCC_GetAPB2Prescaler>
 80047da:	4603      	mov	r3, r0
 80047dc:	0adb      	lsrs	r3, r3, #11
 80047de:	4a03      	ldr	r2, [pc, #12]	; (80047ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80047e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	bd98      	pop	{r3, r4, r7, pc}
 80047ec:	080095cc 	.word	0x080095cc

080047f0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d038      	beq.n	8004872 <HAL_RCC_GetClockConfig+0x82>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d035      	beq.n	8004872 <HAL_RCC_GetClockConfig+0x82>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	224f      	movs	r2, #79	; 0x4f
 800480a:	601a      	str	r2, [r3, #0]
                                    | RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_HCLK3);
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f043 0220 	orr.w	r2, r3, #32
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	601a      	str	r2, [r3, #0]
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8004818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 020c 	and.w	r2, r3, #12
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8004848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800484c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004850:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	615a      	str	r2, [r3, #20]
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	b2da      	uxtb	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	619a      	str	r2, [r3, #24]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004866:	4b05      	ldr	r3, [pc, #20]	; (800487c <HAL_RCC_GetClockConfig+0x8c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0207 	and.w	r2, r3, #7
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	601a      	str	r2, [r3, #0]
  }
}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr
 800487c:	58004000 	.word	0x58004000

08004880 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	091b      	lsrs	r3, r3, #4
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	4a10      	ldr	r2, [pc, #64]	; (80048d4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004896:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004898:	f7ff f939 	bl	8003b0e <LL_RCC_GetAHB3Prescaler>
 800489c:	4603      	mov	r3, r0
 800489e:	091b      	lsrs	r3, r3, #4
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	4a0c      	ldr	r2, [pc, #48]	; (80048d8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80048a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4a09      	ldr	r2, [pc, #36]	; (80048dc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80048b6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ba:	0c9c      	lsrs	r4, r3, #18
 80048bc:	f7fe ff38 	bl	8003730 <HAL_PWREx_GetVoltageRange>
 80048c0:	4603      	mov	r3, r0
 80048c2:	4619      	mov	r1, r3
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 f80b 	bl	80048e0 <RCC_SetFlashLatency>
 80048ca:	4603      	mov	r3, r0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd90      	pop	{r4, r7, pc}
 80048d4:	080095ec 	.word	0x080095ec
 80048d8:	0800958c 	.word	0x0800958c
 80048dc:	431bde83 	.word	0x431bde83

080048e0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08e      	sub	sp, #56	; 0x38
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80048ea:	4a3a      	ldr	r2, [pc, #232]	; (80049d4 <RCC_SetFlashLatency+0xf4>)
 80048ec:	f107 0320 	add.w	r3, r7, #32
 80048f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048f4:	6018      	str	r0, [r3, #0]
 80048f6:	3304      	adds	r3, #4
 80048f8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80048fa:	4a37      	ldr	r2, [pc, #220]	; (80049d8 <RCC_SetFlashLatency+0xf8>)
 80048fc:	f107 0318 	add.w	r3, r7, #24
 8004900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004904:	6018      	str	r0, [r3, #0]
 8004906:	3304      	adds	r3, #4
 8004908:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800490a:	4a34      	ldr	r2, [pc, #208]	; (80049dc <RCC_SetFlashLatency+0xfc>)
 800490c:	f107 030c 	add.w	r3, r7, #12
 8004910:	ca07      	ldmia	r2, {r0, r1, r2}
 8004912:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004916:	2300      	movs	r3, #0
 8004918:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004920:	d11b      	bne.n	800495a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004922:	2300      	movs	r3, #0
 8004924:	633b      	str	r3, [r7, #48]	; 0x30
 8004926:	e014      	b.n	8004952 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	3338      	adds	r3, #56	; 0x38
 800492e:	443b      	add	r3, r7
 8004930:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004934:	461a      	mov	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4293      	cmp	r3, r2
 800493a:	d807      	bhi.n	800494c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	3338      	adds	r3, #56	; 0x38
 8004942:	443b      	add	r3, r7
 8004944:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800494a:	e021      	b.n	8004990 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	3301      	adds	r3, #1
 8004950:	633b      	str	r3, [r7, #48]	; 0x30
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	2b02      	cmp	r3, #2
 8004956:	d9e7      	bls.n	8004928 <RCC_SetFlashLatency+0x48>
 8004958:	e01a      	b.n	8004990 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800495a:	2300      	movs	r3, #0
 800495c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800495e:	e014      	b.n	800498a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	3338      	adds	r3, #56	; 0x38
 8004966:	443b      	add	r3, r7
 8004968:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800496c:	461a      	mov	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4293      	cmp	r3, r2
 8004972:	d807      	bhi.n	8004984 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	3338      	adds	r3, #56	; 0x38
 800497a:	443b      	add	r3, r7
 800497c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004980:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004982:	e005      	b.n	8004990 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	3301      	adds	r3, #1
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	2b02      	cmp	r3, #2
 800498e:	d9e7      	bls.n	8004960 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004990:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <RCC_SetFlashLatency+0x100>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f023 0207 	bic.w	r2, r3, #7
 8004998:	4911      	ldr	r1, [pc, #68]	; (80049e0 <RCC_SetFlashLatency+0x100>)
 800499a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499c:	4313      	orrs	r3, r2
 800499e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80049a0:	f7fe f848 	bl	8002a34 <HAL_GetTick>
 80049a4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80049a6:	e008      	b.n	80049ba <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049a8:	f7fe f844 	bl	8002a34 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e007      	b.n	80049ca <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80049ba:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <RCC_SetFlashLatency+0x100>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d1ef      	bne.n	80049a8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3738      	adds	r7, #56	; 0x38
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	08009548 	.word	0x08009548
 80049d8:	08009550 	.word	0x08009550
 80049dc:	08009558 	.word	0x08009558
 80049e0:	58004000 	.word	0x58004000

080049e4 <LL_RCC_LSE_IsReady>:
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80049e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d101      	bne.n	80049fc <LL_RCC_LSE_IsReady+0x18>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <LL_RCC_LSE_IsReady+0x1a>
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bc80      	pop	{r7}
 8004a04:	4770      	bx	lr

08004a06 <LL_RCC_SetUSARTClockSource>:
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	401a      	ands	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr

08004a36 <LL_RCC_SetI2SClockSource>:
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr

08004a60 <LL_RCC_SetLPUARTClockSource>:
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <LL_RCC_SetI2CClockSource>:
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004aa2:	43db      	mvns	r3, r3
 8004aa4:	401a      	ands	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bc80      	pop	{r7}
 8004ac0:	4770      	bx	lr

08004ac2 <LL_RCC_SetLPTIMClockSource>:
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ace:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	0c1b      	lsrs	r3, r3, #16
 8004ad6:	041b      	lsls	r3, r3, #16
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	401a      	ands	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr

08004af4 <LL_RCC_SetRNGClockSource>:
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b04:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr

08004b1e <LL_RCC_SetADCClockSource>:
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <LL_RCC_SetRTCClockSource>:
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr

08004b72 <LL_RCC_GetRTCClockSource>:
{
 8004b72:	b480      	push	{r7}
 8004b74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr

08004b8a <LL_RCC_ForceBackupDomainReset>:
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ba2:	bf00      	nop
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr

08004baa <LL_RCC_ReleaseBackupDomainReset>:
{
 8004baa:	b480      	push	{r7}
 8004bac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bc2:	bf00      	nop
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr
	...

08004bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004bd8:	2300      	movs	r3, #0
 8004bda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004bdc:	2300      	movs	r3, #0
 8004bde:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d058      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004bec:	f7fe fd92 	bl	8003714 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bf0:	f7fd ff20 	bl	8002a34 <HAL_GetTick>
 8004bf4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004bf6:	e009      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf8:	f7fd ff1c 	bl	8002a34 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d902      	bls.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	74fb      	strb	r3, [r7, #19]
        break;
 8004c0a:	e006      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004c0c:	4b7b      	ldr	r3, [pc, #492]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c18:	d1ee      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d13c      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004c20:	f7ff ffa7 	bl	8004b72 <LL_RCC_GetRTCClockSource>
 8004c24:	4602      	mov	r2, r0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d00f      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c3c:	f7ff ffa5 	bl	8004b8a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c40:	f7ff ffb3 	bl	8004baa <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d014      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fd feec 	bl	8002a34 <HAL_GetTick>
 8004c5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004c5e:	e00b      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c60:	f7fd fee8 	bl	8002a34 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d902      	bls.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	74fb      	strb	r3, [r7, #19]
            break;
 8004c76:	e004      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004c78:	f7ff feb4 	bl	80049e4 <LL_RCC_LSE_IsReady>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d1ee      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004c82:	7cfb      	ldrb	r3, [r7, #19]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d105      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff ff5b 	bl	8004b48 <LL_RCC_SetRTCClockSource>
 8004c92:	e004      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c94:	7cfb      	ldrb	r3, [r7, #19]
 8004c96:	74bb      	strb	r3, [r7, #18]
 8004c98:	e001      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9a:	7cfb      	ldrb	r3, [r7, #19]
 8004c9c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d004      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fea9 	bl	8004a06 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d004      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff fe9e 	bl	8004a06 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d004      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff fec0 	bl	8004a60 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fee6 	bl	8004ac2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d004      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff fedb 	bl	8004ac2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d004      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff fed0 	bl	8004ac2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d004      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fea9 	bl	8004a8a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d004      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff fe9e 	bl	8004a8a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d004      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fe93 	bl	8004a8a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d011      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff fe5e 	bl	8004a36 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d82:	d107      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d010      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff fea5 	bl	8004af4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d107      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dc0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d011      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff fea3 	bl	8004b1e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004de0:	d107      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004df2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	58000400 	.word	0x58000400

08004e00 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e10:	4904      	ldr	r1, [pc, #16]	; (8004e24 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	608b      	str	r3, [r1, #8]
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	58000400 	.word	0x58000400

08004e28 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e32:	4a04      	ldr	r2, [pc, #16]	; (8004e44 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e3c:	bf00      	nop
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr
 8004e44:	58000400 	.word	0x58000400

08004e48 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e52:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004e54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e5c:	bf00      	nop
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr
 8004e64:	58000400 	.word	0x58000400

08004e68 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004e6c:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e72:	619a      	str	r2, [r3, #24]
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr
 8004e7c:	58000400 	.word	0x58000400

08004e80 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d101      	bne.n	8004e94 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	58000400 	.word	0x58000400

08004ea4 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d101      	bne.n	8004eb8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	58000400 	.word	0x58000400

08004ec8 <LL_RCC_RF_DisableReset>:
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ed8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004edc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr

08004ee8 <LL_RCC_IsRFUnderReset>:
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004efc:	d101      	bne.n	8004f02 <LL_RCC_IsRFUnderReset+0x1a>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <LL_RCC_IsRFUnderReset+0x1c>
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr

08004f0c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <LL_EXTI_EnableIT_32_63+0x24>)
 8004f16:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004f1a:	4905      	ldr	r1, [pc, #20]	; (8004f30 <LL_EXTI_EnableIT_32_63+0x24>)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bc80      	pop	{r7}
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	58000800 	.word	0x58000800

08004f34 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d103      	bne.n	8004f4a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	73fb      	strb	r3, [r7, #15]
    return status;
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	e052      	b.n	8004ff0 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	799b      	ldrb	r3, [r3, #6]
 8004f52:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8004f54:	7bbb      	ldrb	r3, [r7, #14]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_SUBGHZ_Init+0x2c>
 8004f5a:	7bbb      	ldrb	r3, [r7, #14]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d109      	bne.n	8004f74 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fb fe32 	bl	8000bd0 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004f6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004f70:	f7ff ffcc 	bl	8004f0c <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8004f74:	7bbb      	ldrb	r3, [r7, #14]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d126      	bne.n	8004fc8 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004f80:	f7ff ffa2 	bl	8004ec8 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004f84:	4b1c      	ldr	r3, [pc, #112]	; (8004ff8 <HAL_SUBGHZ_Init+0xc4>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	1a9b      	subs	r3, r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	0cdb      	lsrs	r3, r3, #19
 8004f92:	2264      	movs	r2, #100	; 0x64
 8004f94:	fb02 f303 	mul.w	r3, r2, r3
 8004f98:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d105      	bne.n	8004fac <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	609a      	str	r2, [r3, #8]
        break;
 8004faa:	e007      	b.n	8004fbc <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004fb2:	f7ff ff99 	bl	8004ee8 <LL_RCC_IsRFUnderReset>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1ee      	bne.n	8004f9a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004fbc:	f7ff ff34 	bl	8004e28 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004fc0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004fc4:	f7ff ff1c 	bl	8004e00 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004fc8:	f7ff ff4e 	bl	8004e68 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10a      	bne.n	8004fe8 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fab6 	bl	8005548 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	719a      	strb	r2, [r3, #6]

  return status;
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20000004 	.word	0x20000004

08004ffc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	607a      	str	r2, [r7, #4]
 8005006:	461a      	mov	r2, r3
 8005008:	460b      	mov	r3, r1
 800500a:	817b      	strh	r3, [r7, #10]
 800500c:	4613      	mov	r3, r2
 800500e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	799b      	ldrb	r3, [r3, #6]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b01      	cmp	r3, #1
 8005018:	d14a      	bne.n	80050b0 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	795b      	ldrb	r3, [r3, #5]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8005022:	2302      	movs	r3, #2
 8005024:	e045      	b.n	80050b2 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2202      	movs	r2, #2
 8005030:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fb56 	bl	80056e4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005038:	f7ff ff06 	bl	8004e48 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800503c:	210d      	movs	r1, #13
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 faa2 	bl	8005588 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005044:	897b      	ldrh	r3, [r7, #10]
 8005046:	0a1b      	lsrs	r3, r3, #8
 8005048:	b29b      	uxth	r3, r3
 800504a:	b2db      	uxtb	r3, r3
 800504c:	4619      	mov	r1, r3
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 fa9a 	bl	8005588 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005054:	897b      	ldrh	r3, [r7, #10]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	4619      	mov	r1, r3
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fa94 	bl	8005588 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005060:	2300      	movs	r3, #0
 8005062:	82bb      	strh	r3, [r7, #20]
 8005064:	e00a      	b.n	800507c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005066:	8abb      	ldrh	r3, [r7, #20]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	4413      	add	r3, r2
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	4619      	mov	r1, r3
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 fa89 	bl	8005588 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005076:	8abb      	ldrh	r3, [r7, #20]
 8005078:	3301      	adds	r3, #1
 800507a:	82bb      	strh	r3, [r7, #20]
 800507c:	8aba      	ldrh	r2, [r7, #20]
 800507e:	893b      	ldrh	r3, [r7, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	d3f0      	bcc.n	8005066 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005084:	f7ff fed0 	bl	8004e28 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fb4f 	bl	800572c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	75fb      	strb	r3, [r7, #23]
 800509a:	e001      	b.n	80050a0 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	715a      	strb	r2, [r3, #5]

    return status;
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
 80050ae:	e000      	b.n	80050b2 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
  }
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b088      	sub	sp, #32
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	461a      	mov	r2, r3
 80050c6:	460b      	mov	r3, r1
 80050c8:	817b      	strh	r3, [r7, #10]
 80050ca:	4613      	mov	r3, r2
 80050cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	799b      	ldrb	r3, [r3, #6]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d14a      	bne.n	8005172 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	795b      	ldrb	r3, [r3, #5]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e045      	b.n	8005174 <HAL_SUBGHZ_ReadRegisters+0xba>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 faf8 	bl	80056e4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80050f4:	f7ff fea8 	bl	8004e48 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80050f8:	211d      	movs	r1, #29
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 fa44 	bl	8005588 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005100:	897b      	ldrh	r3, [r7, #10]
 8005102:	0a1b      	lsrs	r3, r3, #8
 8005104:	b29b      	uxth	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	4619      	mov	r1, r3
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 fa3c 	bl	8005588 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005110:	897b      	ldrh	r3, [r7, #10]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	4619      	mov	r1, r3
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 fa36 	bl	8005588 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800511c:	2100      	movs	r1, #0
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fa32 	bl	8005588 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005124:	2300      	movs	r3, #0
 8005126:	82fb      	strh	r3, [r7, #22]
 8005128:	e009      	b.n	800513e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800512a:	69b9      	ldr	r1, [r7, #24]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fa81 	bl	8005634 <SUBGHZSPI_Receive>
      pData++;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	3301      	adds	r3, #1
 8005136:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005138:	8afb      	ldrh	r3, [r7, #22]
 800513a:	3301      	adds	r3, #1
 800513c:	82fb      	strh	r3, [r7, #22]
 800513e:	8afa      	ldrh	r2, [r7, #22]
 8005140:	893b      	ldrh	r3, [r7, #8]
 8005142:	429a      	cmp	r2, r3
 8005144:	d3f1      	bcc.n	800512a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005146:	f7ff fe6f 	bl	8004e28 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 faee 	bl	800572c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	e001      	b.n	8005162 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	715a      	strb	r2, [r3, #5]

    return status;
 800516e:	7ffb      	ldrb	r3, [r7, #31]
 8005170:	e000      	b.n	8005174 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005172:	2302      	movs	r3, #2
  }
}
 8005174:	4618      	mov	r0, r3
 8005176:	3720      	adds	r7, #32
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	607a      	str	r2, [r7, #4]
 8005186:	461a      	mov	r2, r3
 8005188:	460b      	mov	r3, r1
 800518a:	72fb      	strb	r3, [r7, #11]
 800518c:	4613      	mov	r3, r2
 800518e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	799b      	ldrb	r3, [r3, #6]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b01      	cmp	r3, #1
 8005198:	d14a      	bne.n	8005230 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	795b      	ldrb	r3, [r3, #5]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e045      	b.n	8005232 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fa99 	bl	80056e4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80051b2:	7afb      	ldrb	r3, [r7, #11]
 80051b4:	2b84      	cmp	r3, #132	; 0x84
 80051b6:	d002      	beq.n	80051be <HAL_SUBGHZ_ExecSetCmd+0x42>
 80051b8:	7afb      	ldrb	r3, [r7, #11]
 80051ba:	2b94      	cmp	r3, #148	; 0x94
 80051bc:	d103      	bne.n	80051c6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	711a      	strb	r2, [r3, #4]
 80051c4:	e002      	b.n	80051cc <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80051cc:	f7ff fe3c 	bl	8004e48 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80051d0:	7afb      	ldrb	r3, [r7, #11]
 80051d2:	4619      	mov	r1, r3
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f9d7 	bl	8005588 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80051da:	2300      	movs	r3, #0
 80051dc:	82bb      	strh	r3, [r7, #20]
 80051de:	e00a      	b.n	80051f6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80051e0:	8abb      	ldrh	r3, [r7, #20]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4413      	add	r3, r2
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	4619      	mov	r1, r3
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f9cc 	bl	8005588 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80051f0:	8abb      	ldrh	r3, [r7, #20]
 80051f2:	3301      	adds	r3, #1
 80051f4:	82bb      	strh	r3, [r7, #20]
 80051f6:	8aba      	ldrh	r2, [r7, #20]
 80051f8:	893b      	ldrh	r3, [r7, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d3f0      	bcc.n	80051e0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80051fe:	f7ff fe13 	bl	8004e28 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8005202:	7afb      	ldrb	r3, [r7, #11]
 8005204:	2b84      	cmp	r3, #132	; 0x84
 8005206:	d002      	beq.n	800520e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fa8f 	bl	800572c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	75fb      	strb	r3, [r7, #23]
 800521a:	e001      	b.n	8005220 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	715a      	strb	r2, [r3, #5]

    return status;
 800522c:	7dfb      	ldrb	r3, [r7, #23]
 800522e:	e000      	b.n	8005232 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b088      	sub	sp, #32
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	461a      	mov	r2, r3
 8005246:	460b      	mov	r3, r1
 8005248:	72fb      	strb	r3, [r7, #11]
 800524a:	4613      	mov	r3, r2
 800524c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	799b      	ldrb	r3, [r3, #6]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	d13d      	bne.n	80052d8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	795b      	ldrb	r3, [r3, #5]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005264:	2302      	movs	r3, #2
 8005266:	e038      	b.n	80052da <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 fa38 	bl	80056e4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005274:	f7ff fde8 	bl	8004e48 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005278:	7afb      	ldrb	r3, [r7, #11]
 800527a:	4619      	mov	r1, r3
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f983 	bl	8005588 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005282:	2100      	movs	r1, #0
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f97f 	bl	8005588 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800528a:	2300      	movs	r3, #0
 800528c:	82fb      	strh	r3, [r7, #22]
 800528e:	e009      	b.n	80052a4 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005290:	69b9      	ldr	r1, [r7, #24]
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 f9ce 	bl	8005634 <SUBGHZSPI_Receive>
      pData++;
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	3301      	adds	r3, #1
 800529c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800529e:	8afb      	ldrh	r3, [r7, #22]
 80052a0:	3301      	adds	r3, #1
 80052a2:	82fb      	strh	r3, [r7, #22]
 80052a4:	8afa      	ldrh	r2, [r7, #22]
 80052a6:	893b      	ldrh	r3, [r7, #8]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d3f1      	bcc.n	8005290 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80052ac:	f7ff fdbc 	bl	8004e28 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fa3b 	bl	800572c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	77fb      	strb	r3, [r7, #31]
 80052c2:	e001      	b.n	80052c8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	715a      	strb	r2, [r3, #5]

    return status;
 80052d4:	7ffb      	ldrb	r3, [r7, #31]
 80052d6:	e000      	b.n	80052da <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80052d8:	2302      	movs	r3, #2
  }
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3720      	adds	r7, #32
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b086      	sub	sp, #24
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	461a      	mov	r2, r3
 80052ee:	460b      	mov	r3, r1
 80052f0:	72fb      	strb	r3, [r7, #11]
 80052f2:	4613      	mov	r3, r2
 80052f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	799b      	ldrb	r3, [r3, #6]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d13e      	bne.n	800537e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	795b      	ldrb	r3, [r3, #5]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005308:	2302      	movs	r3, #2
 800530a:	e039      	b.n	8005380 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f9e6 	bl	80056e4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005318:	f7ff fd96 	bl	8004e48 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800531c:	210e      	movs	r1, #14
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f932 	bl	8005588 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005324:	7afb      	ldrb	r3, [r7, #11]
 8005326:	4619      	mov	r1, r3
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f92d 	bl	8005588 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800532e:	2300      	movs	r3, #0
 8005330:	82bb      	strh	r3, [r7, #20]
 8005332:	e00a      	b.n	800534a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005334:	8abb      	ldrh	r3, [r7, #20]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	4413      	add	r3, r2
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	4619      	mov	r1, r3
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f922 	bl	8005588 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005344:	8abb      	ldrh	r3, [r7, #20]
 8005346:	3301      	adds	r3, #1
 8005348:	82bb      	strh	r3, [r7, #20]
 800534a:	8aba      	ldrh	r2, [r7, #20]
 800534c:	893b      	ldrh	r3, [r7, #8]
 800534e:	429a      	cmp	r2, r3
 8005350:	d3f0      	bcc.n	8005334 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005352:	f7ff fd69 	bl	8004e28 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f9e8 	bl	800572c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	75fb      	strb	r3, [r7, #23]
 8005368:	e001      	b.n	800536e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	715a      	strb	r2, [r3, #5]

    return status;
 800537a:	7dfb      	ldrb	r3, [r7, #23]
 800537c:	e000      	b.n	8005380 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800537e:	2302      	movs	r3, #2
  }
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	461a      	mov	r2, r3
 8005394:	460b      	mov	r3, r1
 8005396:	72fb      	strb	r3, [r7, #11]
 8005398:	4613      	mov	r3, r2
 800539a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	799b      	ldrb	r3, [r3, #6]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d141      	bne.n	800542e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	795b      	ldrb	r3, [r3, #5]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e03c      	b.n	8005430 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f991 	bl	80056e4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80053c2:	f7ff fd41 	bl	8004e48 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80053c6:	211e      	movs	r1, #30
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f8dd 	bl	8005588 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80053ce:	7afb      	ldrb	r3, [r7, #11]
 80053d0:	4619      	mov	r1, r3
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 f8d8 	bl	8005588 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80053d8:	2100      	movs	r1, #0
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f8d4 	bl	8005588 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80053e0:	2300      	movs	r3, #0
 80053e2:	82fb      	strh	r3, [r7, #22]
 80053e4:	e009      	b.n	80053fa <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80053e6:	69b9      	ldr	r1, [r7, #24]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f923 	bl	8005634 <SUBGHZSPI_Receive>
      pData++;
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	3301      	adds	r3, #1
 80053f2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80053f4:	8afb      	ldrh	r3, [r7, #22]
 80053f6:	3301      	adds	r3, #1
 80053f8:	82fb      	strh	r3, [r7, #22]
 80053fa:	8afa      	ldrh	r2, [r7, #22]
 80053fc:	893b      	ldrh	r3, [r7, #8]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d3f1      	bcc.n	80053e6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005402:	f7ff fd11 	bl	8004e28 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f990 	bl	800572c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	77fb      	strb	r3, [r7, #31]
 8005418:	e001      	b.n	800541e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	715a      	strb	r2, [r3, #5]

    return status;
 800542a:	7ffb      	ldrb	r3, [r7, #31]
 800542c:	e000      	b.n	8005430 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800542e:	2302      	movs	r3, #2
  }
}
 8005430:	4618      	mov	r0, r3
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8005440:	2300      	movs	r3, #0
 8005442:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005444:	f107 020c 	add.w	r2, r7, #12
 8005448:	2302      	movs	r3, #2
 800544a:	2112      	movs	r1, #18
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff fef4 	bl	800523a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005452:	7b3b      	ldrb	r3, [r7, #12]
 8005454:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005456:	89fb      	ldrh	r3, [r7, #14]
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	b21a      	sxth	r2, r3
 800545c:	7b7b      	ldrb	r3, [r7, #13]
 800545e:	b21b      	sxth	r3, r3
 8005460:	4313      	orrs	r3, r2
 8005462:	b21b      	sxth	r3, r3
 8005464:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8005466:	f107 020c 	add.w	r2, r7, #12
 800546a:	2302      	movs	r3, #2
 800546c:	2102      	movs	r1, #2
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff fe84 	bl	800517c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005474:	89fb      	ldrh	r3, [r7, #14]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7fd f9e4 	bl	800284c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005484:	89fb      	ldrh	r3, [r7, #14]
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fd f9e9 	bl	8002868 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005496:	89fb      	ldrh	r3, [r7, #14]
 8005498:	089b      	lsrs	r3, r3, #2
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_SUBGHZ_IRQHandler+0x70>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fd fa38 	bl	8002918 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80054a8:	89fb      	ldrh	r3, [r7, #14]
 80054aa:	08db      	lsrs	r3, r3, #3
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_SUBGHZ_IRQHandler+0x82>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fd fa3d 	bl	8002934 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80054ba:	89fb      	ldrh	r3, [r7, #14]
 80054bc:	091b      	lsrs	r3, r3, #4
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <HAL_SUBGHZ_IRQHandler+0x94>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fd fa42 	bl	8002950 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80054cc:	89fb      	ldrh	r3, [r7, #14]
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7fd fa0f 	bl	80028fc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80054de:	89fb      	ldrh	r3, [r7, #14]
 80054e0:	099b      	lsrs	r3, r3, #6
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <HAL_SUBGHZ_IRQHandler+0xb8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fd f9ca 	bl	8002884 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80054f0:	89fb      	ldrh	r3, [r7, #14]
 80054f2:	09db      	lsrs	r3, r3, #7
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00e      	beq.n	800551a <HAL_SUBGHZ_IRQHandler+0xe2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80054fc:	89fb      	ldrh	r3, [r7, #14]
 80054fe:	0a1b      	lsrs	r3, r3, #8
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d004      	beq.n	8005512 <HAL_SUBGHZ_IRQHandler+0xda>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005508:	2101      	movs	r1, #1
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fd f9c8 	bl	80028a0 <HAL_SUBGHZ_CADStatusCallback>
 8005510:	e003      	b.n	800551a <HAL_SUBGHZ_IRQHandler+0xe2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005512:	2100      	movs	r1, #0
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7fd f9c3 	bl	80028a0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800551a:	89fb      	ldrh	r3, [r7, #14]
 800551c:	0a5b      	lsrs	r3, r3, #9
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_SUBGHZ_IRQHandler+0xf4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fd f9d8 	bl	80028dc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800552c:	89fb      	ldrh	r3, [r7, #14]
 800552e:	0b9b      	lsrs	r3, r3, #14
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <HAL_SUBGHZ_IRQHandler+0x106>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7fd fa17 	bl	800296c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800553e:	bf00      	nop
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005550:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <SUBGHZSPI_Init+0x3c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a0b      	ldr	r2, [pc, #44]	; (8005584 <SUBGHZSPI_Init+0x3c>)
 8005556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800555c:	4a09      	ldr	r2, [pc, #36]	; (8005584 <SUBGHZSPI_Init+0x3c>)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8005564:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005566:	4b07      	ldr	r3, [pc, #28]	; (8005584 <SUBGHZSPI_Init+0x3c>)
 8005568:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800556c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <SUBGHZSPI_Init+0x3c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a04      	ldr	r2, [pc, #16]	; (8005584 <SUBGHZSPI_Init+0x3c>)
 8005574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005578:	6013      	str	r3, [r2, #0]
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr
 8005584:	58010000 	.word	0x58010000

08005588 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005598:	4b23      	ldr	r3, [pc, #140]	; (8005628 <SUBGHZSPI_Transmit+0xa0>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	0cdb      	lsrs	r3, r3, #19
 80055a6:	2264      	movs	r2, #100	; 0x64
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d105      	bne.n	80055c0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	609a      	str	r2, [r3, #8]
      break;
 80055be:	e008      	b.n	80055d2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80055c6:	4b19      	ldr	r3, [pc, #100]	; (800562c <SUBGHZSPI_Transmit+0xa4>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d1ed      	bne.n	80055ae <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80055d2:	4b17      	ldr	r3, [pc, #92]	; (8005630 <SUBGHZSPI_Transmit+0xa8>)
 80055d4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	78fa      	ldrb	r2, [r7, #3]
 80055da:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80055dc:	4b12      	ldr	r3, [pc, #72]	; (8005628 <SUBGHZSPI_Transmit+0xa0>)
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	0cdb      	lsrs	r3, r3, #19
 80055ea:	2264      	movs	r2, #100	; 0x64
 80055ec:	fb02 f303 	mul.w	r3, r2, r3
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d105      	bne.n	8005604 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	609a      	str	r2, [r3, #8]
      break;
 8005602:	e008      	b.n	8005616 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3b01      	subs	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800560a:	4b08      	ldr	r3, [pc, #32]	; (800562c <SUBGHZSPI_Transmit+0xa4>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b01      	cmp	r3, #1
 8005614:	d1ed      	bne.n	80055f2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005616:	4b05      	ldr	r3, [pc, #20]	; (800562c <SUBGHZSPI_Transmit+0xa4>)
 8005618:	68db      	ldr	r3, [r3, #12]

  return status;
 800561a:	7dfb      	ldrb	r3, [r7, #23]
}
 800561c:	4618      	mov	r0, r3
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000004 	.word	0x20000004
 800562c:	58010000 	.word	0x58010000
 8005630:	5801000c 	.word	0x5801000c

08005634 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005642:	4b25      	ldr	r3, [pc, #148]	; (80056d8 <SUBGHZSPI_Receive+0xa4>)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4613      	mov	r3, r2
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	0cdb      	lsrs	r3, r3, #19
 8005650:	2264      	movs	r2, #100	; 0x64
 8005652:	fb02 f303 	mul.w	r3, r2, r3
 8005656:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d105      	bne.n	800566a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	609a      	str	r2, [r3, #8]
      break;
 8005668:	e008      	b.n	800567c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3b01      	subs	r3, #1
 800566e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005670:	4b1a      	ldr	r3, [pc, #104]	; (80056dc <SUBGHZSPI_Receive+0xa8>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b02      	cmp	r3, #2
 800567a:	d1ed      	bne.n	8005658 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800567c:	4b18      	ldr	r3, [pc, #96]	; (80056e0 <SUBGHZSPI_Receive+0xac>)
 800567e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	22ff      	movs	r2, #255	; 0xff
 8005684:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005686:	4b14      	ldr	r3, [pc, #80]	; (80056d8 <SUBGHZSPI_Receive+0xa4>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4613      	mov	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	1a9b      	subs	r3, r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	0cdb      	lsrs	r3, r3, #19
 8005694:	2264      	movs	r2, #100	; 0x64
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d105      	bne.n	80056ae <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	609a      	str	r2, [r3, #8]
      break;
 80056ac:	e008      	b.n	80056c0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <SUBGHZSPI_Receive+0xa8>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d1ed      	bne.n	800569c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <SUBGHZSPI_Receive+0xa8>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	701a      	strb	r2, [r3, #0]

  return status;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bc80      	pop	{r7}
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	20000004 	.word	0x20000004
 80056dc:	58010000 	.word	0x58010000
 80056e0:	5801000c 	.word	0x5801000c

080056e4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	791b      	ldrb	r3, [r3, #4]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d111      	bne.n	8005718 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80056f4:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <SUBGHZ_CheckDeviceReady+0x44>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	4613      	mov	r3, r2
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	4413      	add	r3, r2
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	0c1b      	lsrs	r3, r3, #16
 8005702:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005704:	f7ff fba0 	bl	8004e48 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3b01      	subs	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f9      	bne.n	8005708 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005714:	f7ff fb88 	bl	8004e28 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f807 	bl	800572c <SUBGHZ_WaitOnBusy>
 800571e:	4603      	mov	r3, r0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20000004 	.word	0x20000004

0800572c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005738:	4b12      	ldr	r3, [pc, #72]	; (8005784 <SUBGHZ_WaitOnBusy+0x58>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4613      	mov	r3, r2
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	4413      	add	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	0d1b      	lsrs	r3, r3, #20
 8005746:	2264      	movs	r2, #100	; 0x64
 8005748:	fb02 f303 	mul.w	r3, r2, r3
 800574c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800574e:	f7ff fba9 	bl	8004ea4 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8005752:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d105      	bne.n	8005766 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2202      	movs	r2, #2
 8005762:	609a      	str	r2, [r3, #8]
      break;
 8005764:	e009      	b.n	800577a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3b01      	subs	r3, #1
 800576a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800576c:	f7ff fb88 	bl	8004e80 <LL_PWR_IsActiveFlag_RFBUSYS>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4013      	ands	r3, r2
 8005776:	2b01      	cmp	r3, #1
 8005778:	d0e9      	beq.n	800574e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800577a:	7dfb      	ldrb	r3, [r7, #23]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000004 	.word	0x20000004

08005788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e049      	b.n	800582e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f841 	bl	8005836 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	f000 f9ce 	bl	8005b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	d001      	beq.n	8005860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e036      	b.n	80058ce <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a16      	ldr	r2, [pc, #88]	; (80058d8 <HAL_TIM_Base_Start_IT+0x90>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d004      	beq.n	800588c <HAL_TIM_Base_Start_IT+0x44>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588a:	d115      	bne.n	80058b8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	4b12      	ldr	r3, [pc, #72]	; (80058dc <HAL_TIM_Base_Start_IT+0x94>)
 8005894:	4013      	ands	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b06      	cmp	r3, #6
 800589c:	d015      	beq.n	80058ca <HAL_TIM_Base_Start_IT+0x82>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a4:	d011      	beq.n	80058ca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 0201 	orr.w	r2, r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b6:	e008      	b.n	80058ca <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	e000      	b.n	80058cc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr
 80058d8:	40012c00 	.word	0x40012c00
 80058dc:	00010007 	.word	0x00010007

080058e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d122      	bne.n	800593c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b02      	cmp	r3, #2
 8005902:	d11b      	bne.n	800593c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0202 	mvn.w	r2, #2
 800590c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f904 	bl	8005b30 <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f8f7 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f906 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b04      	cmp	r3, #4
 8005948:	d122      	bne.n	8005990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b04      	cmp	r3, #4
 8005956:	d11b      	bne.n	8005990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0204 	mvn.w	r2, #4
 8005960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f8da 	bl	8005b30 <HAL_TIM_IC_CaptureCallback>
 800597c:	e005      	b.n	800598a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f8cd 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f8dc 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0308 	and.w	r3, r3, #8
 800599a:	2b08      	cmp	r3, #8
 800599c:	d122      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d11b      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0208 	mvn.w	r2, #8
 80059b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2204      	movs	r2, #4
 80059ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f8b0 	bl	8005b30 <HAL_TIM_IC_CaptureCallback>
 80059d0:	e005      	b.n	80059de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f8a3 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f8b2 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d122      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0310 	and.w	r3, r3, #16
 80059fc:	2b10      	cmp	r3, #16
 80059fe:	d11b      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0210 	mvn.w	r2, #16
 8005a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f886 	bl	8005b30 <HAL_TIM_IC_CaptureCallback>
 8005a24:	e005      	b.n	8005a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f879 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f888 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d10e      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d107      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0201 	mvn.w	r2, #1
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fa ff98 	bl	8000994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	2b80      	cmp	r3, #128	; 0x80
 8005a70:	d10e      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7c:	2b80      	cmp	r3, #128	; 0x80
 8005a7e:	d107      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8d7 	bl	8005c3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a9e:	d10e      	bne.n	8005abe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aaa:	2b80      	cmp	r3, #128	; 0x80
 8005aac:	d107      	bne.n	8005abe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f8c9 	bl	8005c50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	d10e      	bne.n	8005aea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b40      	cmp	r3, #64	; 0x40
 8005ad8:	d107      	bne.n	8005aea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f835 	bl	8005b54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d10e      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b20      	cmp	r3, #32
 8005b04:	d107      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f06f 0220 	mvn.w	r2, #32
 8005b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f88b 	bl	8005c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b16:	bf00      	nop
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr

08005b30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr

08005b42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr

08005b54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bc80      	pop	{r7}
 8005b64:	4770      	bx	lr
	...

08005b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a29      	ldr	r2, [pc, #164]	; (8005c20 <TIM_Base_SetConfig+0xb8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_Base_SetConfig+0x20>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b86:	d108      	bne.n	8005b9a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a20      	ldr	r2, [pc, #128]	; (8005c20 <TIM_Base_SetConfig+0xb8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00b      	beq.n	8005bba <TIM_Base_SetConfig+0x52>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba8:	d007      	beq.n	8005bba <TIM_Base_SetConfig+0x52>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a1d      	ldr	r2, [pc, #116]	; (8005c24 <TIM_Base_SetConfig+0xbc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d003      	beq.n	8005bba <TIM_Base_SetConfig+0x52>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a1c      	ldr	r2, [pc, #112]	; (8005c28 <TIM_Base_SetConfig+0xc0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d108      	bne.n	8005bcc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a0b      	ldr	r2, [pc, #44]	; (8005c20 <TIM_Base_SetConfig+0xb8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d007      	beq.n	8005c08 <TIM_Base_SetConfig+0xa0>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a0a      	ldr	r2, [pc, #40]	; (8005c24 <TIM_Base_SetConfig+0xbc>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_Base_SetConfig+0xa0>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a09      	ldr	r2, [pc, #36]	; (8005c28 <TIM_Base_SetConfig+0xc0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d103      	bne.n	8005c10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	615a      	str	r2, [r3, #20]
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bc80      	pop	{r7}
 8005c1e:	4770      	bx	lr
 8005c20:	40012c00 	.word	0x40012c00
 8005c24:	40014400 	.word	0x40014400
 8005c28:	40014800 	.word	0x40014800

08005c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bc80      	pop	{r7}
 8005c4e:	4770      	bx	lr

08005c50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bc80      	pop	{r7}
 8005c60:	4770      	bx	lr

08005c62 <LL_RCC_GetUSARTClockSource>:
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	401a      	ands	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	041b      	lsls	r3, r3, #16
 8005c7a:	4313      	orrs	r3, r2
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bc80      	pop	{r7}
 8005c84:	4770      	bx	lr

08005c86 <LL_RCC_GetLPUARTClockSource>:
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4013      	ands	r3, r2
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e042      	b.n	8005d3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d106      	bne.n	8005cce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7fb fc59 	bl	8001580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2224      	movs	r2, #36	; 0x24
 8005cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fbfa 	bl	80064e0 <UART_SetConfig>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e022      	b.n	8005d3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fe62 	bl	80069c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fee8 	bl	8006b0a <UART_CheckIdleState>
 8005d3a:	4603      	mov	r3, r0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08a      	sub	sp, #40	; 0x28
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	4613      	mov	r3, r2
 8005d52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d173      	bne.n	8005e46 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <HAL_UART_Transmit+0x26>
 8005d64:	88fb      	ldrh	r3, [r7, #6]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e06c      	b.n	8005e48 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2221      	movs	r2, #33	; 0x21
 8005d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d7e:	f7fc fe59 	bl	8002a34 <HAL_GetTick>
 8005d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	88fa      	ldrh	r2, [r7, #6]
 8005d88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	88fa      	ldrh	r2, [r7, #6]
 8005d90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9c:	d108      	bne.n	8005db0 <HAL_UART_Transmit+0x6c>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	e003      	b.n	8005db8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005db8:	e02c      	b.n	8005e14 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2180      	movs	r1, #128	; 0x80
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 feee 	bl	8006ba6 <UART_WaitOnFlagUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e039      	b.n	8005e48 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10b      	bne.n	8005df2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005de8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	3302      	adds	r3, #2
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	e007      	b.n	8005e02 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1cc      	bne.n	8005dba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2200      	movs	r2, #0
 8005e28:	2140      	movs	r1, #64	; 0x40
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 febb 	bl	8006ba6 <UART_WaitOnFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e006      	b.n	8005e48 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	e000      	b.n	8005e48 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005e46:	2302      	movs	r3, #2
  }
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3720      	adds	r7, #32
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b0ba      	sub	sp, #232	; 0xe8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e7e:	4013      	ands	r3, r2
 8005e80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d11b      	bne.n	8005ec4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d015      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e9c:	f003 0320 	and.w	r3, r3, #32
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d105      	bne.n	8005eb0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d009      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 82e3 	beq.w	8006480 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	4798      	blx	r3
      }
      return;
 8005ec2:	e2dd      	b.n	8006480 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 8123 	beq.w	8006114 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ece:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005ed2:	4b8d      	ldr	r3, [pc, #564]	; (8006108 <HAL_UART_IRQHandler+0x2b8>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005eda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ede:	4b8b      	ldr	r3, [pc, #556]	; (800610c <HAL_UART_IRQHandler+0x2bc>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 8116 	beq.w	8006114 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d011      	beq.n	8005f18 <HAL_UART_IRQHandler+0xc8>
 8005ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00b      	beq.n	8005f18 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2201      	movs	r2, #1
 8005f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0e:	f043 0201 	orr.w	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d011      	beq.n	8005f48 <HAL_UART_IRQHandler+0xf8>
 8005f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00b      	beq.n	8005f48 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2202      	movs	r2, #2
 8005f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3e:	f043 0204 	orr.w	r2, r3, #4
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d011      	beq.n	8005f78 <HAL_UART_IRQHandler+0x128>
 8005f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2204      	movs	r2, #4
 8005f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6e:	f043 0202 	orr.w	r2, r3, #2
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7c:	f003 0308 	and.w	r3, r3, #8
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d017      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f88:	f003 0320 	and.w	r3, r3, #32
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d105      	bne.n	8005f9c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f94:	4b5c      	ldr	r3, [pc, #368]	; (8006108 <HAL_UART_IRQHandler+0x2b8>)
 8005f96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00b      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005faa:	f043 0208 	orr.w	r2, r3, #8
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d012      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x196>
 8005fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00c      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fdc:	f043 0220 	orr.w	r2, r3, #32
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 8249 	beq.w	8006484 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff6:	f003 0320 	and.w	r3, r3, #32
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d013      	beq.n	8006026 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d105      	bne.n	8006016 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800600a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800600e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d005      	beq.n	800604a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800603e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006042:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006046:	2b00      	cmp	r3, #0
 8006048:	d054      	beq.n	80060f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 ff5a 	bl	8006f04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605a:	2b40      	cmp	r3, #64	; 0x40
 800605c:	d146      	bne.n	80060ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3308      	adds	r3, #8
 8006064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800607c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3308      	adds	r3, #8
 8006086:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800608a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800608e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1d9      	bne.n	800605e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d017      	beq.n	80060e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060ba:	4a15      	ldr	r2, [pc, #84]	; (8006110 <HAL_UART_IRQHandler+0x2c0>)
 80060bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fc ff7f 	bl	8002fc8 <HAL_DMA_Abort_IT>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d019      	beq.n	8006104 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80060de:	4610      	mov	r0, r2
 80060e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e2:	e00f      	b.n	8006104 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f9f2 	bl	80064ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ea:	e00b      	b.n	8006104 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f9ee 	bl	80064ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f2:	e007      	b.n	8006104 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f9ea 	bl	80064ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006102:	e1bf      	b.n	8006484 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006104:	bf00      	nop
    return;
 8006106:	e1bd      	b.n	8006484 <HAL_UART_IRQHandler+0x634>
 8006108:	10000001 	.word	0x10000001
 800610c:	04000120 	.word	0x04000120
 8006110:	080071b9 	.word	0x080071b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006118:	2b01      	cmp	r3, #1
 800611a:	f040 8153 	bne.w	80063c4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800611e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 814c 	beq.w	80063c4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006130:	f003 0310 	and.w	r3, r3, #16
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 8145 	beq.w	80063c4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2210      	movs	r2, #16
 8006140:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614c:	2b40      	cmp	r3, #64	; 0x40
 800614e:	f040 80bb 	bne.w	80062c8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006160:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 818f 	beq.w	8006488 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006170:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006174:	429a      	cmp	r2, r3
 8006176:	f080 8187 	bcs.w	8006488 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006180:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	f040 8087 	bne.w	80062a6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	461a      	mov	r2, r3
 80061be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1da      	bne.n	8006198 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3308      	adds	r3, #8
 80061e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061f4:	f023 0301 	bic.w	r3, r3, #1
 80061f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3308      	adds	r3, #8
 8006202:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006206:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800620a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800620e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e1      	bne.n	80061e2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3308      	adds	r3, #8
 8006224:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800622e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3308      	adds	r3, #8
 800623e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006242:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006244:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006248:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e3      	bne.n	800621e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006274:	f023 0310 	bic.w	r3, r3, #16
 8006278:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006286:	65bb      	str	r3, [r7, #88]	; 0x58
 8006288:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800628c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e4      	bne.n	8006264 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fc fe33 	bl	8002f0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	b29b      	uxth	r3, r3
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7fb f9e1 	bl	8001688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062c6:	e0df      	b.n	8006488 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 80d1 	beq.w	800648c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80062ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 80cc 	beq.w	800648c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006308:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	461a      	mov	r2, r3
 8006312:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006316:	647b      	str	r3, [r7, #68]	; 0x44
 8006318:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800631c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e4      	bne.n	80062f4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3308      	adds	r3, #8
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	623b      	str	r3, [r7, #32]
   return(result);
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006340:	f023 0301 	bic.w	r3, r3, #1
 8006344:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006352:	633a      	str	r2, [r7, #48]	; 0x30
 8006354:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e1      	bne.n	800632a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	60fb      	str	r3, [r7, #12]
   return(result);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0310 	bic.w	r3, r3, #16
 800638e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800639c:	61fb      	str	r3, [r7, #28]
 800639e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a0:	69b9      	ldr	r1, [r7, #24]
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	e841 2300 	strex	r3, r2, [r1]
 80063a8:	617b      	str	r3, [r7, #20]
   return(result);
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1e4      	bne.n	800637a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063ba:	4619      	mov	r1, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7fb f963 	bl	8001688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063c2:	e063      	b.n	800648c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00e      	beq.n	80063ee <HAL_UART_IRQHandler+0x59e>
 80063d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 ff27 	bl	800723a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063ec:	e051      	b.n	8006492 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80063ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d014      	beq.n	8006424 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80063fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006402:	2b00      	cmp	r3, #0
 8006404:	d105      	bne.n	8006412 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800640a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d008      	beq.n	8006424 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006416:	2b00      	cmp	r3, #0
 8006418:	d03a      	beq.n	8006490 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	4798      	blx	r3
    }
    return;
 8006422:	e035      	b.n	8006490 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642c:	2b00      	cmp	r3, #0
 800642e:	d009      	beq.n	8006444 <HAL_UART_IRQHandler+0x5f4>
 8006430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fed1 	bl	80071e4 <UART_EndTransmit_IT>
    return;
 8006442:	e026      	b.n	8006492 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d009      	beq.n	8006464 <HAL_UART_IRQHandler+0x614>
 8006450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006454:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fefe 	bl	800725e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006462:	e016      	b.n	8006492 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d010      	beq.n	8006492 <HAL_UART_IRQHandler+0x642>
 8006470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006474:	2b00      	cmp	r3, #0
 8006476:	da0c      	bge.n	8006492 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fee7 	bl	800724c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800647e:	e008      	b.n	8006492 <HAL_UART_IRQHandler+0x642>
      return;
 8006480:	bf00      	nop
 8006482:	e006      	b.n	8006492 <HAL_UART_IRQHandler+0x642>
    return;
 8006484:	bf00      	nop
 8006486:	e004      	b.n	8006492 <HAL_UART_IRQHandler+0x642>
      return;
 8006488:	bf00      	nop
 800648a:	e002      	b.n	8006492 <HAL_UART_IRQHandler+0x642>
      return;
 800648c:	bf00      	nop
 800648e:	e000      	b.n	8006492 <HAL_UART_IRQHandler+0x642>
    return;
 8006490:	bf00      	nop
  }
}
 8006492:	37e8      	adds	r7, #232	; 0xe8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bc80      	pop	{r7}
 80064a8:	4770      	bx	lr

080064aa <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bc80      	pop	{r7}
 80064ba:	4770      	bx	lr

080064bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bc80      	pop	{r7}
 80064cc:	4770      	bx	lr

080064ce <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b083      	sub	sp, #12
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr

080064e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064e4:	b08c      	sub	sp, #48	; 0x30
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	431a      	orrs	r2, r3
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	431a      	orrs	r2, r3
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	4313      	orrs	r3, r2
 8006506:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4b94      	ldr	r3, [pc, #592]	; (8006760 <UART_SetConfig+0x280>)
 8006510:	4013      	ands	r3, r2
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	6812      	ldr	r2, [r2, #0]
 8006516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006518:	430b      	orrs	r3, r1
 800651a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a89      	ldr	r2, [pc, #548]	; (8006764 <UART_SetConfig+0x284>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d004      	beq.n	800654c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006548:	4313      	orrs	r3, r2
 800654a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006556:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006560:	430b      	orrs	r3, r1
 8006562:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	f023 010f 	bic.w	r1, r3, #15
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a7a      	ldr	r2, [pc, #488]	; (8006768 <UART_SetConfig+0x288>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d127      	bne.n	80065d4 <UART_SetConfig+0xf4>
 8006584:	2003      	movs	r0, #3
 8006586:	f7ff fb6c 	bl	8005c62 <LL_RCC_GetUSARTClockSource>
 800658a:	4603      	mov	r3, r0
 800658c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006590:	2b03      	cmp	r3, #3
 8006592:	d81b      	bhi.n	80065cc <UART_SetConfig+0xec>
 8006594:	a201      	add	r2, pc, #4	; (adr r2, 800659c <UART_SetConfig+0xbc>)
 8006596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659a:	bf00      	nop
 800659c:	080065ad 	.word	0x080065ad
 80065a0:	080065bd 	.word	0x080065bd
 80065a4:	080065b5 	.word	0x080065b5
 80065a8:	080065c5 	.word	0x080065c5
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b2:	e080      	b.n	80066b6 <UART_SetConfig+0x1d6>
 80065b4:	2302      	movs	r3, #2
 80065b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ba:	e07c      	b.n	80066b6 <UART_SetConfig+0x1d6>
 80065bc:	2304      	movs	r3, #4
 80065be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c2:	e078      	b.n	80066b6 <UART_SetConfig+0x1d6>
 80065c4:	2308      	movs	r3, #8
 80065c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ca:	e074      	b.n	80066b6 <UART_SetConfig+0x1d6>
 80065cc:	2310      	movs	r3, #16
 80065ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065d2:	e070      	b.n	80066b6 <UART_SetConfig+0x1d6>
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a64      	ldr	r2, [pc, #400]	; (800676c <UART_SetConfig+0x28c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d138      	bne.n	8006650 <UART_SetConfig+0x170>
 80065de:	200c      	movs	r0, #12
 80065e0:	f7ff fb3f 	bl	8005c62 <LL_RCC_GetUSARTClockSource>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80065ea:	2b0c      	cmp	r3, #12
 80065ec:	d82c      	bhi.n	8006648 <UART_SetConfig+0x168>
 80065ee:	a201      	add	r2, pc, #4	; (adr r2, 80065f4 <UART_SetConfig+0x114>)
 80065f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f4:	08006629 	.word	0x08006629
 80065f8:	08006649 	.word	0x08006649
 80065fc:	08006649 	.word	0x08006649
 8006600:	08006649 	.word	0x08006649
 8006604:	08006639 	.word	0x08006639
 8006608:	08006649 	.word	0x08006649
 800660c:	08006649 	.word	0x08006649
 8006610:	08006649 	.word	0x08006649
 8006614:	08006631 	.word	0x08006631
 8006618:	08006649 	.word	0x08006649
 800661c:	08006649 	.word	0x08006649
 8006620:	08006649 	.word	0x08006649
 8006624:	08006641 	.word	0x08006641
 8006628:	2300      	movs	r3, #0
 800662a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800662e:	e042      	b.n	80066b6 <UART_SetConfig+0x1d6>
 8006630:	2302      	movs	r3, #2
 8006632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006636:	e03e      	b.n	80066b6 <UART_SetConfig+0x1d6>
 8006638:	2304      	movs	r3, #4
 800663a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800663e:	e03a      	b.n	80066b6 <UART_SetConfig+0x1d6>
 8006640:	2308      	movs	r3, #8
 8006642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006646:	e036      	b.n	80066b6 <UART_SetConfig+0x1d6>
 8006648:	2310      	movs	r3, #16
 800664a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800664e:	e032      	b.n	80066b6 <UART_SetConfig+0x1d6>
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a43      	ldr	r2, [pc, #268]	; (8006764 <UART_SetConfig+0x284>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d12a      	bne.n	80066b0 <UART_SetConfig+0x1d0>
 800665a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800665e:	f7ff fb12 	bl	8005c86 <LL_RCC_GetLPUARTClockSource>
 8006662:	4603      	mov	r3, r0
 8006664:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006668:	d01a      	beq.n	80066a0 <UART_SetConfig+0x1c0>
 800666a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800666e:	d81b      	bhi.n	80066a8 <UART_SetConfig+0x1c8>
 8006670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006674:	d00c      	beq.n	8006690 <UART_SetConfig+0x1b0>
 8006676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800667a:	d815      	bhi.n	80066a8 <UART_SetConfig+0x1c8>
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <UART_SetConfig+0x1a8>
 8006680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006684:	d008      	beq.n	8006698 <UART_SetConfig+0x1b8>
 8006686:	e00f      	b.n	80066a8 <UART_SetConfig+0x1c8>
 8006688:	2300      	movs	r3, #0
 800668a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800668e:	e012      	b.n	80066b6 <UART_SetConfig+0x1d6>
 8006690:	2302      	movs	r3, #2
 8006692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006696:	e00e      	b.n	80066b6 <UART_SetConfig+0x1d6>
 8006698:	2304      	movs	r3, #4
 800669a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800669e:	e00a      	b.n	80066b6 <UART_SetConfig+0x1d6>
 80066a0:	2308      	movs	r3, #8
 80066a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066a6:	e006      	b.n	80066b6 <UART_SetConfig+0x1d6>
 80066a8:	2310      	movs	r3, #16
 80066aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ae:	e002      	b.n	80066b6 <UART_SetConfig+0x1d6>
 80066b0:	2310      	movs	r3, #16
 80066b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a2a      	ldr	r2, [pc, #168]	; (8006764 <UART_SetConfig+0x284>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	f040 80a4 	bne.w	800680a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d823      	bhi.n	8006712 <UART_SetConfig+0x232>
 80066ca:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <UART_SetConfig+0x1f0>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	08006713 	.word	0x08006713
 80066d8:	080066fd 	.word	0x080066fd
 80066dc:	08006713 	.word	0x08006713
 80066e0:	08006703 	.word	0x08006703
 80066e4:	08006713 	.word	0x08006713
 80066e8:	08006713 	.word	0x08006713
 80066ec:	08006713 	.word	0x08006713
 80066f0:	0800670b 	.word	0x0800670b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f4:	f7fe f858 	bl	80047a8 <HAL_RCC_GetPCLK1Freq>
 80066f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066fa:	e010      	b.n	800671e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066fc:	4b1c      	ldr	r3, [pc, #112]	; (8006770 <UART_SetConfig+0x290>)
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006700:	e00d      	b.n	800671e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006702:	f7fd ff9d 	bl	8004640 <HAL_RCC_GetSysClockFreq>
 8006706:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006708:	e009      	b.n	800671e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800670a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006710:	e005      	b.n	800671e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800671c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8137 	beq.w	8006994 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	4a12      	ldr	r2, [pc, #72]	; (8006774 <UART_SetConfig+0x294>)
 800672c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006730:	461a      	mov	r2, r3
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	fbb3 f3f2 	udiv	r3, r3, r2
 8006738:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	4413      	add	r3, r2
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	429a      	cmp	r2, r3
 8006748:	d305      	bcc.n	8006756 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	429a      	cmp	r2, r3
 8006754:	d910      	bls.n	8006778 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800675c:	e11a      	b.n	8006994 <UART_SetConfig+0x4b4>
 800675e:	bf00      	nop
 8006760:	cfff69f3 	.word	0xcfff69f3
 8006764:	40008000 	.word	0x40008000
 8006768:	40013800 	.word	0x40013800
 800676c:	40004400 	.word	0x40004400
 8006770:	00f42400 	.word	0x00f42400
 8006774:	08009634 	.word	0x08009634
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	2200      	movs	r2, #0
 800677c:	60bb      	str	r3, [r7, #8]
 800677e:	60fa      	str	r2, [r7, #12]
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	4a8e      	ldr	r2, [pc, #568]	; (80069c0 <UART_SetConfig+0x4e0>)
 8006786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800678a:	b29b      	uxth	r3, r3
 800678c:	2200      	movs	r2, #0
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	607a      	str	r2, [r7, #4]
 8006792:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006796:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800679a:	f7f9 fd49 	bl	8000230 <__aeabi_uldivmod>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4610      	mov	r0, r2
 80067a4:	4619      	mov	r1, r3
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	f04f 0300 	mov.w	r3, #0
 80067ae:	020b      	lsls	r3, r1, #8
 80067b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067b4:	0202      	lsls	r2, r0, #8
 80067b6:	6979      	ldr	r1, [r7, #20]
 80067b8:	6849      	ldr	r1, [r1, #4]
 80067ba:	0849      	lsrs	r1, r1, #1
 80067bc:	2000      	movs	r0, #0
 80067be:	460c      	mov	r4, r1
 80067c0:	4605      	mov	r5, r0
 80067c2:	eb12 0804 	adds.w	r8, r2, r4
 80067c6:	eb43 0905 	adc.w	r9, r3, r5
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	469a      	mov	sl, r3
 80067d2:	4693      	mov	fp, r2
 80067d4:	4652      	mov	r2, sl
 80067d6:	465b      	mov	r3, fp
 80067d8:	4640      	mov	r0, r8
 80067da:	4649      	mov	r1, r9
 80067dc:	f7f9 fd28 	bl	8000230 <__aeabi_uldivmod>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4613      	mov	r3, r2
 80067e6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067ee:	d308      	bcc.n	8006802 <UART_SetConfig+0x322>
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067f6:	d204      	bcs.n	8006802 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6a3a      	ldr	r2, [r7, #32]
 80067fe:	60da      	str	r2, [r3, #12]
 8006800:	e0c8      	b.n	8006994 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006808:	e0c4      	b.n	8006994 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006812:	d167      	bne.n	80068e4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8006814:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006818:	2b08      	cmp	r3, #8
 800681a:	d828      	bhi.n	800686e <UART_SetConfig+0x38e>
 800681c:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <UART_SetConfig+0x344>)
 800681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006822:	bf00      	nop
 8006824:	08006849 	.word	0x08006849
 8006828:	08006851 	.word	0x08006851
 800682c:	08006859 	.word	0x08006859
 8006830:	0800686f 	.word	0x0800686f
 8006834:	0800685f 	.word	0x0800685f
 8006838:	0800686f 	.word	0x0800686f
 800683c:	0800686f 	.word	0x0800686f
 8006840:	0800686f 	.word	0x0800686f
 8006844:	08006867 	.word	0x08006867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006848:	f7fd ffae 	bl	80047a8 <HAL_RCC_GetPCLK1Freq>
 800684c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800684e:	e014      	b.n	800687a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006850:	f7fd ffbc 	bl	80047cc <HAL_RCC_GetPCLK2Freq>
 8006854:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006856:	e010      	b.n	800687a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006858:	4b5a      	ldr	r3, [pc, #360]	; (80069c4 <UART_SetConfig+0x4e4>)
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800685c:	e00d      	b.n	800687a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800685e:	f7fd feef 	bl	8004640 <HAL_RCC_GetSysClockFreq>
 8006862:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006864:	e009      	b.n	800687a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800686c:	e005      	b.n	800687a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006878:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8089 	beq.w	8006994 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	4a4e      	ldr	r2, [pc, #312]	; (80069c0 <UART_SetConfig+0x4e0>)
 8006888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800688c:	461a      	mov	r2, r3
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	fbb3 f3f2 	udiv	r3, r3, r2
 8006894:	005a      	lsls	r2, r3, #1
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	085b      	lsrs	r3, r3, #1
 800689c:	441a      	add	r2, r3
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	2b0f      	cmp	r3, #15
 80068ac:	d916      	bls.n	80068dc <UART_SetConfig+0x3fc>
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b4:	d212      	bcs.n	80068dc <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f023 030f 	bic.w	r3, r3, #15
 80068be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	8bfb      	ldrh	r3, [r7, #30]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	8bfa      	ldrh	r2, [r7, #30]
 80068d8:	60da      	str	r2, [r3, #12]
 80068da:	e05b      	b.n	8006994 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068e2:	e057      	b.n	8006994 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d828      	bhi.n	800693e <UART_SetConfig+0x45e>
 80068ec:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <UART_SetConfig+0x414>)
 80068ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f2:	bf00      	nop
 80068f4:	08006919 	.word	0x08006919
 80068f8:	08006921 	.word	0x08006921
 80068fc:	08006929 	.word	0x08006929
 8006900:	0800693f 	.word	0x0800693f
 8006904:	0800692f 	.word	0x0800692f
 8006908:	0800693f 	.word	0x0800693f
 800690c:	0800693f 	.word	0x0800693f
 8006910:	0800693f 	.word	0x0800693f
 8006914:	08006937 	.word	0x08006937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006918:	f7fd ff46 	bl	80047a8 <HAL_RCC_GetPCLK1Freq>
 800691c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800691e:	e014      	b.n	800694a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006920:	f7fd ff54 	bl	80047cc <HAL_RCC_GetPCLK2Freq>
 8006924:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006926:	e010      	b.n	800694a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006928:	4b26      	ldr	r3, [pc, #152]	; (80069c4 <UART_SetConfig+0x4e4>)
 800692a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800692c:	e00d      	b.n	800694a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800692e:	f7fd fe87 	bl	8004640 <HAL_RCC_GetSysClockFreq>
 8006932:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006934:	e009      	b.n	800694a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800693c:	e005      	b.n	800694a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006948:	bf00      	nop
    }

    if (pclk != 0U)
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	d021      	beq.n	8006994 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	4a1a      	ldr	r2, [pc, #104]	; (80069c0 <UART_SetConfig+0x4e0>)
 8006956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800695a:	461a      	mov	r2, r3
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	085b      	lsrs	r3, r3, #1
 8006968:	441a      	add	r2, r3
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006972:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	2b0f      	cmp	r3, #15
 8006978:	d909      	bls.n	800698e <UART_SetConfig+0x4ae>
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006980:	d205      	bcs.n	800698e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	b29a      	uxth	r2, r3
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60da      	str	r2, [r3, #12]
 800698c:	e002      	b.n	8006994 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2201      	movs	r2, #1
 8006998:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	2201      	movs	r2, #1
 80069a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2200      	movs	r2, #0
 80069a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2200      	movs	r2, #0
 80069ae:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80069b0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3730      	adds	r7, #48	; 0x30
 80069b8:	46bd      	mov	sp, r7
 80069ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069be:	bf00      	nop
 80069c0:	08009634 	.word	0x08009634
 80069c4:	00f42400 	.word	0x00f42400

080069c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00a      	beq.n	8006a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00a      	beq.n	8006a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01a      	beq.n	8006ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ac6:	d10a      	bne.n	8006ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	605a      	str	r2, [r3, #4]
  }
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr

08006b0a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b086      	sub	sp, #24
 8006b0e:	af02      	add	r7, sp, #8
 8006b10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b1a:	f7fb ff8b 	bl	8002a34 <HAL_GetTick>
 8006b1e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0308 	and.w	r3, r3, #8
 8006b2a:	2b08      	cmp	r3, #8
 8006b2c:	d10e      	bne.n	8006b4c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f832 	bl	8006ba6 <UART_WaitOnFlagUntilTimeout>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e028      	b.n	8006b9e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d10e      	bne.n	8006b78 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f81c 	bl	8006ba6 <UART_WaitOnFlagUntilTimeout>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e012      	b.n	8006b9e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b09c      	sub	sp, #112	; 0x70
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	603b      	str	r3, [r7, #0]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb6:	e0a9      	b.n	8006d0c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbe:	f000 80a5 	beq.w	8006d0c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bc2:	f7fb ff37 	bl	8002a34 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d302      	bcc.n	8006bd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d140      	bne.n	8006c5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be0:	e853 3f00 	ldrex	r3, [r3]
 8006be4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bec:	667b      	str	r3, [r7, #100]	; 0x64
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bf8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1e6      	bne.n	8006bd8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3308      	adds	r3, #8
 8006c10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1c:	f023 0301 	bic.w	r3, r3, #1
 8006c20:	663b      	str	r3, [r7, #96]	; 0x60
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3308      	adds	r3, #8
 8006c28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e5      	bne.n	8006c0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e069      	b.n	8006d2e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d051      	beq.n	8006d0c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c76:	d149      	bne.n	8006d0c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	e853 3f00 	ldrex	r3, [r3]
 8006c8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ca8:	e841 2300 	strex	r3, r2, [r1]
 8006cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e6      	bne.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3308      	adds	r3, #8
 8006cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f023 0301 	bic.w	r3, r3, #1
 8006cca:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006cd4:	623a      	str	r2, [r7, #32]
 8006cd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	69f9      	ldr	r1, [r7, #28]
 8006cda:	6a3a      	ldr	r2, [r7, #32]
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e5      	bne.n	8006cb4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e010      	b.n	8006d2e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	69da      	ldr	r2, [r3, #28]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4013      	ands	r3, r2
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	bf0c      	ite	eq
 8006d1c:	2301      	moveq	r3, #1
 8006d1e:	2300      	movne	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	461a      	mov	r2, r3
 8006d24:	79fb      	ldrb	r3, [r7, #7]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	f43f af46 	beq.w	8006bb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3770      	adds	r7, #112	; 0x70
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b096      	sub	sp, #88	; 0x58
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	88fa      	ldrh	r2, [r7, #6]
 8006d50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2222      	movs	r2, #34	; 0x22
 8006d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d02d      	beq.n	8006dca <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d74:	4a40      	ldr	r2, [pc, #256]	; (8006e78 <UART_Start_Receive_DMA+0x140>)
 8006d76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d7e:	4a3f      	ldr	r2, [pc, #252]	; (8006e7c <UART_Start_Receive_DMA+0x144>)
 8006d80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d88:	4a3d      	ldr	r2, [pc, #244]	; (8006e80 <UART_Start_Receive_DMA+0x148>)
 8006d8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d92:	2200      	movs	r2, #0
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3324      	adds	r3, #36	; 0x24
 8006da2:	4619      	mov	r1, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da8:	461a      	mov	r2, r3
 8006daa:	88fb      	ldrh	r3, [r7, #6]
 8006dac:	f7fc f830 	bl	8002e10 <HAL_DMA_Start_IT>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2210      	movs	r2, #16
 8006dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e051      	b.n	8006e6e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d018      	beq.n	8006e04 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de6:	657b      	str	r3, [r7, #84]	; 0x54
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006df2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e6      	bne.n	8006dd2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	f043 0301 	orr.w	r3, r3, #1
 8006e1a:	653b      	str	r3, [r7, #80]	; 0x50
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3308      	adds	r3, #8
 8006e22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e24:	637a      	str	r2, [r7, #52]	; 0x34
 8006e26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e5      	bne.n	8006e04 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	613b      	str	r3, [r7, #16]
   return(result);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3308      	adds	r3, #8
 8006e56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e58:	623a      	str	r2, [r7, #32]
 8006e5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	69f9      	ldr	r1, [r7, #28]
 8006e5e:	6a3a      	ldr	r2, [r7, #32]
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e5      	bne.n	8006e38 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3758      	adds	r7, #88	; 0x58
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	08006fcf 	.word	0x08006fcf
 8006e7c:	080070fb 	.word	0x080070fb
 8006e80:	08007139 	.word	0x08007139

08006e84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b08f      	sub	sp, #60	; 0x3c
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e6      	bne.n	8006e8c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3308      	adds	r3, #8
 8006edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ede:	61ba      	str	r2, [r7, #24]
 8006ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee2:	6979      	ldr	r1, [r7, #20]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	613b      	str	r3, [r7, #16]
   return(result);
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e5      	bne.n	8006ebe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006efa:	bf00      	nop
 8006efc:	373c      	adds	r7, #60	; 0x3c
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bc80      	pop	{r7}
 8006f02:	4770      	bx	lr

08006f04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b095      	sub	sp, #84	; 0x54
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8006f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e6      	bne.n	8006f0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3308      	adds	r3, #8
 8006f44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f54:	f023 0301 	bic.w	r3, r3, #1
 8006f58:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3308      	adds	r3, #8
 8006f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f6a:	e841 2300 	strex	r3, r2, [r1]
 8006f6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1e3      	bne.n	8006f3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d118      	bne.n	8006fb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f023 0310 	bic.w	r3, r3, #16
 8006f92:	647b      	str	r3, [r7, #68]	; 0x44
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	6979      	ldr	r1, [r7, #20]
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e6      	bne.n	8006f7e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006fc4:	bf00      	nop
 8006fc6:	3754      	adds	r7, #84	; 0x54
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bc80      	pop	{r7}
 8006fcc:	4770      	bx	lr

08006fce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b09c      	sub	sp, #112	; 0x70
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fda:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0320 	and.w	r3, r3, #32
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d171      	bne.n	80070ce <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fec:	2200      	movs	r2, #0
 8006fee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ffa:	e853 3f00 	ldrex	r3, [r3]
 8006ffe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007006:	66bb      	str	r3, [r7, #104]	; 0x68
 8007008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	461a      	mov	r2, r3
 800700e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007010:	65bb      	str	r3, [r7, #88]	; 0x58
 8007012:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007014:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007016:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007018:	e841 2300 	strex	r3, r2, [r1]
 800701c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800701e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e6      	bne.n	8006ff2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3308      	adds	r3, #8
 800702a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007036:	f023 0301 	bic.w	r3, r3, #1
 800703a:	667b      	str	r3, [r7, #100]	; 0x64
 800703c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3308      	adds	r3, #8
 8007042:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007044:	647a      	str	r2, [r7, #68]	; 0x44
 8007046:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800704a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e5      	bne.n	8007024 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3308      	adds	r3, #8
 800705e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	623b      	str	r3, [r7, #32]
   return(result);
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800706e:	663b      	str	r3, [r7, #96]	; 0x60
 8007070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3308      	adds	r3, #8
 8007076:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007078:	633a      	str	r2, [r7, #48]	; 0x30
 800707a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800707e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e5      	bne.n	8007058 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800708c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800708e:	2220      	movs	r2, #32
 8007090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007098:	2b01      	cmp	r3, #1
 800709a:	d118      	bne.n	80070ce <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f023 0310 	bic.w	r3, r3, #16
 80070b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ba:	61fb      	str	r3, [r7, #28]
 80070bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070be:	69b9      	ldr	r1, [r7, #24]
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	617b      	str	r3, [r7, #20]
   return(result);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e6      	bne.n	800709c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d0:	2200      	movs	r2, #0
 80070d2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d107      	bne.n	80070ec <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070e2:	4619      	mov	r1, r3
 80070e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070e6:	f7fa facf 	bl	8001688 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070ea:	e002      	b.n	80070f2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80070ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070ee:	f7ff f9dc 	bl	80064aa <HAL_UART_RxCpltCallback>
}
 80070f2:	bf00      	nop
 80070f4:	3770      	adds	r7, #112	; 0x70
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007112:	2b01      	cmp	r3, #1
 8007114:	d109      	bne.n	800712a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800711c:	085b      	lsrs	r3, r3, #1
 800711e:	b29b      	uxth	r3, r3
 8007120:	4619      	mov	r1, r3
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f7fa fab0 	bl	8001688 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007128:	e002      	b.n	8007130 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f7ff f9c6 	bl	80064bc <HAL_UART_RxHalfCpltCallback>
}
 8007130:	bf00      	nop
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007144:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800714c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007154:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007160:	2b80      	cmp	r3, #128	; 0x80
 8007162:	d109      	bne.n	8007178 <UART_DMAError+0x40>
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	2b21      	cmp	r3, #33	; 0x21
 8007168:	d106      	bne.n	8007178 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2200      	movs	r2, #0
 800716e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007172:	6978      	ldr	r0, [r7, #20]
 8007174:	f7ff fe86 	bl	8006e84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007182:	2b40      	cmp	r3, #64	; 0x40
 8007184:	d109      	bne.n	800719a <UART_DMAError+0x62>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b22      	cmp	r3, #34	; 0x22
 800718a:	d106      	bne.n	800719a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	2200      	movs	r2, #0
 8007190:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007194:	6978      	ldr	r0, [r7, #20]
 8007196:	f7ff feb5 	bl	8006f04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a0:	f043 0210 	orr.w	r2, r3, #16
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071aa:	6978      	ldr	r0, [r7, #20]
 80071ac:	f7ff f98f 	bl	80064ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071b0:	bf00      	nop
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f7ff f979 	bl	80064ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071dc:	bf00      	nop
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007200:	61fb      	str	r3, [r7, #28]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	61bb      	str	r3, [r7, #24]
 800720c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	6979      	ldr	r1, [r7, #20]
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	613b      	str	r3, [r7, #16]
   return(result);
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e6      	bne.n	80071ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7ff f933 	bl	8006498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007232:	bf00      	nop
 8007234:	3720      	adds	r7, #32
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800723a:	b480      	push	{r7}
 800723c:	b083      	sub	sp, #12
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007242:	bf00      	nop
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	bc80      	pop	{r7}
 800724a:	4770      	bx	lr

0800724c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	bc80      	pop	{r7}
 800725c:	4770      	bx	lr

0800725e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr

08007270 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800727e:	2b01      	cmp	r3, #1
 8007280:	d101      	bne.n	8007286 <HAL_UARTEx_DisableFifoMode+0x16>
 8007282:	2302      	movs	r3, #2
 8007284:	e027      	b.n	80072d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2224      	movs	r2, #36	; 0x24
 8007292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0201 	bic.w	r2, r2, #1
 80072ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2220      	movs	r2, #32
 80072c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	bc80      	pop	{r7}
 80072de:	4770      	bx	lr

080072e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e02d      	b.n	8007354 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2224      	movs	r2, #36	; 0x24
 8007304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0201 	bic.w	r2, r2, #1
 800731e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f8a3 	bl	8007480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800736c:	2b01      	cmp	r3, #1
 800736e:	d101      	bne.n	8007374 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007370:	2302      	movs	r3, #2
 8007372:	e02d      	b.n	80073d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2224      	movs	r2, #36	; 0x24
 8007380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f865 	bl	8007480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08c      	sub	sp, #48	; 0x30
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ec:	2b20      	cmp	r3, #32
 80073ee:	d142      	bne.n	8007476 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80073f6:	88fb      	ldrh	r3, [r7, #6]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e03b      	b.n	8007478 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2201      	movs	r2, #1
 8007404:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800740c:	88fb      	ldrh	r3, [r7, #6]
 800740e:	461a      	mov	r2, r3
 8007410:	68b9      	ldr	r1, [r7, #8]
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f7ff fc90 	bl	8006d38 <UART_Start_Receive_DMA>
 8007418:	4603      	mov	r3, r0
 800741a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800741e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007422:	2b00      	cmp	r3, #0
 8007424:	d124      	bne.n	8007470 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800742a:	2b01      	cmp	r3, #1
 800742c:	d11d      	bne.n	800746a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2210      	movs	r2, #16
 8007434:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	617b      	str	r3, [r7, #20]
   return(result);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f043 0310 	orr.w	r3, r3, #16
 800744a:	62bb      	str	r3, [r7, #40]	; 0x28
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007454:	627b      	str	r3, [r7, #36]	; 0x24
 8007456:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	6a39      	ldr	r1, [r7, #32]
 800745a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	61fb      	str	r3, [r7, #28]
   return(result);
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e6      	bne.n	8007436 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007468:	e002      	b.n	8007470 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007470:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007474:	e000      	b.n	8007478 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007476:	2302      	movs	r3, #2
  }
}
 8007478:	4618      	mov	r0, r3
 800747a:	3730      	adds	r7, #48	; 0x30
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800748c:	2b00      	cmp	r3, #0
 800748e:	d108      	bne.n	80074a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074a0:	e031      	b.n	8007506 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074a2:	2308      	movs	r3, #8
 80074a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074a6:	2308      	movs	r3, #8
 80074a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	0e5b      	lsrs	r3, r3, #25
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	0f5b      	lsrs	r3, r3, #29
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f003 0307 	and.w	r3, r3, #7
 80074c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	7b3a      	ldrb	r2, [r7, #12]
 80074ce:	4910      	ldr	r1, [pc, #64]	; (8007510 <UARTEx_SetNbDataToProcess+0x90>)
 80074d0:	5c8a      	ldrb	r2, [r1, r2]
 80074d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074d6:	7b3a      	ldrb	r2, [r7, #12]
 80074d8:	490e      	ldr	r1, [pc, #56]	; (8007514 <UARTEx_SetNbDataToProcess+0x94>)
 80074da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	7b7a      	ldrb	r2, [r7, #13]
 80074ec:	4908      	ldr	r1, [pc, #32]	; (8007510 <UARTEx_SetNbDataToProcess+0x90>)
 80074ee:	5c8a      	ldrb	r2, [r1, r2]
 80074f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074f4:	7b7a      	ldrb	r2, [r7, #13]
 80074f6:	4907      	ldr	r1, [pc, #28]	; (8007514 <UARTEx_SetNbDataToProcess+0x94>)
 80074f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80074fe:	b29a      	uxth	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007506:	bf00      	nop
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	bc80      	pop	{r7}
 800750e:	4770      	bx	lr
 8007510:	0800964c 	.word	0x0800964c
 8007514:	08009654 	.word	0x08009654

08007518 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	4603      	mov	r3, r0
 8007520:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800752a:	2b84      	cmp	r3, #132	; 0x84
 800752c:	d005      	beq.n	800753a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800752e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4413      	add	r3, r2
 8007536:	3303      	adds	r3, #3
 8007538:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800753a:	68fb      	ldr	r3, [r7, #12]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	bc80      	pop	{r7}
 8007544:	4770      	bx	lr

08007546 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800754a:	f000 faf1 	bl	8007b30 <vTaskStartScheduler>
  
  return osOK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	bd80      	pop	{r7, pc}

08007554 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007556:	b089      	sub	sp, #36	; 0x24
 8007558:	af04      	add	r7, sp, #16
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d020      	beq.n	80075a8 <osThreadCreate+0x54>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d01c      	beq.n	80075a8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685c      	ldr	r4, [r3, #4]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681d      	ldr	r5, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691e      	ldr	r6, [r3, #16]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007580:	4618      	mov	r0, r3
 8007582:	f7ff ffc9 	bl	8007518 <makeFreeRtosPriority>
 8007586:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007590:	9202      	str	r2, [sp, #8]
 8007592:	9301      	str	r3, [sp, #4]
 8007594:	9100      	str	r1, [sp, #0]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	4632      	mov	r2, r6
 800759a:	4629      	mov	r1, r5
 800759c:	4620      	mov	r0, r4
 800759e:	f000 f8e8 	bl	8007772 <xTaskCreateStatic>
 80075a2:	4603      	mov	r3, r0
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	e01c      	b.n	80075e2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685c      	ldr	r4, [r3, #4]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075b4:	b29e      	uxth	r6, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80075bc:	4618      	mov	r0, r3
 80075be:	f7ff ffab 	bl	8007518 <makeFreeRtosPriority>
 80075c2:	4602      	mov	r2, r0
 80075c4:	f107 030c 	add.w	r3, r7, #12
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	9200      	str	r2, [sp, #0]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	4632      	mov	r2, r6
 80075d0:	4629      	mov	r1, r5
 80075d2:	4620      	mov	r0, r4
 80075d4:	f000 f92a 	bl	800782c <xTaskCreate>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d001      	beq.n	80075e2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	e000      	b.n	80075e4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80075e2:	68fb      	ldr	r3, [r7, #12]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <osDelay+0x16>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	e000      	b.n	8007604 <osDelay+0x18>
 8007602:	2301      	movs	r3, #1
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fa5f 	bl	8007ac8 <vTaskDelay>
  
  return osOK;
 800760a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f103 0208 	add.w	r2, r3, #8
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f04f 32ff 	mov.w	r2, #4294967295
 800762c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f103 0208 	add.w	r2, r3, #8
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f103 0208 	add.w	r2, r3, #8
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	bc80      	pop	{r7}
 8007650:	4770      	bx	lr

08007652 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	bc80      	pop	{r7}
 8007668:	4770      	bx	lr

0800766a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800766a:	b480      	push	{r7}
 800766c:	b085      	sub	sp, #20
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	689a      	ldr	r2, [r3, #8]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	601a      	str	r2, [r3, #0]
}
 80076a6:	bf00      	nop
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bc80      	pop	{r7}
 80076ae:	4770      	bx	lr

080076b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c6:	d103      	bne.n	80076d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	60fb      	str	r3, [r7, #12]
 80076ce:	e00c      	b.n	80076ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3308      	adds	r3, #8
 80076d4:	60fb      	str	r3, [r7, #12]
 80076d6:	e002      	b.n	80076de <vListInsert+0x2e>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d2f6      	bcs.n	80076d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
}
 8007716:	bf00      	nop
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	bc80      	pop	{r7}
 800771e:	4770      	bx	lr

08007720 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6892      	ldr	r2, [r2, #8]
 8007736:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	6852      	ldr	r2, [r2, #4]
 8007740:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	429a      	cmp	r2, r3
 800774a:	d103      	bne.n	8007754 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	1e5a      	subs	r2, r3, #1
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	bc80      	pop	{r7}
 8007770:	4770      	bx	lr

08007772 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007772:	b580      	push	{r7, lr}
 8007774:	b08e      	sub	sp, #56	; 0x38
 8007776:	af04      	add	r7, sp, #16
 8007778:	60f8      	str	r0, [r7, #12]
 800777a:	60b9      	str	r1, [r7, #8]
 800777c:	607a      	str	r2, [r7, #4]
 800777e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007798:	bf00      	nop
 800779a:	e7fe      	b.n	800779a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800779c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10a      	bne.n	80077b8 <xTaskCreateStatic+0x46>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	61fb      	str	r3, [r7, #28]
}
 80077b4:	bf00      	nop
 80077b6:	e7fe      	b.n	80077b6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077b8:	23b4      	movs	r3, #180	; 0xb4
 80077ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	2bb4      	cmp	r3, #180	; 0xb4
 80077c0:	d00a      	beq.n	80077d8 <xTaskCreateStatic+0x66>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	61bb      	str	r3, [r7, #24]
}
 80077d4:	bf00      	nop
 80077d6:	e7fe      	b.n	80077d6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80077d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80077da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d01e      	beq.n	800781e <xTaskCreateStatic+0xac>
 80077e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d01b      	beq.n	800781e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80077f8:	2300      	movs	r3, #0
 80077fa:	9303      	str	r3, [sp, #12]
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	9302      	str	r3, [sp, #8]
 8007800:	f107 0314 	add.w	r3, r7, #20
 8007804:	9301      	str	r3, [sp, #4]
 8007806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	68b9      	ldr	r1, [r7, #8]
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 f851 	bl	80078b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007818:	f000 f8ec 	bl	80079f4 <prvAddNewTaskToReadyList>
 800781c:	e001      	b.n	8007822 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007822:	697b      	ldr	r3, [r7, #20]
	}
 8007824:	4618      	mov	r0, r3
 8007826:	3728      	adds	r7, #40	; 0x28
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08c      	sub	sp, #48	; 0x30
 8007830:	af04      	add	r7, sp, #16
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	603b      	str	r3, [r7, #0]
 8007838:	4613      	mov	r3, r2
 800783a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800783c:	88fb      	ldrh	r3, [r7, #6]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4618      	mov	r0, r3
 8007842:	f000 fe95 	bl	8008570 <pvPortMalloc>
 8007846:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00e      	beq.n	800786c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800784e:	20b4      	movs	r0, #180	; 0xb4
 8007850:	f000 fe8e 	bl	8008570 <pvPortMalloc>
 8007854:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	631a      	str	r2, [r3, #48]	; 0x30
 8007862:	e005      	b.n	8007870 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007864:	6978      	ldr	r0, [r7, #20]
 8007866:	f000 ff47 	bl	80086f8 <vPortFree>
 800786a:	e001      	b.n	8007870 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800786c:	2300      	movs	r3, #0
 800786e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d017      	beq.n	80078a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800787e:	88fa      	ldrh	r2, [r7, #6]
 8007880:	2300      	movs	r3, #0
 8007882:	9303      	str	r3, [sp, #12]
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	9302      	str	r3, [sp, #8]
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	9301      	str	r3, [sp, #4]
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 f80f 	bl	80078b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800789a:	69f8      	ldr	r0, [r7, #28]
 800789c:	f000 f8aa 	bl	80079f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078a0:	2301      	movs	r3, #1
 80078a2:	61bb      	str	r3, [r7, #24]
 80078a4:	e002      	b.n	80078ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078a6:	f04f 33ff 	mov.w	r3, #4294967295
 80078aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078ac:	69bb      	ldr	r3, [r7, #24]
	}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3720      	adds	r7, #32
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b088      	sub	sp, #32
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078d0:	3b01      	subs	r3, #1
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	f023 0307 	bic.w	r3, r3, #7
 80078de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <prvInitialiseNewTask+0x48>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	617b      	str	r3, [r7, #20]
}
 80078fc:	bf00      	nop
 80078fe:	e7fe      	b.n	80078fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d01f      	beq.n	8007946 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007906:	2300      	movs	r3, #0
 8007908:	61fb      	str	r3, [r7, #28]
 800790a:	e012      	b.n	8007932 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	4413      	add	r3, r2
 8007912:	7819      	ldrb	r1, [r3, #0]
 8007914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	4413      	add	r3, r2
 800791a:	3334      	adds	r3, #52	; 0x34
 800791c:	460a      	mov	r2, r1
 800791e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	4413      	add	r3, r2
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d006      	beq.n	800793a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	3301      	adds	r3, #1
 8007930:	61fb      	str	r3, [r7, #28]
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	2b0f      	cmp	r3, #15
 8007936:	d9e9      	bls.n	800790c <prvInitialiseNewTask+0x54>
 8007938:	e000      	b.n	800793c <prvInitialiseNewTask+0x84>
			{
				break;
 800793a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007944:	e003      	b.n	800794e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	2b06      	cmp	r3, #6
 8007952:	d901      	bls.n	8007958 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007954:	2306      	movs	r3, #6
 8007956:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800795c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007962:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	2200      	movs	r2, #0
 8007968:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796c:	3304      	adds	r3, #4
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff fe6f 	bl	8007652 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	3318      	adds	r3, #24
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff fe6a 	bl	8007652 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007982:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007986:	f1c3 0207 	rsb	r2, r3, #7
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007992:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	2200      	movs	r2, #0
 8007998:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	334c      	adds	r3, #76	; 0x4c
 80079a8:	2260      	movs	r2, #96	; 0x60
 80079aa:	2100      	movs	r1, #0
 80079ac:	4618      	mov	r0, r3
 80079ae:	f001 f80d 	bl	80089cc <memset>
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	4a0c      	ldr	r2, [pc, #48]	; (80079e8 <prvInitialiseNewTask+0x130>)
 80079b6:	651a      	str	r2, [r3, #80]	; 0x50
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	4a0c      	ldr	r2, [pc, #48]	; (80079ec <prvInitialiseNewTask+0x134>)
 80079bc:	655a      	str	r2, [r3, #84]	; 0x54
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	4a0b      	ldr	r2, [pc, #44]	; (80079f0 <prvInitialiseNewTask+0x138>)
 80079c2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	68f9      	ldr	r1, [r7, #12]
 80079c8:	69b8      	ldr	r0, [r7, #24]
 80079ca:	f000 fc1f 	bl	800820c <pxPortInitialiseStack>
 80079ce:	4602      	mov	r2, r0
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80079d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079e0:	bf00      	nop
 80079e2:	3720      	adds	r7, #32
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	0800967c 	.word	0x0800967c
 80079ec:	0800969c 	.word	0x0800969c
 80079f0:	0800965c 	.word	0x0800965c

080079f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80079fc:	f000 fcf6 	bl	80083ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a00:	4b2a      	ldr	r3, [pc, #168]	; (8007aac <prvAddNewTaskToReadyList+0xb8>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3301      	adds	r3, #1
 8007a06:	4a29      	ldr	r2, [pc, #164]	; (8007aac <prvAddNewTaskToReadyList+0xb8>)
 8007a08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a0a:	4b29      	ldr	r3, [pc, #164]	; (8007ab0 <prvAddNewTaskToReadyList+0xbc>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d109      	bne.n	8007a26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a12:	4a27      	ldr	r2, [pc, #156]	; (8007ab0 <prvAddNewTaskToReadyList+0xbc>)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a18:	4b24      	ldr	r3, [pc, #144]	; (8007aac <prvAddNewTaskToReadyList+0xb8>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d110      	bne.n	8007a42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a20:	f000 facc 	bl	8007fbc <prvInitialiseTaskLists>
 8007a24:	e00d      	b.n	8007a42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a26:	4b23      	ldr	r3, [pc, #140]	; (8007ab4 <prvAddNewTaskToReadyList+0xc0>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d109      	bne.n	8007a42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a2e:	4b20      	ldr	r3, [pc, #128]	; (8007ab0 <prvAddNewTaskToReadyList+0xbc>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d802      	bhi.n	8007a42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a3c:	4a1c      	ldr	r2, [pc, #112]	; (8007ab0 <prvAddNewTaskToReadyList+0xbc>)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a42:	4b1d      	ldr	r3, [pc, #116]	; (8007ab8 <prvAddNewTaskToReadyList+0xc4>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3301      	adds	r3, #1
 8007a48:	4a1b      	ldr	r2, [pc, #108]	; (8007ab8 <prvAddNewTaskToReadyList+0xc4>)
 8007a4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	2201      	movs	r2, #1
 8007a52:	409a      	lsls	r2, r3
 8007a54:	4b19      	ldr	r3, [pc, #100]	; (8007abc <prvAddNewTaskToReadyList+0xc8>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	4a18      	ldr	r2, [pc, #96]	; (8007abc <prvAddNewTaskToReadyList+0xc8>)
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a62:	4613      	mov	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4a15      	ldr	r2, [pc, #84]	; (8007ac0 <prvAddNewTaskToReadyList+0xcc>)
 8007a6c:	441a      	add	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4619      	mov	r1, r3
 8007a74:	4610      	mov	r0, r2
 8007a76:	f7ff fdf8 	bl	800766a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a7a:	f000 fce7 	bl	800844c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a7e:	4b0d      	ldr	r3, [pc, #52]	; (8007ab4 <prvAddNewTaskToReadyList+0xc0>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00e      	beq.n	8007aa4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a86:	4b0a      	ldr	r3, [pc, #40]	; (8007ab0 <prvAddNewTaskToReadyList+0xbc>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d207      	bcs.n	8007aa4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a94:	4b0b      	ldr	r3, [pc, #44]	; (8007ac4 <prvAddNewTaskToReadyList+0xd0>)
 8007a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aa4:	bf00      	nop
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20001000 	.word	0x20001000
 8007ab0:	20000f00 	.word	0x20000f00
 8007ab4:	2000100c 	.word	0x2000100c
 8007ab8:	2000101c 	.word	0x2000101c
 8007abc:	20001008 	.word	0x20001008
 8007ac0:	20000f04 	.word	0x20000f04
 8007ac4:	e000ed04 	.word	0xe000ed04

08007ac8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d017      	beq.n	8007b0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ada:	4b13      	ldr	r3, [pc, #76]	; (8007b28 <vTaskDelay+0x60>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <vTaskDelay+0x30>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	60bb      	str	r3, [r7, #8]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007af8:	f000 f884 	bl	8007c04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007afc:	2100      	movs	r1, #0
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fb1e 	bl	8008140 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b04:	f000 f88c 	bl	8007c20 <xTaskResumeAll>
 8007b08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d107      	bne.n	8007b20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007b10:	4b06      	ldr	r3, [pc, #24]	; (8007b2c <vTaskDelay+0x64>)
 8007b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b20:	bf00      	nop
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	20001028 	.word	0x20001028
 8007b2c:	e000ed04 	.word	0xe000ed04

08007b30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b08a      	sub	sp, #40	; 0x28
 8007b34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b3e:	463a      	mov	r2, r7
 8007b40:	1d39      	adds	r1, r7, #4
 8007b42:	f107 0308 	add.w	r3, r7, #8
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7f8 fd4c 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	9202      	str	r2, [sp, #8]
 8007b54:	9301      	str	r3, [sp, #4]
 8007b56:	2300      	movs	r3, #0
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	460a      	mov	r2, r1
 8007b5e:	4921      	ldr	r1, [pc, #132]	; (8007be4 <vTaskStartScheduler+0xb4>)
 8007b60:	4821      	ldr	r0, [pc, #132]	; (8007be8 <vTaskStartScheduler+0xb8>)
 8007b62:	f7ff fe06 	bl	8007772 <xTaskCreateStatic>
 8007b66:	4603      	mov	r3, r0
 8007b68:	4a20      	ldr	r2, [pc, #128]	; (8007bec <vTaskStartScheduler+0xbc>)
 8007b6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b6c:	4b1f      	ldr	r3, [pc, #124]	; (8007bec <vTaskStartScheduler+0xbc>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b74:	2301      	movs	r3, #1
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	e001      	b.n	8007b7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d11b      	bne.n	8007bbc <vTaskStartScheduler+0x8c>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	613b      	str	r3, [r7, #16]
}
 8007b96:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b98:	4b15      	ldr	r3, [pc, #84]	; (8007bf0 <vTaskStartScheduler+0xc0>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	334c      	adds	r3, #76	; 0x4c
 8007b9e:	4a15      	ldr	r2, [pc, #84]	; (8007bf4 <vTaskStartScheduler+0xc4>)
 8007ba0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ba2:	4b15      	ldr	r3, [pc, #84]	; (8007bf8 <vTaskStartScheduler+0xc8>)
 8007ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007baa:	4b14      	ldr	r3, [pc, #80]	; (8007bfc <vTaskStartScheduler+0xcc>)
 8007bac:	2201      	movs	r2, #1
 8007bae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007bb0:	4b13      	ldr	r3, [pc, #76]	; (8007c00 <vTaskStartScheduler+0xd0>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007bb6:	f000 fba7 	bl	8008308 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007bba:	e00e      	b.n	8007bda <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc2:	d10a      	bne.n	8007bda <vTaskStartScheduler+0xaa>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	60fb      	str	r3, [r7, #12]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <vTaskStartScheduler+0xa8>
}
 8007bda:	bf00      	nop
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	08009564 	.word	0x08009564
 8007be8:	08007f8d 	.word	0x08007f8d
 8007bec:	20001024 	.word	0x20001024
 8007bf0:	20000f00 	.word	0x20000f00
 8007bf4:	20000120 	.word	0x20000120
 8007bf8:	20001020 	.word	0x20001020
 8007bfc:	2000100c 	.word	0x2000100c
 8007c00:	20001004 	.word	0x20001004

08007c04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c04:	b480      	push	{r7}
 8007c06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c08:	4b04      	ldr	r3, [pc, #16]	; (8007c1c <vTaskSuspendAll+0x18>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	4a03      	ldr	r2, [pc, #12]	; (8007c1c <vTaskSuspendAll+0x18>)
 8007c10:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007c12:	bf00      	nop
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bc80      	pop	{r7}
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	20001028 	.word	0x20001028

08007c20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c2e:	4b41      	ldr	r3, [pc, #260]	; (8007d34 <xTaskResumeAll+0x114>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10a      	bne.n	8007c4c <xTaskResumeAll+0x2c>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	603b      	str	r3, [r7, #0]
}
 8007c48:	bf00      	nop
 8007c4a:	e7fe      	b.n	8007c4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c4c:	f000 fbce 	bl	80083ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c50:	4b38      	ldr	r3, [pc, #224]	; (8007d34 <xTaskResumeAll+0x114>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	4a37      	ldr	r2, [pc, #220]	; (8007d34 <xTaskResumeAll+0x114>)
 8007c58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c5a:	4b36      	ldr	r3, [pc, #216]	; (8007d34 <xTaskResumeAll+0x114>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d161      	bne.n	8007d26 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c62:	4b35      	ldr	r3, [pc, #212]	; (8007d38 <xTaskResumeAll+0x118>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d05d      	beq.n	8007d26 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c6a:	e02e      	b.n	8007cca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c6c:	4b33      	ldr	r3, [pc, #204]	; (8007d3c <xTaskResumeAll+0x11c>)
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3318      	adds	r3, #24
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff fd51 	bl	8007720 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	3304      	adds	r3, #4
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff fd4c 	bl	8007720 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	409a      	lsls	r2, r3
 8007c90:	4b2b      	ldr	r3, [pc, #172]	; (8007d40 <xTaskResumeAll+0x120>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	4a2a      	ldr	r2, [pc, #168]	; (8007d40 <xTaskResumeAll+0x120>)
 8007c98:	6013      	str	r3, [r2, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4a27      	ldr	r2, [pc, #156]	; (8007d44 <xTaskResumeAll+0x124>)
 8007ca8:	441a      	add	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3304      	adds	r3, #4
 8007cae:	4619      	mov	r1, r3
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	f7ff fcda 	bl	800766a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cba:	4b23      	ldr	r3, [pc, #140]	; (8007d48 <xTaskResumeAll+0x128>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d302      	bcc.n	8007cca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007cc4:	4b21      	ldr	r3, [pc, #132]	; (8007d4c <xTaskResumeAll+0x12c>)
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cca:	4b1c      	ldr	r3, [pc, #112]	; (8007d3c <xTaskResumeAll+0x11c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1cc      	bne.n	8007c6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cd8:	f000 fa12 	bl	8008100 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007cdc:	4b1c      	ldr	r3, [pc, #112]	; (8007d50 <xTaskResumeAll+0x130>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d010      	beq.n	8007d0a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ce8:	f000 f836 	bl	8007d58 <xTaskIncrementTick>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007cf2:	4b16      	ldr	r3, [pc, #88]	; (8007d4c <xTaskResumeAll+0x12c>)
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1f1      	bne.n	8007ce8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007d04:	4b12      	ldr	r3, [pc, #72]	; (8007d50 <xTaskResumeAll+0x130>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d0a:	4b10      	ldr	r3, [pc, #64]	; (8007d4c <xTaskResumeAll+0x12c>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d009      	beq.n	8007d26 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d12:	2301      	movs	r3, #1
 8007d14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d16:	4b0f      	ldr	r3, [pc, #60]	; (8007d54 <xTaskResumeAll+0x134>)
 8007d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d26:	f000 fb91 	bl	800844c <vPortExitCritical>

	return xAlreadyYielded;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	20001028 	.word	0x20001028
 8007d38:	20001000 	.word	0x20001000
 8007d3c:	20000fc0 	.word	0x20000fc0
 8007d40:	20001008 	.word	0x20001008
 8007d44:	20000f04 	.word	0x20000f04
 8007d48:	20000f00 	.word	0x20000f00
 8007d4c:	20001014 	.word	0x20001014
 8007d50:	20001010 	.word	0x20001010
 8007d54:	e000ed04 	.word	0xe000ed04

08007d58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d62:	4b4e      	ldr	r3, [pc, #312]	; (8007e9c <xTaskIncrementTick+0x144>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f040 8088 	bne.w	8007e7c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d6c:	4b4c      	ldr	r3, [pc, #304]	; (8007ea0 <xTaskIncrementTick+0x148>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3301      	adds	r3, #1
 8007d72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d74:	4a4a      	ldr	r2, [pc, #296]	; (8007ea0 <xTaskIncrementTick+0x148>)
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d120      	bne.n	8007dc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d80:	4b48      	ldr	r3, [pc, #288]	; (8007ea4 <xTaskIncrementTick+0x14c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <xTaskIncrementTick+0x48>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	603b      	str	r3, [r7, #0]
}
 8007d9c:	bf00      	nop
 8007d9e:	e7fe      	b.n	8007d9e <xTaskIncrementTick+0x46>
 8007da0:	4b40      	ldr	r3, [pc, #256]	; (8007ea4 <xTaskIncrementTick+0x14c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	4b40      	ldr	r3, [pc, #256]	; (8007ea8 <xTaskIncrementTick+0x150>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a3e      	ldr	r2, [pc, #248]	; (8007ea4 <xTaskIncrementTick+0x14c>)
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	4a3e      	ldr	r2, [pc, #248]	; (8007ea8 <xTaskIncrementTick+0x150>)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6013      	str	r3, [r2, #0]
 8007db4:	4b3d      	ldr	r3, [pc, #244]	; (8007eac <xTaskIncrementTick+0x154>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	4a3c      	ldr	r2, [pc, #240]	; (8007eac <xTaskIncrementTick+0x154>)
 8007dbc:	6013      	str	r3, [r2, #0]
 8007dbe:	f000 f99f 	bl	8008100 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007dc2:	4b3b      	ldr	r3, [pc, #236]	; (8007eb0 <xTaskIncrementTick+0x158>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d348      	bcc.n	8007e5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dcc:	4b35      	ldr	r3, [pc, #212]	; (8007ea4 <xTaskIncrementTick+0x14c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d104      	bne.n	8007de0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dd6:	4b36      	ldr	r3, [pc, #216]	; (8007eb0 <xTaskIncrementTick+0x158>)
 8007dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ddc:	601a      	str	r2, [r3, #0]
					break;
 8007dde:	e03e      	b.n	8007e5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007de0:	4b30      	ldr	r3, [pc, #192]	; (8007ea4 <xTaskIncrementTick+0x14c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d203      	bcs.n	8007e00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007df8:	4a2d      	ldr	r2, [pc, #180]	; (8007eb0 <xTaskIncrementTick+0x158>)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007dfe:	e02e      	b.n	8007e5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	3304      	adds	r3, #4
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff fc8b 	bl	8007720 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d004      	beq.n	8007e1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	3318      	adds	r3, #24
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff fc82 	bl	8007720 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	2201      	movs	r2, #1
 8007e22:	409a      	lsls	r2, r3
 8007e24:	4b23      	ldr	r3, [pc, #140]	; (8007eb4 <xTaskIncrementTick+0x15c>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	4a22      	ldr	r2, [pc, #136]	; (8007eb4 <xTaskIncrementTick+0x15c>)
 8007e2c:	6013      	str	r3, [r2, #0]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e32:	4613      	mov	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4413      	add	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4a1f      	ldr	r2, [pc, #124]	; (8007eb8 <xTaskIncrementTick+0x160>)
 8007e3c:	441a      	add	r2, r3
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	3304      	adds	r3, #4
 8007e42:	4619      	mov	r1, r3
 8007e44:	4610      	mov	r0, r2
 8007e46:	f7ff fc10 	bl	800766a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4e:	4b1b      	ldr	r3, [pc, #108]	; (8007ebc <xTaskIncrementTick+0x164>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d3b9      	bcc.n	8007dcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e5c:	e7b6      	b.n	8007dcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e5e:	4b17      	ldr	r3, [pc, #92]	; (8007ebc <xTaskIncrementTick+0x164>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e64:	4914      	ldr	r1, [pc, #80]	; (8007eb8 <xTaskIncrementTick+0x160>)
 8007e66:	4613      	mov	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	440b      	add	r3, r1
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d907      	bls.n	8007e86 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8007e76:	2301      	movs	r3, #1
 8007e78:	617b      	str	r3, [r7, #20]
 8007e7a:	e004      	b.n	8007e86 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e7c:	4b10      	ldr	r3, [pc, #64]	; (8007ec0 <xTaskIncrementTick+0x168>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3301      	adds	r3, #1
 8007e82:	4a0f      	ldr	r2, [pc, #60]	; (8007ec0 <xTaskIncrementTick+0x168>)
 8007e84:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007e86:	4b0f      	ldr	r3, [pc, #60]	; (8007ec4 <xTaskIncrementTick+0x16c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007e92:	697b      	ldr	r3, [r7, #20]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20001028 	.word	0x20001028
 8007ea0:	20001004 	.word	0x20001004
 8007ea4:	20000fb8 	.word	0x20000fb8
 8007ea8:	20000fbc 	.word	0x20000fbc
 8007eac:	20001018 	.word	0x20001018
 8007eb0:	20001020 	.word	0x20001020
 8007eb4:	20001008 	.word	0x20001008
 8007eb8:	20000f04 	.word	0x20000f04
 8007ebc:	20000f00 	.word	0x20000f00
 8007ec0:	20001010 	.word	0x20001010
 8007ec4:	20001014 	.word	0x20001014

08007ec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ece:	4b29      	ldr	r3, [pc, #164]	; (8007f74 <vTaskSwitchContext+0xac>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ed6:	4b28      	ldr	r3, [pc, #160]	; (8007f78 <vTaskSwitchContext+0xb0>)
 8007ed8:	2201      	movs	r2, #1
 8007eda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007edc:	e044      	b.n	8007f68 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007ede:	4b26      	ldr	r3, [pc, #152]	; (8007f78 <vTaskSwitchContext+0xb0>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ee4:	4b25      	ldr	r3, [pc, #148]	; (8007f7c <vTaskSwitchContext+0xb4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	fab3 f383 	clz	r3, r3
 8007ef0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007ef2:	7afb      	ldrb	r3, [r7, #11]
 8007ef4:	f1c3 031f 	rsb	r3, r3, #31
 8007ef8:	617b      	str	r3, [r7, #20]
 8007efa:	4921      	ldr	r1, [pc, #132]	; (8007f80 <vTaskSwitchContext+0xb8>)
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	440b      	add	r3, r1
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	607b      	str	r3, [r7, #4]
}
 8007f20:	bf00      	nop
 8007f22:	e7fe      	b.n	8007f22 <vTaskSwitchContext+0x5a>
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	4613      	mov	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4a14      	ldr	r2, [pc, #80]	; (8007f80 <vTaskSwitchContext+0xb8>)
 8007f30:	4413      	add	r3, r2
 8007f32:	613b      	str	r3, [r7, #16]
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	605a      	str	r2, [r3, #4]
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	3308      	adds	r3, #8
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d104      	bne.n	8007f54 <vTaskSwitchContext+0x8c>
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	605a      	str	r2, [r3, #4]
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	4a0a      	ldr	r2, [pc, #40]	; (8007f84 <vTaskSwitchContext+0xbc>)
 8007f5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f5e:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <vTaskSwitchContext+0xbc>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	334c      	adds	r3, #76	; 0x4c
 8007f64:	4a08      	ldr	r2, [pc, #32]	; (8007f88 <vTaskSwitchContext+0xc0>)
 8007f66:	6013      	str	r3, [r2, #0]
}
 8007f68:	bf00      	nop
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bc80      	pop	{r7}
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	20001028 	.word	0x20001028
 8007f78:	20001014 	.word	0x20001014
 8007f7c:	20001008 	.word	0x20001008
 8007f80:	20000f04 	.word	0x20000f04
 8007f84:	20000f00 	.word	0x20000f00
 8007f88:	20000120 	.word	0x20000120

08007f8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f94:	f000 f852 	bl	800803c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f98:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <prvIdleTask+0x28>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d9f9      	bls.n	8007f94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fa0:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <prvIdleTask+0x2c>)
 8007fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fb0:	e7f0      	b.n	8007f94 <prvIdleTask+0x8>
 8007fb2:	bf00      	nop
 8007fb4:	20000f04 	.word	0x20000f04
 8007fb8:	e000ed04 	.word	0xe000ed04

08007fbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	607b      	str	r3, [r7, #4]
 8007fc6:	e00c      	b.n	8007fe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4a12      	ldr	r2, [pc, #72]	; (800801c <prvInitialiseTaskLists+0x60>)
 8007fd4:	4413      	add	r3, r2
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff fb1c 	bl	8007614 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	607b      	str	r3, [r7, #4]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b06      	cmp	r3, #6
 8007fe6:	d9ef      	bls.n	8007fc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fe8:	480d      	ldr	r0, [pc, #52]	; (8008020 <prvInitialiseTaskLists+0x64>)
 8007fea:	f7ff fb13 	bl	8007614 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fee:	480d      	ldr	r0, [pc, #52]	; (8008024 <prvInitialiseTaskLists+0x68>)
 8007ff0:	f7ff fb10 	bl	8007614 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ff4:	480c      	ldr	r0, [pc, #48]	; (8008028 <prvInitialiseTaskLists+0x6c>)
 8007ff6:	f7ff fb0d 	bl	8007614 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ffa:	480c      	ldr	r0, [pc, #48]	; (800802c <prvInitialiseTaskLists+0x70>)
 8007ffc:	f7ff fb0a 	bl	8007614 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008000:	480b      	ldr	r0, [pc, #44]	; (8008030 <prvInitialiseTaskLists+0x74>)
 8008002:	f7ff fb07 	bl	8007614 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008006:	4b0b      	ldr	r3, [pc, #44]	; (8008034 <prvInitialiseTaskLists+0x78>)
 8008008:	4a05      	ldr	r2, [pc, #20]	; (8008020 <prvInitialiseTaskLists+0x64>)
 800800a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800800c:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <prvInitialiseTaskLists+0x7c>)
 800800e:	4a05      	ldr	r2, [pc, #20]	; (8008024 <prvInitialiseTaskLists+0x68>)
 8008010:	601a      	str	r2, [r3, #0]
}
 8008012:	bf00      	nop
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20000f04 	.word	0x20000f04
 8008020:	20000f90 	.word	0x20000f90
 8008024:	20000fa4 	.word	0x20000fa4
 8008028:	20000fc0 	.word	0x20000fc0
 800802c:	20000fd4 	.word	0x20000fd4
 8008030:	20000fec 	.word	0x20000fec
 8008034:	20000fb8 	.word	0x20000fb8
 8008038:	20000fbc 	.word	0x20000fbc

0800803c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008042:	e019      	b.n	8008078 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008044:	f000 f9d2 	bl	80083ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008048:	4b10      	ldr	r3, [pc, #64]	; (800808c <prvCheckTasksWaitingTermination+0x50>)
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3304      	adds	r3, #4
 8008054:	4618      	mov	r0, r3
 8008056:	f7ff fb63 	bl	8007720 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800805a:	4b0d      	ldr	r3, [pc, #52]	; (8008090 <prvCheckTasksWaitingTermination+0x54>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3b01      	subs	r3, #1
 8008060:	4a0b      	ldr	r2, [pc, #44]	; (8008090 <prvCheckTasksWaitingTermination+0x54>)
 8008062:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008064:	4b0b      	ldr	r3, [pc, #44]	; (8008094 <prvCheckTasksWaitingTermination+0x58>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	3b01      	subs	r3, #1
 800806a:	4a0a      	ldr	r2, [pc, #40]	; (8008094 <prvCheckTasksWaitingTermination+0x58>)
 800806c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800806e:	f000 f9ed 	bl	800844c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f810 	bl	8008098 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008078:	4b06      	ldr	r3, [pc, #24]	; (8008094 <prvCheckTasksWaitingTermination+0x58>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e1      	bne.n	8008044 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000fd4 	.word	0x20000fd4
 8008090:	20001000 	.word	0x20001000
 8008094:	20000fe8 	.word	0x20000fe8

08008098 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	334c      	adds	r3, #76	; 0x4c
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 fd3b 	bl	8008b20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d108      	bne.n	80080c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 fb1d 	bl	80086f8 <vPortFree>
				vPortFree( pxTCB );
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fb1a 	bl	80086f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080c4:	e018      	b.n	80080f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d103      	bne.n	80080d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fb11 	bl	80086f8 <vPortFree>
	}
 80080d6:	e00f      	b.n	80080f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d00a      	beq.n	80080f8 <prvDeleteTCB+0x60>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	60fb      	str	r3, [r7, #12]
}
 80080f4:	bf00      	nop
 80080f6:	e7fe      	b.n	80080f6 <prvDeleteTCB+0x5e>
	}
 80080f8:	bf00      	nop
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008106:	4b0c      	ldr	r3, [pc, #48]	; (8008138 <prvResetNextTaskUnblockTime+0x38>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d104      	bne.n	800811a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008110:	4b0a      	ldr	r3, [pc, #40]	; (800813c <prvResetNextTaskUnblockTime+0x3c>)
 8008112:	f04f 32ff 	mov.w	r2, #4294967295
 8008116:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008118:	e008      	b.n	800812c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800811a:	4b07      	ldr	r3, [pc, #28]	; (8008138 <prvResetNextTaskUnblockTime+0x38>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	4a04      	ldr	r2, [pc, #16]	; (800813c <prvResetNextTaskUnblockTime+0x3c>)
 800812a:	6013      	str	r3, [r2, #0]
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	bc80      	pop	{r7}
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	20000fb8 	.word	0x20000fb8
 800813c:	20001020 	.word	0x20001020

08008140 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800814a:	4b29      	ldr	r3, [pc, #164]	; (80081f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008150:	4b28      	ldr	r3, [pc, #160]	; (80081f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3304      	adds	r3, #4
 8008156:	4618      	mov	r0, r3
 8008158:	f7ff fae2 	bl	8007720 <uxListRemove>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10b      	bne.n	800817a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008162:	4b24      	ldr	r3, [pc, #144]	; (80081f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008168:	2201      	movs	r2, #1
 800816a:	fa02 f303 	lsl.w	r3, r2, r3
 800816e:	43da      	mvns	r2, r3
 8008170:	4b21      	ldr	r3, [pc, #132]	; (80081f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4013      	ands	r3, r2
 8008176:	4a20      	ldr	r2, [pc, #128]	; (80081f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008178:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008180:	d10a      	bne.n	8008198 <prvAddCurrentTaskToDelayedList+0x58>
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d007      	beq.n	8008198 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008188:	4b1a      	ldr	r3, [pc, #104]	; (80081f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3304      	adds	r3, #4
 800818e:	4619      	mov	r1, r3
 8008190:	481a      	ldr	r0, [pc, #104]	; (80081fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008192:	f7ff fa6a 	bl	800766a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008196:	e026      	b.n	80081e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4413      	add	r3, r2
 800819e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081a0:	4b14      	ldr	r3, [pc, #80]	; (80081f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d209      	bcs.n	80081c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081b0:	4b13      	ldr	r3, [pc, #76]	; (8008200 <prvAddCurrentTaskToDelayedList+0xc0>)
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	4b0f      	ldr	r3, [pc, #60]	; (80081f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3304      	adds	r3, #4
 80081ba:	4619      	mov	r1, r3
 80081bc:	4610      	mov	r0, r2
 80081be:	f7ff fa77 	bl	80076b0 <vListInsert>
}
 80081c2:	e010      	b.n	80081e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081c4:	4b0f      	ldr	r3, [pc, #60]	; (8008204 <prvAddCurrentTaskToDelayedList+0xc4>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3304      	adds	r3, #4
 80081ce:	4619      	mov	r1, r3
 80081d0:	4610      	mov	r0, r2
 80081d2:	f7ff fa6d 	bl	80076b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081d6:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <prvAddCurrentTaskToDelayedList+0xc8>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d202      	bcs.n	80081e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80081e0:	4a09      	ldr	r2, [pc, #36]	; (8008208 <prvAddCurrentTaskToDelayedList+0xc8>)
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	6013      	str	r3, [r2, #0]
}
 80081e6:	bf00      	nop
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	20001004 	.word	0x20001004
 80081f4:	20000f00 	.word	0x20000f00
 80081f8:	20001008 	.word	0x20001008
 80081fc:	20000fec 	.word	0x20000fec
 8008200:	20000fbc 	.word	0x20000fbc
 8008204:	20000fb8 	.word	0x20000fb8
 8008208:	20001020 	.word	0x20001020

0800820c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	3b04      	subs	r3, #4
 800821c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3b04      	subs	r3, #4
 800822a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	f023 0201 	bic.w	r2, r3, #1
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3b04      	subs	r3, #4
 800823a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800823c:	4a08      	ldr	r2, [pc, #32]	; (8008260 <pxPortInitialiseStack+0x54>)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3b14      	subs	r3, #20
 8008246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3b20      	subs	r3, #32
 8008252:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008254:	68fb      	ldr	r3, [r7, #12]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	bc80      	pop	{r7}
 800825e:	4770      	bx	lr
 8008260:	08008265 	.word	0x08008265

08008264 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800826a:	2300      	movs	r3, #0
 800826c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800826e:	4b12      	ldr	r3, [pc, #72]	; (80082b8 <prvTaskExitError+0x54>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008276:	d00a      	beq.n	800828e <prvTaskExitError+0x2a>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	60fb      	str	r3, [r7, #12]
}
 800828a:	bf00      	nop
 800828c:	e7fe      	b.n	800828c <prvTaskExitError+0x28>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	60bb      	str	r3, [r7, #8]
}
 80082a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082a2:	bf00      	nop
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0fc      	beq.n	80082a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082aa:	bf00      	nop
 80082ac:	bf00      	nop
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bc80      	pop	{r7}
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	2000011c 	.word	0x2000011c
 80082bc:	00000000 	.word	0x00000000

080082c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082c0:	4b07      	ldr	r3, [pc, #28]	; (80082e0 <pxCurrentTCBConst2>)
 80082c2:	6819      	ldr	r1, [r3, #0]
 80082c4:	6808      	ldr	r0, [r1, #0]
 80082c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80082ca:	f380 8809 	msr	PSP, r0
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f04f 0000 	mov.w	r0, #0
 80082d6:	f380 8811 	msr	BASEPRI, r0
 80082da:	f04e 0e0d 	orr.w	lr, lr, #13
 80082de:	4770      	bx	lr

080082e0 <pxCurrentTCBConst2>:
 80082e0:	20000f00 	.word	0x20000f00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082e4:	bf00      	nop
 80082e6:	bf00      	nop

080082e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80082e8:	4806      	ldr	r0, [pc, #24]	; (8008304 <prvPortStartFirstTask+0x1c>)
 80082ea:	6800      	ldr	r0, [r0, #0]
 80082ec:	6800      	ldr	r0, [r0, #0]
 80082ee:	f380 8808 	msr	MSP, r0
 80082f2:	b662      	cpsie	i
 80082f4:	b661      	cpsie	f
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	df00      	svc	0
 8008300:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008302:	bf00      	nop
 8008304:	e000ed08 	.word	0xe000ed08

08008308 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800830e:	4b32      	ldr	r3, [pc, #200]	; (80083d8 <xPortStartScheduler+0xd0>)
 8008310:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	b2db      	uxtb	r3, r3
 8008318:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	22ff      	movs	r2, #255	; 0xff
 800831e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	b2db      	uxtb	r3, r3
 8008326:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	b2db      	uxtb	r3, r3
 800832c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008330:	b2da      	uxtb	r2, r3
 8008332:	4b2a      	ldr	r3, [pc, #168]	; (80083dc <xPortStartScheduler+0xd4>)
 8008334:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008336:	4b2a      	ldr	r3, [pc, #168]	; (80083e0 <xPortStartScheduler+0xd8>)
 8008338:	2207      	movs	r2, #7
 800833a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800833c:	e009      	b.n	8008352 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800833e:	4b28      	ldr	r3, [pc, #160]	; (80083e0 <xPortStartScheduler+0xd8>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3b01      	subs	r3, #1
 8008344:	4a26      	ldr	r2, [pc, #152]	; (80083e0 <xPortStartScheduler+0xd8>)
 8008346:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008348:	78fb      	ldrb	r3, [r7, #3]
 800834a:	b2db      	uxtb	r3, r3
 800834c:	005b      	lsls	r3, r3, #1
 800834e:	b2db      	uxtb	r3, r3
 8008350:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008352:	78fb      	ldrb	r3, [r7, #3]
 8008354:	b2db      	uxtb	r3, r3
 8008356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800835a:	2b80      	cmp	r3, #128	; 0x80
 800835c:	d0ef      	beq.n	800833e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800835e:	4b20      	ldr	r3, [pc, #128]	; (80083e0 <xPortStartScheduler+0xd8>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f1c3 0307 	rsb	r3, r3, #7
 8008366:	2b04      	cmp	r3, #4
 8008368:	d00a      	beq.n	8008380 <xPortStartScheduler+0x78>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	60bb      	str	r3, [r7, #8]
}
 800837c:	bf00      	nop
 800837e:	e7fe      	b.n	800837e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008380:	4b17      	ldr	r3, [pc, #92]	; (80083e0 <xPortStartScheduler+0xd8>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	021b      	lsls	r3, r3, #8
 8008386:	4a16      	ldr	r2, [pc, #88]	; (80083e0 <xPortStartScheduler+0xd8>)
 8008388:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800838a:	4b15      	ldr	r3, [pc, #84]	; (80083e0 <xPortStartScheduler+0xd8>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008392:	4a13      	ldr	r2, [pc, #76]	; (80083e0 <xPortStartScheduler+0xd8>)
 8008394:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	b2da      	uxtb	r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800839e:	4b11      	ldr	r3, [pc, #68]	; (80083e4 <xPortStartScheduler+0xdc>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a10      	ldr	r2, [pc, #64]	; (80083e4 <xPortStartScheduler+0xdc>)
 80083a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80083a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083aa:	4b0e      	ldr	r3, [pc, #56]	; (80083e4 <xPortStartScheduler+0xdc>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a0d      	ldr	r2, [pc, #52]	; (80083e4 <xPortStartScheduler+0xdc>)
 80083b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80083b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083b6:	f000 f8b9 	bl	800852c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <xPortStartScheduler+0xe0>)
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083c0:	f7ff ff92 	bl	80082e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083c4:	f7ff fd80 	bl	8007ec8 <vTaskSwitchContext>
	prvTaskExitError();
 80083c8:	f7ff ff4c 	bl	8008264 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	e000e400 	.word	0xe000e400
 80083dc:	2000102c 	.word	0x2000102c
 80083e0:	20001030 	.word	0x20001030
 80083e4:	e000ed20 	.word	0xe000ed20
 80083e8:	2000011c 	.word	0x2000011c

080083ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	607b      	str	r3, [r7, #4]
}
 8008404:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008406:	4b0f      	ldr	r3, [pc, #60]	; (8008444 <vPortEnterCritical+0x58>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3301      	adds	r3, #1
 800840c:	4a0d      	ldr	r2, [pc, #52]	; (8008444 <vPortEnterCritical+0x58>)
 800840e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008410:	4b0c      	ldr	r3, [pc, #48]	; (8008444 <vPortEnterCritical+0x58>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d10f      	bne.n	8008438 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008418:	4b0b      	ldr	r3, [pc, #44]	; (8008448 <vPortEnterCritical+0x5c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <vPortEnterCritical+0x4c>
	__asm volatile
 8008422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008426:	f383 8811 	msr	BASEPRI, r3
 800842a:	f3bf 8f6f 	isb	sy
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	603b      	str	r3, [r7, #0]
}
 8008434:	bf00      	nop
 8008436:	e7fe      	b.n	8008436 <vPortEnterCritical+0x4a>
	}
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	bc80      	pop	{r7}
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	2000011c 	.word	0x2000011c
 8008448:	e000ed04 	.word	0xe000ed04

0800844c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008452:	4b11      	ldr	r3, [pc, #68]	; (8008498 <vPortExitCritical+0x4c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10a      	bne.n	8008470 <vPortExitCritical+0x24>
	__asm volatile
 800845a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	607b      	str	r3, [r7, #4]
}
 800846c:	bf00      	nop
 800846e:	e7fe      	b.n	800846e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008470:	4b09      	ldr	r3, [pc, #36]	; (8008498 <vPortExitCritical+0x4c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3b01      	subs	r3, #1
 8008476:	4a08      	ldr	r2, [pc, #32]	; (8008498 <vPortExitCritical+0x4c>)
 8008478:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800847a:	4b07      	ldr	r3, [pc, #28]	; (8008498 <vPortExitCritical+0x4c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d105      	bne.n	800848e <vPortExitCritical+0x42>
 8008482:	2300      	movs	r3, #0
 8008484:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800848c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800848e:	bf00      	nop
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	bc80      	pop	{r7}
 8008496:	4770      	bx	lr
 8008498:	2000011c 	.word	0x2000011c
 800849c:	00000000 	.word	0x00000000

080084a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084a0:	f3ef 8009 	mrs	r0, PSP
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <pxCurrentTCBConst>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084b0:	6010      	str	r0, [r2, #0]
 80084b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80084b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80084ba:	f380 8811 	msr	BASEPRI, r0
 80084be:	f7ff fd03 	bl	8007ec8 <vTaskSwitchContext>
 80084c2:	f04f 0000 	mov.w	r0, #0
 80084c6:	f380 8811 	msr	BASEPRI, r0
 80084ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80084ce:	6819      	ldr	r1, [r3, #0]
 80084d0:	6808      	ldr	r0, [r1, #0]
 80084d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084d6:	f380 8809 	msr	PSP, r0
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	4770      	bx	lr

080084e0 <pxCurrentTCBConst>:
 80084e0:	20000f00 	.word	0x20000f00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop

080084e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	607b      	str	r3, [r7, #4]
}
 8008500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008502:	f7ff fc29 	bl	8007d58 <xTaskIncrementTick>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800850c:	4b06      	ldr	r3, [pc, #24]	; (8008528 <SysTick_Handler+0x40>)
 800850e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	2300      	movs	r3, #0
 8008516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	f383 8811 	msr	BASEPRI, r3
}
 800851e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008520:	bf00      	nop
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	e000ed04 	.word	0xe000ed04

0800852c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008530:	4b0a      	ldr	r3, [pc, #40]	; (800855c <vPortSetupTimerInterrupt+0x30>)
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008536:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <vPortSetupTimerInterrupt+0x34>)
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800853c:	4b09      	ldr	r3, [pc, #36]	; (8008564 <vPortSetupTimerInterrupt+0x38>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a09      	ldr	r2, [pc, #36]	; (8008568 <vPortSetupTimerInterrupt+0x3c>)
 8008542:	fba2 2303 	umull	r2, r3, r2, r3
 8008546:	099b      	lsrs	r3, r3, #6
 8008548:	4a08      	ldr	r2, [pc, #32]	; (800856c <vPortSetupTimerInterrupt+0x40>)
 800854a:	3b01      	subs	r3, #1
 800854c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800854e:	4b03      	ldr	r3, [pc, #12]	; (800855c <vPortSetupTimerInterrupt+0x30>)
 8008550:	2207      	movs	r2, #7
 8008552:	601a      	str	r2, [r3, #0]
}
 8008554:	bf00      	nop
 8008556:	46bd      	mov	sp, r7
 8008558:	bc80      	pop	{r7}
 800855a:	4770      	bx	lr
 800855c:	e000e010 	.word	0xe000e010
 8008560:	e000e018 	.word	0xe000e018
 8008564:	20000004 	.word	0x20000004
 8008568:	10624dd3 	.word	0x10624dd3
 800856c:	e000e014 	.word	0xe000e014

08008570 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b08a      	sub	sp, #40	; 0x28
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008578:	2300      	movs	r3, #0
 800857a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800857c:	f7ff fb42 	bl	8007c04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008580:	4b58      	ldr	r3, [pc, #352]	; (80086e4 <pvPortMalloc+0x174>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008588:	f000 f910 	bl	80087ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800858c:	4b56      	ldr	r3, [pc, #344]	; (80086e8 <pvPortMalloc+0x178>)
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4013      	ands	r3, r2
 8008594:	2b00      	cmp	r3, #0
 8008596:	f040 808e 	bne.w	80086b6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01d      	beq.n	80085dc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80085a0:	2208      	movs	r2, #8
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4413      	add	r3, r2
 80085a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f003 0307 	and.w	r3, r3, #7
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d014      	beq.n	80085dc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f023 0307 	bic.w	r3, r3, #7
 80085b8:	3308      	adds	r3, #8
 80085ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <pvPortMalloc+0x6c>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	617b      	str	r3, [r7, #20]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d069      	beq.n	80086b6 <pvPortMalloc+0x146>
 80085e2:	4b42      	ldr	r3, [pc, #264]	; (80086ec <pvPortMalloc+0x17c>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d864      	bhi.n	80086b6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085ec:	4b40      	ldr	r3, [pc, #256]	; (80086f0 <pvPortMalloc+0x180>)
 80085ee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085f0:	4b3f      	ldr	r3, [pc, #252]	; (80086f0 <pvPortMalloc+0x180>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085f6:	e004      	b.n	8008602 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	429a      	cmp	r2, r3
 800860a:	d903      	bls.n	8008614 <pvPortMalloc+0xa4>
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1f1      	bne.n	80085f8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008614:	4b33      	ldr	r3, [pc, #204]	; (80086e4 <pvPortMalloc+0x174>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800861a:	429a      	cmp	r2, r3
 800861c:	d04b      	beq.n	80086b6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2208      	movs	r2, #8
 8008624:	4413      	add	r3, r2
 8008626:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	1ad2      	subs	r2, r2, r3
 8008638:	2308      	movs	r3, #8
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	429a      	cmp	r2, r3
 800863e:	d91f      	bls.n	8008680 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4413      	add	r3, r2
 8008646:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	f003 0307 	and.w	r3, r3, #7
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00a      	beq.n	8008668 <pvPortMalloc+0xf8>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	613b      	str	r3, [r7, #16]
}
 8008664:	bf00      	nop
 8008666:	e7fe      	b.n	8008666 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	1ad2      	subs	r2, r2, r3
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800867a:	69b8      	ldr	r0, [r7, #24]
 800867c:	f000 f8f8 	bl	8008870 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008680:	4b1a      	ldr	r3, [pc, #104]	; (80086ec <pvPortMalloc+0x17c>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	4a18      	ldr	r2, [pc, #96]	; (80086ec <pvPortMalloc+0x17c>)
 800868c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800868e:	4b17      	ldr	r3, [pc, #92]	; (80086ec <pvPortMalloc+0x17c>)
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	4b18      	ldr	r3, [pc, #96]	; (80086f4 <pvPortMalloc+0x184>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d203      	bcs.n	80086a2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800869a:	4b14      	ldr	r3, [pc, #80]	; (80086ec <pvPortMalloc+0x17c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a15      	ldr	r2, [pc, #84]	; (80086f4 <pvPortMalloc+0x184>)
 80086a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	4b10      	ldr	r3, [pc, #64]	; (80086e8 <pvPortMalloc+0x178>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	431a      	orrs	r2, r3
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086b6:	f7ff fab3 	bl	8007c20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	f003 0307 	and.w	r3, r3, #7
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00a      	beq.n	80086da <pvPortMalloc+0x16a>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	60fb      	str	r3, [r7, #12]
}
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <pvPortMalloc+0x168>
	return pvReturn;
 80086da:	69fb      	ldr	r3, [r7, #28]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3728      	adds	r7, #40	; 0x28
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	20003364 	.word	0x20003364
 80086e8:	20003370 	.word	0x20003370
 80086ec:	20003368 	.word	0x20003368
 80086f0:	2000335c 	.word	0x2000335c
 80086f4:	2000336c 	.word	0x2000336c

080086f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d048      	beq.n	800879c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800870a:	2308      	movs	r3, #8
 800870c:	425b      	negs	r3, r3
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	4413      	add	r3, r2
 8008712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	4b21      	ldr	r3, [pc, #132]	; (80087a4 <vPortFree+0xac>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4013      	ands	r3, r2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d10a      	bne.n	800873c <vPortFree+0x44>
	__asm volatile
 8008726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	60fb      	str	r3, [r7, #12]
}
 8008738:	bf00      	nop
 800873a:	e7fe      	b.n	800873a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00a      	beq.n	800875a <vPortFree+0x62>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	60bb      	str	r3, [r7, #8]
}
 8008756:	bf00      	nop
 8008758:	e7fe      	b.n	8008758 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	4b11      	ldr	r3, [pc, #68]	; (80087a4 <vPortFree+0xac>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4013      	ands	r3, r2
 8008764:	2b00      	cmp	r3, #0
 8008766:	d019      	beq.n	800879c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d115      	bne.n	800879c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <vPortFree+0xac>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	43db      	mvns	r3, r3
 800877a:	401a      	ands	r2, r3
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008780:	f7ff fa40 	bl	8007c04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	4b07      	ldr	r3, [pc, #28]	; (80087a8 <vPortFree+0xb0>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4413      	add	r3, r2
 800878e:	4a06      	ldr	r2, [pc, #24]	; (80087a8 <vPortFree+0xb0>)
 8008790:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008792:	6938      	ldr	r0, [r7, #16]
 8008794:	f000 f86c 	bl	8008870 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008798:	f7ff fa42 	bl	8007c20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800879c:	bf00      	nop
 800879e:	3718      	adds	r7, #24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20003370 	.word	0x20003370
 80087a8:	20003368 	.word	0x20003368

080087ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087b2:	f242 3328 	movw	r3, #9000	; 0x2328
 80087b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087b8:	4b27      	ldr	r3, [pc, #156]	; (8008858 <prvHeapInit+0xac>)
 80087ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00c      	beq.n	80087e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	3307      	adds	r3, #7
 80087ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 0307 	bic.w	r3, r3, #7
 80087d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	4a1f      	ldr	r2, [pc, #124]	; (8008858 <prvHeapInit+0xac>)
 80087dc:	4413      	add	r3, r2
 80087de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087e4:	4a1d      	ldr	r2, [pc, #116]	; (800885c <prvHeapInit+0xb0>)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80087ea:	4b1c      	ldr	r3, [pc, #112]	; (800885c <prvHeapInit+0xb0>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	4413      	add	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087f8:	2208      	movs	r2, #8
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	1a9b      	subs	r3, r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f023 0307 	bic.w	r3, r3, #7
 8008806:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4a15      	ldr	r2, [pc, #84]	; (8008860 <prvHeapInit+0xb4>)
 800880c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800880e:	4b14      	ldr	r3, [pc, #80]	; (8008860 <prvHeapInit+0xb4>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2200      	movs	r2, #0
 8008814:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008816:	4b12      	ldr	r3, [pc, #72]	; (8008860 <prvHeapInit+0xb4>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	1ad2      	subs	r2, r2, r3
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800882c:	4b0c      	ldr	r3, [pc, #48]	; (8008860 <prvHeapInit+0xb4>)
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	4a0a      	ldr	r2, [pc, #40]	; (8008864 <prvHeapInit+0xb8>)
 800883a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	4a09      	ldr	r2, [pc, #36]	; (8008868 <prvHeapInit+0xbc>)
 8008842:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008844:	4b09      	ldr	r3, [pc, #36]	; (800886c <prvHeapInit+0xc0>)
 8008846:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800884a:	601a      	str	r2, [r3, #0]
}
 800884c:	bf00      	nop
 800884e:	3714      	adds	r7, #20
 8008850:	46bd      	mov	sp, r7
 8008852:	bc80      	pop	{r7}
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	20001034 	.word	0x20001034
 800885c:	2000335c 	.word	0x2000335c
 8008860:	20003364 	.word	0x20003364
 8008864:	2000336c 	.word	0x2000336c
 8008868:	20003368 	.word	0x20003368
 800886c:	20003370 	.word	0x20003370

08008870 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008878:	4b27      	ldr	r3, [pc, #156]	; (8008918 <prvInsertBlockIntoFreeList+0xa8>)
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	e002      	b.n	8008884 <prvInsertBlockIntoFreeList+0x14>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	429a      	cmp	r2, r3
 800888c:	d8f7      	bhi.n	800887e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	4413      	add	r3, r2
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	429a      	cmp	r2, r3
 800889e:	d108      	bne.n	80088b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	441a      	add	r2, r3
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	441a      	add	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d118      	bne.n	80088f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	4b14      	ldr	r3, [pc, #80]	; (800891c <prvInsertBlockIntoFreeList+0xac>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d00d      	beq.n	80088ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	441a      	add	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	e008      	b.n	8008900 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088ee:	4b0b      	ldr	r3, [pc, #44]	; (800891c <prvInsertBlockIntoFreeList+0xac>)
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	601a      	str	r2, [r3, #0]
 80088f6:	e003      	b.n	8008900 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	429a      	cmp	r2, r3
 8008906:	d002      	beq.n	800890e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800890e:	bf00      	nop
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	bc80      	pop	{r7}
 8008916:	4770      	bx	lr
 8008918:	2000335c 	.word	0x2000335c
 800891c:	20003364 	.word	0x20003364

08008920 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
 800892c:	4613      	mov	r3, r2
 800892e:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8008934:	e004      	b.n	8008940 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	60fa      	str	r2, [r7, #12]
 800893c:	78fa      	ldrb	r2, [r7, #3]
 800893e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8008940:	883b      	ldrh	r3, [r7, #0]
 8008942:	1e5a      	subs	r2, r3, #1
 8008944:	803a      	strh	r2, [r7, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1f5      	bne.n	8008936 <UTIL_MEM_set_8+0x16>
  }
}
 800894a:	bf00      	nop
 800894c:	bf00      	nop
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	bc80      	pop	{r7}
 8008954:	4770      	bx	lr
	...

08008958 <__errno>:
 8008958:	4b01      	ldr	r3, [pc, #4]	; (8008960 <__errno+0x8>)
 800895a:	6818      	ldr	r0, [r3, #0]
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	20000120 	.word	0x20000120

08008964 <__libc_init_array>:
 8008964:	b570      	push	{r4, r5, r6, lr}
 8008966:	4d0d      	ldr	r5, [pc, #52]	; (800899c <__libc_init_array+0x38>)
 8008968:	4c0d      	ldr	r4, [pc, #52]	; (80089a0 <__libc_init_array+0x3c>)
 800896a:	1b64      	subs	r4, r4, r5
 800896c:	10a4      	asrs	r4, r4, #2
 800896e:	2600      	movs	r6, #0
 8008970:	42a6      	cmp	r6, r4
 8008972:	d109      	bne.n	8008988 <__libc_init_array+0x24>
 8008974:	4d0b      	ldr	r5, [pc, #44]	; (80089a4 <__libc_init_array+0x40>)
 8008976:	4c0c      	ldr	r4, [pc, #48]	; (80089a8 <__libc_init_array+0x44>)
 8008978:	f000 fd0a 	bl	8009390 <_init>
 800897c:	1b64      	subs	r4, r4, r5
 800897e:	10a4      	asrs	r4, r4, #2
 8008980:	2600      	movs	r6, #0
 8008982:	42a6      	cmp	r6, r4
 8008984:	d105      	bne.n	8008992 <__libc_init_array+0x2e>
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	f855 3b04 	ldr.w	r3, [r5], #4
 800898c:	4798      	blx	r3
 800898e:	3601      	adds	r6, #1
 8008990:	e7ee      	b.n	8008970 <__libc_init_array+0xc>
 8008992:	f855 3b04 	ldr.w	r3, [r5], #4
 8008996:	4798      	blx	r3
 8008998:	3601      	adds	r6, #1
 800899a:	e7f2      	b.n	8008982 <__libc_init_array+0x1e>
 800899c:	080096f8 	.word	0x080096f8
 80089a0:	080096f8 	.word	0x080096f8
 80089a4:	080096f8 	.word	0x080096f8
 80089a8:	080096fc 	.word	0x080096fc

080089ac <__retarget_lock_acquire_recursive>:
 80089ac:	4770      	bx	lr

080089ae <__retarget_lock_release_recursive>:
 80089ae:	4770      	bx	lr

080089b0 <memcpy>:
 80089b0:	440a      	add	r2, r1
 80089b2:	4291      	cmp	r1, r2
 80089b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089b8:	d100      	bne.n	80089bc <memcpy+0xc>
 80089ba:	4770      	bx	lr
 80089bc:	b510      	push	{r4, lr}
 80089be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089c6:	4291      	cmp	r1, r2
 80089c8:	d1f9      	bne.n	80089be <memcpy+0xe>
 80089ca:	bd10      	pop	{r4, pc}

080089cc <memset>:
 80089cc:	4402      	add	r2, r0
 80089ce:	4603      	mov	r3, r0
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d100      	bne.n	80089d6 <memset+0xa>
 80089d4:	4770      	bx	lr
 80089d6:	f803 1b01 	strb.w	r1, [r3], #1
 80089da:	e7f9      	b.n	80089d0 <memset+0x4>

080089dc <sbrk_aligned>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	4e0e      	ldr	r6, [pc, #56]	; (8008a18 <sbrk_aligned+0x3c>)
 80089e0:	460c      	mov	r4, r1
 80089e2:	6831      	ldr	r1, [r6, #0]
 80089e4:	4605      	mov	r5, r0
 80089e6:	b911      	cbnz	r1, 80089ee <sbrk_aligned+0x12>
 80089e8:	f000 f8f6 	bl	8008bd8 <_sbrk_r>
 80089ec:	6030      	str	r0, [r6, #0]
 80089ee:	4621      	mov	r1, r4
 80089f0:	4628      	mov	r0, r5
 80089f2:	f000 f8f1 	bl	8008bd8 <_sbrk_r>
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	d00a      	beq.n	8008a10 <sbrk_aligned+0x34>
 80089fa:	1cc4      	adds	r4, r0, #3
 80089fc:	f024 0403 	bic.w	r4, r4, #3
 8008a00:	42a0      	cmp	r0, r4
 8008a02:	d007      	beq.n	8008a14 <sbrk_aligned+0x38>
 8008a04:	1a21      	subs	r1, r4, r0
 8008a06:	4628      	mov	r0, r5
 8008a08:	f000 f8e6 	bl	8008bd8 <_sbrk_r>
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d101      	bne.n	8008a14 <sbrk_aligned+0x38>
 8008a10:	f04f 34ff 	mov.w	r4, #4294967295
 8008a14:	4620      	mov	r0, r4
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	2000337c 	.word	0x2000337c

08008a1c <_malloc_r>:
 8008a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a20:	1ccd      	adds	r5, r1, #3
 8008a22:	f025 0503 	bic.w	r5, r5, #3
 8008a26:	3508      	adds	r5, #8
 8008a28:	2d0c      	cmp	r5, #12
 8008a2a:	bf38      	it	cc
 8008a2c:	250c      	movcc	r5, #12
 8008a2e:	2d00      	cmp	r5, #0
 8008a30:	4607      	mov	r7, r0
 8008a32:	db01      	blt.n	8008a38 <_malloc_r+0x1c>
 8008a34:	42a9      	cmp	r1, r5
 8008a36:	d905      	bls.n	8008a44 <_malloc_r+0x28>
 8008a38:	230c      	movs	r3, #12
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	2600      	movs	r6, #0
 8008a3e:	4630      	mov	r0, r6
 8008a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a44:	4e2e      	ldr	r6, [pc, #184]	; (8008b00 <_malloc_r+0xe4>)
 8008a46:	f000 f90b 	bl	8008c60 <__malloc_lock>
 8008a4a:	6833      	ldr	r3, [r6, #0]
 8008a4c:	461c      	mov	r4, r3
 8008a4e:	bb34      	cbnz	r4, 8008a9e <_malloc_r+0x82>
 8008a50:	4629      	mov	r1, r5
 8008a52:	4638      	mov	r0, r7
 8008a54:	f7ff ffc2 	bl	80089dc <sbrk_aligned>
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	d14d      	bne.n	8008afa <_malloc_r+0xde>
 8008a5e:	6834      	ldr	r4, [r6, #0]
 8008a60:	4626      	mov	r6, r4
 8008a62:	2e00      	cmp	r6, #0
 8008a64:	d140      	bne.n	8008ae8 <_malloc_r+0xcc>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	4631      	mov	r1, r6
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	eb04 0803 	add.w	r8, r4, r3
 8008a70:	f000 f8b2 	bl	8008bd8 <_sbrk_r>
 8008a74:	4580      	cmp	r8, r0
 8008a76:	d13a      	bne.n	8008aee <_malloc_r+0xd2>
 8008a78:	6821      	ldr	r1, [r4, #0]
 8008a7a:	3503      	adds	r5, #3
 8008a7c:	1a6d      	subs	r5, r5, r1
 8008a7e:	f025 0503 	bic.w	r5, r5, #3
 8008a82:	3508      	adds	r5, #8
 8008a84:	2d0c      	cmp	r5, #12
 8008a86:	bf38      	it	cc
 8008a88:	250c      	movcc	r5, #12
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	f7ff ffa5 	bl	80089dc <sbrk_aligned>
 8008a92:	3001      	adds	r0, #1
 8008a94:	d02b      	beq.n	8008aee <_malloc_r+0xd2>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	442b      	add	r3, r5
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	e00e      	b.n	8008abc <_malloc_r+0xa0>
 8008a9e:	6822      	ldr	r2, [r4, #0]
 8008aa0:	1b52      	subs	r2, r2, r5
 8008aa2:	d41e      	bmi.n	8008ae2 <_malloc_r+0xc6>
 8008aa4:	2a0b      	cmp	r2, #11
 8008aa6:	d916      	bls.n	8008ad6 <_malloc_r+0xba>
 8008aa8:	1961      	adds	r1, r4, r5
 8008aaa:	42a3      	cmp	r3, r4
 8008aac:	6025      	str	r5, [r4, #0]
 8008aae:	bf18      	it	ne
 8008ab0:	6059      	strne	r1, [r3, #4]
 8008ab2:	6863      	ldr	r3, [r4, #4]
 8008ab4:	bf08      	it	eq
 8008ab6:	6031      	streq	r1, [r6, #0]
 8008ab8:	5162      	str	r2, [r4, r5]
 8008aba:	604b      	str	r3, [r1, #4]
 8008abc:	4638      	mov	r0, r7
 8008abe:	f104 060b 	add.w	r6, r4, #11
 8008ac2:	f000 f8d3 	bl	8008c6c <__malloc_unlock>
 8008ac6:	f026 0607 	bic.w	r6, r6, #7
 8008aca:	1d23      	adds	r3, r4, #4
 8008acc:	1af2      	subs	r2, r6, r3
 8008ace:	d0b6      	beq.n	8008a3e <_malloc_r+0x22>
 8008ad0:	1b9b      	subs	r3, r3, r6
 8008ad2:	50a3      	str	r3, [r4, r2]
 8008ad4:	e7b3      	b.n	8008a3e <_malloc_r+0x22>
 8008ad6:	6862      	ldr	r2, [r4, #4]
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	bf0c      	ite	eq
 8008adc:	6032      	streq	r2, [r6, #0]
 8008ade:	605a      	strne	r2, [r3, #4]
 8008ae0:	e7ec      	b.n	8008abc <_malloc_r+0xa0>
 8008ae2:	4623      	mov	r3, r4
 8008ae4:	6864      	ldr	r4, [r4, #4]
 8008ae6:	e7b2      	b.n	8008a4e <_malloc_r+0x32>
 8008ae8:	4634      	mov	r4, r6
 8008aea:	6876      	ldr	r6, [r6, #4]
 8008aec:	e7b9      	b.n	8008a62 <_malloc_r+0x46>
 8008aee:	230c      	movs	r3, #12
 8008af0:	603b      	str	r3, [r7, #0]
 8008af2:	4638      	mov	r0, r7
 8008af4:	f000 f8ba 	bl	8008c6c <__malloc_unlock>
 8008af8:	e7a1      	b.n	8008a3e <_malloc_r+0x22>
 8008afa:	6025      	str	r5, [r4, #0]
 8008afc:	e7de      	b.n	8008abc <_malloc_r+0xa0>
 8008afe:	bf00      	nop
 8008b00:	20003378 	.word	0x20003378

08008b04 <cleanup_glue>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	460c      	mov	r4, r1
 8008b08:	6809      	ldr	r1, [r1, #0]
 8008b0a:	4605      	mov	r5, r0
 8008b0c:	b109      	cbz	r1, 8008b12 <cleanup_glue+0xe>
 8008b0e:	f7ff fff9 	bl	8008b04 <cleanup_glue>
 8008b12:	4621      	mov	r1, r4
 8008b14:	4628      	mov	r0, r5
 8008b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b1a:	f000 b8ad 	b.w	8008c78 <_free_r>
	...

08008b20 <_reclaim_reent>:
 8008b20:	4b2c      	ldr	r3, [pc, #176]	; (8008bd4 <_reclaim_reent+0xb4>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4283      	cmp	r3, r0
 8008b26:	b570      	push	{r4, r5, r6, lr}
 8008b28:	4604      	mov	r4, r0
 8008b2a:	d051      	beq.n	8008bd0 <_reclaim_reent+0xb0>
 8008b2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b2e:	b143      	cbz	r3, 8008b42 <_reclaim_reent+0x22>
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14a      	bne.n	8008bcc <_reclaim_reent+0xac>
 8008b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b38:	6819      	ldr	r1, [r3, #0]
 8008b3a:	b111      	cbz	r1, 8008b42 <_reclaim_reent+0x22>
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f000 f89b 	bl	8008c78 <_free_r>
 8008b42:	6961      	ldr	r1, [r4, #20]
 8008b44:	b111      	cbz	r1, 8008b4c <_reclaim_reent+0x2c>
 8008b46:	4620      	mov	r0, r4
 8008b48:	f000 f896 	bl	8008c78 <_free_r>
 8008b4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008b4e:	b111      	cbz	r1, 8008b56 <_reclaim_reent+0x36>
 8008b50:	4620      	mov	r0, r4
 8008b52:	f000 f891 	bl	8008c78 <_free_r>
 8008b56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008b58:	b111      	cbz	r1, 8008b60 <_reclaim_reent+0x40>
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 f88c 	bl	8008c78 <_free_r>
 8008b60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008b62:	b111      	cbz	r1, 8008b6a <_reclaim_reent+0x4a>
 8008b64:	4620      	mov	r0, r4
 8008b66:	f000 f887 	bl	8008c78 <_free_r>
 8008b6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008b6c:	b111      	cbz	r1, 8008b74 <_reclaim_reent+0x54>
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f000 f882 	bl	8008c78 <_free_r>
 8008b74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008b76:	b111      	cbz	r1, 8008b7e <_reclaim_reent+0x5e>
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f000 f87d 	bl	8008c78 <_free_r>
 8008b7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008b80:	b111      	cbz	r1, 8008b88 <_reclaim_reent+0x68>
 8008b82:	4620      	mov	r0, r4
 8008b84:	f000 f878 	bl	8008c78 <_free_r>
 8008b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b8a:	b111      	cbz	r1, 8008b92 <_reclaim_reent+0x72>
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f000 f873 	bl	8008c78 <_free_r>
 8008b92:	69a3      	ldr	r3, [r4, #24]
 8008b94:	b1e3      	cbz	r3, 8008bd0 <_reclaim_reent+0xb0>
 8008b96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b98:	4620      	mov	r0, r4
 8008b9a:	4798      	blx	r3
 8008b9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008b9e:	b1b9      	cbz	r1, 8008bd0 <_reclaim_reent+0xb0>
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ba6:	f7ff bfad 	b.w	8008b04 <cleanup_glue>
 8008baa:	5949      	ldr	r1, [r1, r5]
 8008bac:	b941      	cbnz	r1, 8008bc0 <_reclaim_reent+0xa0>
 8008bae:	3504      	adds	r5, #4
 8008bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bb2:	2d80      	cmp	r5, #128	; 0x80
 8008bb4:	68d9      	ldr	r1, [r3, #12]
 8008bb6:	d1f8      	bne.n	8008baa <_reclaim_reent+0x8a>
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f000 f85d 	bl	8008c78 <_free_r>
 8008bbe:	e7ba      	b.n	8008b36 <_reclaim_reent+0x16>
 8008bc0:	680e      	ldr	r6, [r1, #0]
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f000 f858 	bl	8008c78 <_free_r>
 8008bc8:	4631      	mov	r1, r6
 8008bca:	e7ef      	b.n	8008bac <_reclaim_reent+0x8c>
 8008bcc:	2500      	movs	r5, #0
 8008bce:	e7ef      	b.n	8008bb0 <_reclaim_reent+0x90>
 8008bd0:	bd70      	pop	{r4, r5, r6, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20000120 	.word	0x20000120

08008bd8 <_sbrk_r>:
 8008bd8:	b538      	push	{r3, r4, r5, lr}
 8008bda:	4d06      	ldr	r5, [pc, #24]	; (8008bf4 <_sbrk_r+0x1c>)
 8008bdc:	2300      	movs	r3, #0
 8008bde:	4604      	mov	r4, r0
 8008be0:	4608      	mov	r0, r1
 8008be2:	602b      	str	r3, [r5, #0]
 8008be4:	f7f8 fc14 	bl	8001410 <_sbrk>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_sbrk_r+0x1a>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_sbrk_r+0x1a>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	20003380 	.word	0x20003380

08008bf8 <siprintf>:
 8008bf8:	b40e      	push	{r1, r2, r3}
 8008bfa:	b500      	push	{lr}
 8008bfc:	b09c      	sub	sp, #112	; 0x70
 8008bfe:	ab1d      	add	r3, sp, #116	; 0x74
 8008c00:	9002      	str	r0, [sp, #8]
 8008c02:	9006      	str	r0, [sp, #24]
 8008c04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c08:	4809      	ldr	r0, [pc, #36]	; (8008c30 <siprintf+0x38>)
 8008c0a:	9107      	str	r1, [sp, #28]
 8008c0c:	9104      	str	r1, [sp, #16]
 8008c0e:	4909      	ldr	r1, [pc, #36]	; (8008c34 <siprintf+0x3c>)
 8008c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c14:	9105      	str	r1, [sp, #20]
 8008c16:	6800      	ldr	r0, [r0, #0]
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	a902      	add	r1, sp, #8
 8008c1c:	f000 f8d2 	bl	8008dc4 <_svfiprintf_r>
 8008c20:	9b02      	ldr	r3, [sp, #8]
 8008c22:	2200      	movs	r2, #0
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	b01c      	add	sp, #112	; 0x70
 8008c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c2c:	b003      	add	sp, #12
 8008c2e:	4770      	bx	lr
 8008c30:	20000120 	.word	0x20000120
 8008c34:	ffff0208 	.word	0xffff0208

08008c38 <strncmp>:
 8008c38:	b510      	push	{r4, lr}
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	b172      	cbz	r2, 8008c5c <strncmp+0x24>
 8008c3e:	3901      	subs	r1, #1
 8008c40:	1884      	adds	r4, r0, r2
 8008c42:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008c4a:	4290      	cmp	r0, r2
 8008c4c:	d101      	bne.n	8008c52 <strncmp+0x1a>
 8008c4e:	42a3      	cmp	r3, r4
 8008c50:	d101      	bne.n	8008c56 <strncmp+0x1e>
 8008c52:	1a80      	subs	r0, r0, r2
 8008c54:	bd10      	pop	{r4, pc}
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d1f3      	bne.n	8008c42 <strncmp+0xa>
 8008c5a:	e7fa      	b.n	8008c52 <strncmp+0x1a>
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	e7f9      	b.n	8008c54 <strncmp+0x1c>

08008c60 <__malloc_lock>:
 8008c60:	4801      	ldr	r0, [pc, #4]	; (8008c68 <__malloc_lock+0x8>)
 8008c62:	f7ff bea3 	b.w	80089ac <__retarget_lock_acquire_recursive>
 8008c66:	bf00      	nop
 8008c68:	20003374 	.word	0x20003374

08008c6c <__malloc_unlock>:
 8008c6c:	4801      	ldr	r0, [pc, #4]	; (8008c74 <__malloc_unlock+0x8>)
 8008c6e:	f7ff be9e 	b.w	80089ae <__retarget_lock_release_recursive>
 8008c72:	bf00      	nop
 8008c74:	20003374 	.word	0x20003374

08008c78 <_free_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	2900      	cmp	r1, #0
 8008c7e:	d041      	beq.n	8008d04 <_free_r+0x8c>
 8008c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c84:	1f0c      	subs	r4, r1, #4
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	bfb8      	it	lt
 8008c8a:	18e4      	addlt	r4, r4, r3
 8008c8c:	f7ff ffe8 	bl	8008c60 <__malloc_lock>
 8008c90:	4a1d      	ldr	r2, [pc, #116]	; (8008d08 <_free_r+0x90>)
 8008c92:	6813      	ldr	r3, [r2, #0]
 8008c94:	b933      	cbnz	r3, 8008ca4 <_free_r+0x2c>
 8008c96:	6063      	str	r3, [r4, #4]
 8008c98:	6014      	str	r4, [r2, #0]
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ca0:	f7ff bfe4 	b.w	8008c6c <__malloc_unlock>
 8008ca4:	42a3      	cmp	r3, r4
 8008ca6:	d908      	bls.n	8008cba <_free_r+0x42>
 8008ca8:	6820      	ldr	r0, [r4, #0]
 8008caa:	1821      	adds	r1, r4, r0
 8008cac:	428b      	cmp	r3, r1
 8008cae:	bf01      	itttt	eq
 8008cb0:	6819      	ldreq	r1, [r3, #0]
 8008cb2:	685b      	ldreq	r3, [r3, #4]
 8008cb4:	1809      	addeq	r1, r1, r0
 8008cb6:	6021      	streq	r1, [r4, #0]
 8008cb8:	e7ed      	b.n	8008c96 <_free_r+0x1e>
 8008cba:	461a      	mov	r2, r3
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	b10b      	cbz	r3, 8008cc4 <_free_r+0x4c>
 8008cc0:	42a3      	cmp	r3, r4
 8008cc2:	d9fa      	bls.n	8008cba <_free_r+0x42>
 8008cc4:	6811      	ldr	r1, [r2, #0]
 8008cc6:	1850      	adds	r0, r2, r1
 8008cc8:	42a0      	cmp	r0, r4
 8008cca:	d10b      	bne.n	8008ce4 <_free_r+0x6c>
 8008ccc:	6820      	ldr	r0, [r4, #0]
 8008cce:	4401      	add	r1, r0
 8008cd0:	1850      	adds	r0, r2, r1
 8008cd2:	4283      	cmp	r3, r0
 8008cd4:	6011      	str	r1, [r2, #0]
 8008cd6:	d1e0      	bne.n	8008c9a <_free_r+0x22>
 8008cd8:	6818      	ldr	r0, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	6053      	str	r3, [r2, #4]
 8008cde:	4401      	add	r1, r0
 8008ce0:	6011      	str	r1, [r2, #0]
 8008ce2:	e7da      	b.n	8008c9a <_free_r+0x22>
 8008ce4:	d902      	bls.n	8008cec <_free_r+0x74>
 8008ce6:	230c      	movs	r3, #12
 8008ce8:	602b      	str	r3, [r5, #0]
 8008cea:	e7d6      	b.n	8008c9a <_free_r+0x22>
 8008cec:	6820      	ldr	r0, [r4, #0]
 8008cee:	1821      	adds	r1, r4, r0
 8008cf0:	428b      	cmp	r3, r1
 8008cf2:	bf04      	itt	eq
 8008cf4:	6819      	ldreq	r1, [r3, #0]
 8008cf6:	685b      	ldreq	r3, [r3, #4]
 8008cf8:	6063      	str	r3, [r4, #4]
 8008cfa:	bf04      	itt	eq
 8008cfc:	1809      	addeq	r1, r1, r0
 8008cfe:	6021      	streq	r1, [r4, #0]
 8008d00:	6054      	str	r4, [r2, #4]
 8008d02:	e7ca      	b.n	8008c9a <_free_r+0x22>
 8008d04:	bd38      	pop	{r3, r4, r5, pc}
 8008d06:	bf00      	nop
 8008d08:	20003378 	.word	0x20003378

08008d0c <__ssputs_r>:
 8008d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d10:	688e      	ldr	r6, [r1, #8]
 8008d12:	429e      	cmp	r6, r3
 8008d14:	4682      	mov	sl, r0
 8008d16:	460c      	mov	r4, r1
 8008d18:	4690      	mov	r8, r2
 8008d1a:	461f      	mov	r7, r3
 8008d1c:	d838      	bhi.n	8008d90 <__ssputs_r+0x84>
 8008d1e:	898a      	ldrh	r2, [r1, #12]
 8008d20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d24:	d032      	beq.n	8008d8c <__ssputs_r+0x80>
 8008d26:	6825      	ldr	r5, [r4, #0]
 8008d28:	6909      	ldr	r1, [r1, #16]
 8008d2a:	eba5 0901 	sub.w	r9, r5, r1
 8008d2e:	6965      	ldr	r5, [r4, #20]
 8008d30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d38:	3301      	adds	r3, #1
 8008d3a:	444b      	add	r3, r9
 8008d3c:	106d      	asrs	r5, r5, #1
 8008d3e:	429d      	cmp	r5, r3
 8008d40:	bf38      	it	cc
 8008d42:	461d      	movcc	r5, r3
 8008d44:	0553      	lsls	r3, r2, #21
 8008d46:	d531      	bpl.n	8008dac <__ssputs_r+0xa0>
 8008d48:	4629      	mov	r1, r5
 8008d4a:	f7ff fe67 	bl	8008a1c <_malloc_r>
 8008d4e:	4606      	mov	r6, r0
 8008d50:	b950      	cbnz	r0, 8008d68 <__ssputs_r+0x5c>
 8008d52:	230c      	movs	r3, #12
 8008d54:	f8ca 3000 	str.w	r3, [sl]
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d5e:	81a3      	strh	r3, [r4, #12]
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d68:	6921      	ldr	r1, [r4, #16]
 8008d6a:	464a      	mov	r2, r9
 8008d6c:	f7ff fe20 	bl	80089b0 <memcpy>
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d7a:	81a3      	strh	r3, [r4, #12]
 8008d7c:	6126      	str	r6, [r4, #16]
 8008d7e:	6165      	str	r5, [r4, #20]
 8008d80:	444e      	add	r6, r9
 8008d82:	eba5 0509 	sub.w	r5, r5, r9
 8008d86:	6026      	str	r6, [r4, #0]
 8008d88:	60a5      	str	r5, [r4, #8]
 8008d8a:	463e      	mov	r6, r7
 8008d8c:	42be      	cmp	r6, r7
 8008d8e:	d900      	bls.n	8008d92 <__ssputs_r+0x86>
 8008d90:	463e      	mov	r6, r7
 8008d92:	6820      	ldr	r0, [r4, #0]
 8008d94:	4632      	mov	r2, r6
 8008d96:	4641      	mov	r1, r8
 8008d98:	f000 faa8 	bl	80092ec <memmove>
 8008d9c:	68a3      	ldr	r3, [r4, #8]
 8008d9e:	1b9b      	subs	r3, r3, r6
 8008da0:	60a3      	str	r3, [r4, #8]
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	4433      	add	r3, r6
 8008da6:	6023      	str	r3, [r4, #0]
 8008da8:	2000      	movs	r0, #0
 8008daa:	e7db      	b.n	8008d64 <__ssputs_r+0x58>
 8008dac:	462a      	mov	r2, r5
 8008dae:	f000 fab7 	bl	8009320 <_realloc_r>
 8008db2:	4606      	mov	r6, r0
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d1e1      	bne.n	8008d7c <__ssputs_r+0x70>
 8008db8:	6921      	ldr	r1, [r4, #16]
 8008dba:	4650      	mov	r0, sl
 8008dbc:	f7ff ff5c 	bl	8008c78 <_free_r>
 8008dc0:	e7c7      	b.n	8008d52 <__ssputs_r+0x46>
	...

08008dc4 <_svfiprintf_r>:
 8008dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc8:	4698      	mov	r8, r3
 8008dca:	898b      	ldrh	r3, [r1, #12]
 8008dcc:	061b      	lsls	r3, r3, #24
 8008dce:	b09d      	sub	sp, #116	; 0x74
 8008dd0:	4607      	mov	r7, r0
 8008dd2:	460d      	mov	r5, r1
 8008dd4:	4614      	mov	r4, r2
 8008dd6:	d50e      	bpl.n	8008df6 <_svfiprintf_r+0x32>
 8008dd8:	690b      	ldr	r3, [r1, #16]
 8008dda:	b963      	cbnz	r3, 8008df6 <_svfiprintf_r+0x32>
 8008ddc:	2140      	movs	r1, #64	; 0x40
 8008dde:	f7ff fe1d 	bl	8008a1c <_malloc_r>
 8008de2:	6028      	str	r0, [r5, #0]
 8008de4:	6128      	str	r0, [r5, #16]
 8008de6:	b920      	cbnz	r0, 8008df2 <_svfiprintf_r+0x2e>
 8008de8:	230c      	movs	r3, #12
 8008dea:	603b      	str	r3, [r7, #0]
 8008dec:	f04f 30ff 	mov.w	r0, #4294967295
 8008df0:	e0d1      	b.n	8008f96 <_svfiprintf_r+0x1d2>
 8008df2:	2340      	movs	r3, #64	; 0x40
 8008df4:	616b      	str	r3, [r5, #20]
 8008df6:	2300      	movs	r3, #0
 8008df8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dfa:	2320      	movs	r3, #32
 8008dfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e04:	2330      	movs	r3, #48	; 0x30
 8008e06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008fb0 <_svfiprintf_r+0x1ec>
 8008e0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e0e:	f04f 0901 	mov.w	r9, #1
 8008e12:	4623      	mov	r3, r4
 8008e14:	469a      	mov	sl, r3
 8008e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e1a:	b10a      	cbz	r2, 8008e20 <_svfiprintf_r+0x5c>
 8008e1c:	2a25      	cmp	r2, #37	; 0x25
 8008e1e:	d1f9      	bne.n	8008e14 <_svfiprintf_r+0x50>
 8008e20:	ebba 0b04 	subs.w	fp, sl, r4
 8008e24:	d00b      	beq.n	8008e3e <_svfiprintf_r+0x7a>
 8008e26:	465b      	mov	r3, fp
 8008e28:	4622      	mov	r2, r4
 8008e2a:	4629      	mov	r1, r5
 8008e2c:	4638      	mov	r0, r7
 8008e2e:	f7ff ff6d 	bl	8008d0c <__ssputs_r>
 8008e32:	3001      	adds	r0, #1
 8008e34:	f000 80aa 	beq.w	8008f8c <_svfiprintf_r+0x1c8>
 8008e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e3a:	445a      	add	r2, fp
 8008e3c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 80a2 	beq.w	8008f8c <_svfiprintf_r+0x1c8>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e52:	f10a 0a01 	add.w	sl, sl, #1
 8008e56:	9304      	str	r3, [sp, #16]
 8008e58:	9307      	str	r3, [sp, #28]
 8008e5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e5e:	931a      	str	r3, [sp, #104]	; 0x68
 8008e60:	4654      	mov	r4, sl
 8008e62:	2205      	movs	r2, #5
 8008e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e68:	4851      	ldr	r0, [pc, #324]	; (8008fb0 <_svfiprintf_r+0x1ec>)
 8008e6a:	f7f7 f991 	bl	8000190 <memchr>
 8008e6e:	9a04      	ldr	r2, [sp, #16]
 8008e70:	b9d8      	cbnz	r0, 8008eaa <_svfiprintf_r+0xe6>
 8008e72:	06d0      	lsls	r0, r2, #27
 8008e74:	bf44      	itt	mi
 8008e76:	2320      	movmi	r3, #32
 8008e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e7c:	0711      	lsls	r1, r2, #28
 8008e7e:	bf44      	itt	mi
 8008e80:	232b      	movmi	r3, #43	; 0x2b
 8008e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e86:	f89a 3000 	ldrb.w	r3, [sl]
 8008e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e8c:	d015      	beq.n	8008eba <_svfiprintf_r+0xf6>
 8008e8e:	9a07      	ldr	r2, [sp, #28]
 8008e90:	4654      	mov	r4, sl
 8008e92:	2000      	movs	r0, #0
 8008e94:	f04f 0c0a 	mov.w	ip, #10
 8008e98:	4621      	mov	r1, r4
 8008e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e9e:	3b30      	subs	r3, #48	; 0x30
 8008ea0:	2b09      	cmp	r3, #9
 8008ea2:	d94e      	bls.n	8008f42 <_svfiprintf_r+0x17e>
 8008ea4:	b1b0      	cbz	r0, 8008ed4 <_svfiprintf_r+0x110>
 8008ea6:	9207      	str	r2, [sp, #28]
 8008ea8:	e014      	b.n	8008ed4 <_svfiprintf_r+0x110>
 8008eaa:	eba0 0308 	sub.w	r3, r0, r8
 8008eae:	fa09 f303 	lsl.w	r3, r9, r3
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	9304      	str	r3, [sp, #16]
 8008eb6:	46a2      	mov	sl, r4
 8008eb8:	e7d2      	b.n	8008e60 <_svfiprintf_r+0x9c>
 8008eba:	9b03      	ldr	r3, [sp, #12]
 8008ebc:	1d19      	adds	r1, r3, #4
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	9103      	str	r1, [sp, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	bfbb      	ittet	lt
 8008ec6:	425b      	neglt	r3, r3
 8008ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8008ecc:	9307      	strge	r3, [sp, #28]
 8008ece:	9307      	strlt	r3, [sp, #28]
 8008ed0:	bfb8      	it	lt
 8008ed2:	9204      	strlt	r2, [sp, #16]
 8008ed4:	7823      	ldrb	r3, [r4, #0]
 8008ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8008ed8:	d10c      	bne.n	8008ef4 <_svfiprintf_r+0x130>
 8008eda:	7863      	ldrb	r3, [r4, #1]
 8008edc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ede:	d135      	bne.n	8008f4c <_svfiprintf_r+0x188>
 8008ee0:	9b03      	ldr	r3, [sp, #12]
 8008ee2:	1d1a      	adds	r2, r3, #4
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	9203      	str	r2, [sp, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	bfb8      	it	lt
 8008eec:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ef0:	3402      	adds	r4, #2
 8008ef2:	9305      	str	r3, [sp, #20]
 8008ef4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008fb4 <_svfiprintf_r+0x1f0>
 8008ef8:	7821      	ldrb	r1, [r4, #0]
 8008efa:	2203      	movs	r2, #3
 8008efc:	4650      	mov	r0, sl
 8008efe:	f7f7 f947 	bl	8000190 <memchr>
 8008f02:	b140      	cbz	r0, 8008f16 <_svfiprintf_r+0x152>
 8008f04:	2340      	movs	r3, #64	; 0x40
 8008f06:	eba0 000a 	sub.w	r0, r0, sl
 8008f0a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f0e:	9b04      	ldr	r3, [sp, #16]
 8008f10:	4303      	orrs	r3, r0
 8008f12:	3401      	adds	r4, #1
 8008f14:	9304      	str	r3, [sp, #16]
 8008f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f1a:	4827      	ldr	r0, [pc, #156]	; (8008fb8 <_svfiprintf_r+0x1f4>)
 8008f1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f20:	2206      	movs	r2, #6
 8008f22:	f7f7 f935 	bl	8000190 <memchr>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d038      	beq.n	8008f9c <_svfiprintf_r+0x1d8>
 8008f2a:	4b24      	ldr	r3, [pc, #144]	; (8008fbc <_svfiprintf_r+0x1f8>)
 8008f2c:	bb1b      	cbnz	r3, 8008f76 <_svfiprintf_r+0x1b2>
 8008f2e:	9b03      	ldr	r3, [sp, #12]
 8008f30:	3307      	adds	r3, #7
 8008f32:	f023 0307 	bic.w	r3, r3, #7
 8008f36:	3308      	adds	r3, #8
 8008f38:	9303      	str	r3, [sp, #12]
 8008f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f3c:	4433      	add	r3, r6
 8008f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f40:	e767      	b.n	8008e12 <_svfiprintf_r+0x4e>
 8008f42:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f46:	460c      	mov	r4, r1
 8008f48:	2001      	movs	r0, #1
 8008f4a:	e7a5      	b.n	8008e98 <_svfiprintf_r+0xd4>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	3401      	adds	r4, #1
 8008f50:	9305      	str	r3, [sp, #20]
 8008f52:	4619      	mov	r1, r3
 8008f54:	f04f 0c0a 	mov.w	ip, #10
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f5e:	3a30      	subs	r2, #48	; 0x30
 8008f60:	2a09      	cmp	r2, #9
 8008f62:	d903      	bls.n	8008f6c <_svfiprintf_r+0x1a8>
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0c5      	beq.n	8008ef4 <_svfiprintf_r+0x130>
 8008f68:	9105      	str	r1, [sp, #20]
 8008f6a:	e7c3      	b.n	8008ef4 <_svfiprintf_r+0x130>
 8008f6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f70:	4604      	mov	r4, r0
 8008f72:	2301      	movs	r3, #1
 8008f74:	e7f0      	b.n	8008f58 <_svfiprintf_r+0x194>
 8008f76:	ab03      	add	r3, sp, #12
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	462a      	mov	r2, r5
 8008f7c:	4b10      	ldr	r3, [pc, #64]	; (8008fc0 <_svfiprintf_r+0x1fc>)
 8008f7e:	a904      	add	r1, sp, #16
 8008f80:	4638      	mov	r0, r7
 8008f82:	f3af 8000 	nop.w
 8008f86:	1c42      	adds	r2, r0, #1
 8008f88:	4606      	mov	r6, r0
 8008f8a:	d1d6      	bne.n	8008f3a <_svfiprintf_r+0x176>
 8008f8c:	89ab      	ldrh	r3, [r5, #12]
 8008f8e:	065b      	lsls	r3, r3, #25
 8008f90:	f53f af2c 	bmi.w	8008dec <_svfiprintf_r+0x28>
 8008f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f96:	b01d      	add	sp, #116	; 0x74
 8008f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f9c:	ab03      	add	r3, sp, #12
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	462a      	mov	r2, r5
 8008fa2:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <_svfiprintf_r+0x1fc>)
 8008fa4:	a904      	add	r1, sp, #16
 8008fa6:	4638      	mov	r0, r7
 8008fa8:	f000 f87a 	bl	80090a0 <_printf_i>
 8008fac:	e7eb      	b.n	8008f86 <_svfiprintf_r+0x1c2>
 8008fae:	bf00      	nop
 8008fb0:	080096bc 	.word	0x080096bc
 8008fb4:	080096c2 	.word	0x080096c2
 8008fb8:	080096c6 	.word	0x080096c6
 8008fbc:	00000000 	.word	0x00000000
 8008fc0:	08008d0d 	.word	0x08008d0d

08008fc4 <_printf_common>:
 8008fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc8:	4616      	mov	r6, r2
 8008fca:	4699      	mov	r9, r3
 8008fcc:	688a      	ldr	r2, [r1, #8]
 8008fce:	690b      	ldr	r3, [r1, #16]
 8008fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	bfb8      	it	lt
 8008fd8:	4613      	movlt	r3, r2
 8008fda:	6033      	str	r3, [r6, #0]
 8008fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fe0:	4607      	mov	r7, r0
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	b10a      	cbz	r2, 8008fea <_printf_common+0x26>
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	6033      	str	r3, [r6, #0]
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	0699      	lsls	r1, r3, #26
 8008fee:	bf42      	ittt	mi
 8008ff0:	6833      	ldrmi	r3, [r6, #0]
 8008ff2:	3302      	addmi	r3, #2
 8008ff4:	6033      	strmi	r3, [r6, #0]
 8008ff6:	6825      	ldr	r5, [r4, #0]
 8008ff8:	f015 0506 	ands.w	r5, r5, #6
 8008ffc:	d106      	bne.n	800900c <_printf_common+0x48>
 8008ffe:	f104 0a19 	add.w	sl, r4, #25
 8009002:	68e3      	ldr	r3, [r4, #12]
 8009004:	6832      	ldr	r2, [r6, #0]
 8009006:	1a9b      	subs	r3, r3, r2
 8009008:	42ab      	cmp	r3, r5
 800900a:	dc26      	bgt.n	800905a <_printf_common+0x96>
 800900c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009010:	1e13      	subs	r3, r2, #0
 8009012:	6822      	ldr	r2, [r4, #0]
 8009014:	bf18      	it	ne
 8009016:	2301      	movne	r3, #1
 8009018:	0692      	lsls	r2, r2, #26
 800901a:	d42b      	bmi.n	8009074 <_printf_common+0xb0>
 800901c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009020:	4649      	mov	r1, r9
 8009022:	4638      	mov	r0, r7
 8009024:	47c0      	blx	r8
 8009026:	3001      	adds	r0, #1
 8009028:	d01e      	beq.n	8009068 <_printf_common+0xa4>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	68e5      	ldr	r5, [r4, #12]
 800902e:	6832      	ldr	r2, [r6, #0]
 8009030:	f003 0306 	and.w	r3, r3, #6
 8009034:	2b04      	cmp	r3, #4
 8009036:	bf08      	it	eq
 8009038:	1aad      	subeq	r5, r5, r2
 800903a:	68a3      	ldr	r3, [r4, #8]
 800903c:	6922      	ldr	r2, [r4, #16]
 800903e:	bf0c      	ite	eq
 8009040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009044:	2500      	movne	r5, #0
 8009046:	4293      	cmp	r3, r2
 8009048:	bfc4      	itt	gt
 800904a:	1a9b      	subgt	r3, r3, r2
 800904c:	18ed      	addgt	r5, r5, r3
 800904e:	2600      	movs	r6, #0
 8009050:	341a      	adds	r4, #26
 8009052:	42b5      	cmp	r5, r6
 8009054:	d11a      	bne.n	800908c <_printf_common+0xc8>
 8009056:	2000      	movs	r0, #0
 8009058:	e008      	b.n	800906c <_printf_common+0xa8>
 800905a:	2301      	movs	r3, #1
 800905c:	4652      	mov	r2, sl
 800905e:	4649      	mov	r1, r9
 8009060:	4638      	mov	r0, r7
 8009062:	47c0      	blx	r8
 8009064:	3001      	adds	r0, #1
 8009066:	d103      	bne.n	8009070 <_printf_common+0xac>
 8009068:	f04f 30ff 	mov.w	r0, #4294967295
 800906c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009070:	3501      	adds	r5, #1
 8009072:	e7c6      	b.n	8009002 <_printf_common+0x3e>
 8009074:	18e1      	adds	r1, r4, r3
 8009076:	1c5a      	adds	r2, r3, #1
 8009078:	2030      	movs	r0, #48	; 0x30
 800907a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800907e:	4422      	add	r2, r4
 8009080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009088:	3302      	adds	r3, #2
 800908a:	e7c7      	b.n	800901c <_printf_common+0x58>
 800908c:	2301      	movs	r3, #1
 800908e:	4622      	mov	r2, r4
 8009090:	4649      	mov	r1, r9
 8009092:	4638      	mov	r0, r7
 8009094:	47c0      	blx	r8
 8009096:	3001      	adds	r0, #1
 8009098:	d0e6      	beq.n	8009068 <_printf_common+0xa4>
 800909a:	3601      	adds	r6, #1
 800909c:	e7d9      	b.n	8009052 <_printf_common+0x8e>
	...

080090a0 <_printf_i>:
 80090a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090a4:	7e0f      	ldrb	r7, [r1, #24]
 80090a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090a8:	2f78      	cmp	r7, #120	; 0x78
 80090aa:	4691      	mov	r9, r2
 80090ac:	4680      	mov	r8, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	469a      	mov	sl, r3
 80090b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090b6:	d807      	bhi.n	80090c8 <_printf_i+0x28>
 80090b8:	2f62      	cmp	r7, #98	; 0x62
 80090ba:	d80a      	bhi.n	80090d2 <_printf_i+0x32>
 80090bc:	2f00      	cmp	r7, #0
 80090be:	f000 80d8 	beq.w	8009272 <_printf_i+0x1d2>
 80090c2:	2f58      	cmp	r7, #88	; 0x58
 80090c4:	f000 80a3 	beq.w	800920e <_printf_i+0x16e>
 80090c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090d0:	e03a      	b.n	8009148 <_printf_i+0xa8>
 80090d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090d6:	2b15      	cmp	r3, #21
 80090d8:	d8f6      	bhi.n	80090c8 <_printf_i+0x28>
 80090da:	a101      	add	r1, pc, #4	; (adr r1, 80090e0 <_printf_i+0x40>)
 80090dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090e0:	08009139 	.word	0x08009139
 80090e4:	0800914d 	.word	0x0800914d
 80090e8:	080090c9 	.word	0x080090c9
 80090ec:	080090c9 	.word	0x080090c9
 80090f0:	080090c9 	.word	0x080090c9
 80090f4:	080090c9 	.word	0x080090c9
 80090f8:	0800914d 	.word	0x0800914d
 80090fc:	080090c9 	.word	0x080090c9
 8009100:	080090c9 	.word	0x080090c9
 8009104:	080090c9 	.word	0x080090c9
 8009108:	080090c9 	.word	0x080090c9
 800910c:	08009259 	.word	0x08009259
 8009110:	0800917d 	.word	0x0800917d
 8009114:	0800923b 	.word	0x0800923b
 8009118:	080090c9 	.word	0x080090c9
 800911c:	080090c9 	.word	0x080090c9
 8009120:	0800927b 	.word	0x0800927b
 8009124:	080090c9 	.word	0x080090c9
 8009128:	0800917d 	.word	0x0800917d
 800912c:	080090c9 	.word	0x080090c9
 8009130:	080090c9 	.word	0x080090c9
 8009134:	08009243 	.word	0x08009243
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	1d1a      	adds	r2, r3, #4
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	602a      	str	r2, [r5, #0]
 8009140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009148:	2301      	movs	r3, #1
 800914a:	e0a3      	b.n	8009294 <_printf_i+0x1f4>
 800914c:	6820      	ldr	r0, [r4, #0]
 800914e:	6829      	ldr	r1, [r5, #0]
 8009150:	0606      	lsls	r6, r0, #24
 8009152:	f101 0304 	add.w	r3, r1, #4
 8009156:	d50a      	bpl.n	800916e <_printf_i+0xce>
 8009158:	680e      	ldr	r6, [r1, #0]
 800915a:	602b      	str	r3, [r5, #0]
 800915c:	2e00      	cmp	r6, #0
 800915e:	da03      	bge.n	8009168 <_printf_i+0xc8>
 8009160:	232d      	movs	r3, #45	; 0x2d
 8009162:	4276      	negs	r6, r6
 8009164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009168:	485e      	ldr	r0, [pc, #376]	; (80092e4 <_printf_i+0x244>)
 800916a:	230a      	movs	r3, #10
 800916c:	e019      	b.n	80091a2 <_printf_i+0x102>
 800916e:	680e      	ldr	r6, [r1, #0]
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009176:	bf18      	it	ne
 8009178:	b236      	sxthne	r6, r6
 800917a:	e7ef      	b.n	800915c <_printf_i+0xbc>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	6820      	ldr	r0, [r4, #0]
 8009180:	1d19      	adds	r1, r3, #4
 8009182:	6029      	str	r1, [r5, #0]
 8009184:	0601      	lsls	r1, r0, #24
 8009186:	d501      	bpl.n	800918c <_printf_i+0xec>
 8009188:	681e      	ldr	r6, [r3, #0]
 800918a:	e002      	b.n	8009192 <_printf_i+0xf2>
 800918c:	0646      	lsls	r6, r0, #25
 800918e:	d5fb      	bpl.n	8009188 <_printf_i+0xe8>
 8009190:	881e      	ldrh	r6, [r3, #0]
 8009192:	4854      	ldr	r0, [pc, #336]	; (80092e4 <_printf_i+0x244>)
 8009194:	2f6f      	cmp	r7, #111	; 0x6f
 8009196:	bf0c      	ite	eq
 8009198:	2308      	moveq	r3, #8
 800919a:	230a      	movne	r3, #10
 800919c:	2100      	movs	r1, #0
 800919e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091a2:	6865      	ldr	r5, [r4, #4]
 80091a4:	60a5      	str	r5, [r4, #8]
 80091a6:	2d00      	cmp	r5, #0
 80091a8:	bfa2      	ittt	ge
 80091aa:	6821      	ldrge	r1, [r4, #0]
 80091ac:	f021 0104 	bicge.w	r1, r1, #4
 80091b0:	6021      	strge	r1, [r4, #0]
 80091b2:	b90e      	cbnz	r6, 80091b8 <_printf_i+0x118>
 80091b4:	2d00      	cmp	r5, #0
 80091b6:	d04d      	beq.n	8009254 <_printf_i+0x1b4>
 80091b8:	4615      	mov	r5, r2
 80091ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80091be:	fb03 6711 	mls	r7, r3, r1, r6
 80091c2:	5dc7      	ldrb	r7, [r0, r7]
 80091c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091c8:	4637      	mov	r7, r6
 80091ca:	42bb      	cmp	r3, r7
 80091cc:	460e      	mov	r6, r1
 80091ce:	d9f4      	bls.n	80091ba <_printf_i+0x11a>
 80091d0:	2b08      	cmp	r3, #8
 80091d2:	d10b      	bne.n	80091ec <_printf_i+0x14c>
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	07de      	lsls	r6, r3, #31
 80091d8:	d508      	bpl.n	80091ec <_printf_i+0x14c>
 80091da:	6923      	ldr	r3, [r4, #16]
 80091dc:	6861      	ldr	r1, [r4, #4]
 80091de:	4299      	cmp	r1, r3
 80091e0:	bfde      	ittt	le
 80091e2:	2330      	movle	r3, #48	; 0x30
 80091e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091ec:	1b52      	subs	r2, r2, r5
 80091ee:	6122      	str	r2, [r4, #16]
 80091f0:	f8cd a000 	str.w	sl, [sp]
 80091f4:	464b      	mov	r3, r9
 80091f6:	aa03      	add	r2, sp, #12
 80091f8:	4621      	mov	r1, r4
 80091fa:	4640      	mov	r0, r8
 80091fc:	f7ff fee2 	bl	8008fc4 <_printf_common>
 8009200:	3001      	adds	r0, #1
 8009202:	d14c      	bne.n	800929e <_printf_i+0x1fe>
 8009204:	f04f 30ff 	mov.w	r0, #4294967295
 8009208:	b004      	add	sp, #16
 800920a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800920e:	4835      	ldr	r0, [pc, #212]	; (80092e4 <_printf_i+0x244>)
 8009210:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009214:	6829      	ldr	r1, [r5, #0]
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	f851 6b04 	ldr.w	r6, [r1], #4
 800921c:	6029      	str	r1, [r5, #0]
 800921e:	061d      	lsls	r5, r3, #24
 8009220:	d514      	bpl.n	800924c <_printf_i+0x1ac>
 8009222:	07df      	lsls	r7, r3, #31
 8009224:	bf44      	itt	mi
 8009226:	f043 0320 	orrmi.w	r3, r3, #32
 800922a:	6023      	strmi	r3, [r4, #0]
 800922c:	b91e      	cbnz	r6, 8009236 <_printf_i+0x196>
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	f023 0320 	bic.w	r3, r3, #32
 8009234:	6023      	str	r3, [r4, #0]
 8009236:	2310      	movs	r3, #16
 8009238:	e7b0      	b.n	800919c <_printf_i+0xfc>
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	f043 0320 	orr.w	r3, r3, #32
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	2378      	movs	r3, #120	; 0x78
 8009244:	4828      	ldr	r0, [pc, #160]	; (80092e8 <_printf_i+0x248>)
 8009246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800924a:	e7e3      	b.n	8009214 <_printf_i+0x174>
 800924c:	0659      	lsls	r1, r3, #25
 800924e:	bf48      	it	mi
 8009250:	b2b6      	uxthmi	r6, r6
 8009252:	e7e6      	b.n	8009222 <_printf_i+0x182>
 8009254:	4615      	mov	r5, r2
 8009256:	e7bb      	b.n	80091d0 <_printf_i+0x130>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	6826      	ldr	r6, [r4, #0]
 800925c:	6961      	ldr	r1, [r4, #20]
 800925e:	1d18      	adds	r0, r3, #4
 8009260:	6028      	str	r0, [r5, #0]
 8009262:	0635      	lsls	r5, r6, #24
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	d501      	bpl.n	800926c <_printf_i+0x1cc>
 8009268:	6019      	str	r1, [r3, #0]
 800926a:	e002      	b.n	8009272 <_printf_i+0x1d2>
 800926c:	0670      	lsls	r0, r6, #25
 800926e:	d5fb      	bpl.n	8009268 <_printf_i+0x1c8>
 8009270:	8019      	strh	r1, [r3, #0]
 8009272:	2300      	movs	r3, #0
 8009274:	6123      	str	r3, [r4, #16]
 8009276:	4615      	mov	r5, r2
 8009278:	e7ba      	b.n	80091f0 <_printf_i+0x150>
 800927a:	682b      	ldr	r3, [r5, #0]
 800927c:	1d1a      	adds	r2, r3, #4
 800927e:	602a      	str	r2, [r5, #0]
 8009280:	681d      	ldr	r5, [r3, #0]
 8009282:	6862      	ldr	r2, [r4, #4]
 8009284:	2100      	movs	r1, #0
 8009286:	4628      	mov	r0, r5
 8009288:	f7f6 ff82 	bl	8000190 <memchr>
 800928c:	b108      	cbz	r0, 8009292 <_printf_i+0x1f2>
 800928e:	1b40      	subs	r0, r0, r5
 8009290:	6060      	str	r0, [r4, #4]
 8009292:	6863      	ldr	r3, [r4, #4]
 8009294:	6123      	str	r3, [r4, #16]
 8009296:	2300      	movs	r3, #0
 8009298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800929c:	e7a8      	b.n	80091f0 <_printf_i+0x150>
 800929e:	6923      	ldr	r3, [r4, #16]
 80092a0:	462a      	mov	r2, r5
 80092a2:	4649      	mov	r1, r9
 80092a4:	4640      	mov	r0, r8
 80092a6:	47d0      	blx	sl
 80092a8:	3001      	adds	r0, #1
 80092aa:	d0ab      	beq.n	8009204 <_printf_i+0x164>
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	079b      	lsls	r3, r3, #30
 80092b0:	d413      	bmi.n	80092da <_printf_i+0x23a>
 80092b2:	68e0      	ldr	r0, [r4, #12]
 80092b4:	9b03      	ldr	r3, [sp, #12]
 80092b6:	4298      	cmp	r0, r3
 80092b8:	bfb8      	it	lt
 80092ba:	4618      	movlt	r0, r3
 80092bc:	e7a4      	b.n	8009208 <_printf_i+0x168>
 80092be:	2301      	movs	r3, #1
 80092c0:	4632      	mov	r2, r6
 80092c2:	4649      	mov	r1, r9
 80092c4:	4640      	mov	r0, r8
 80092c6:	47d0      	blx	sl
 80092c8:	3001      	adds	r0, #1
 80092ca:	d09b      	beq.n	8009204 <_printf_i+0x164>
 80092cc:	3501      	adds	r5, #1
 80092ce:	68e3      	ldr	r3, [r4, #12]
 80092d0:	9903      	ldr	r1, [sp, #12]
 80092d2:	1a5b      	subs	r3, r3, r1
 80092d4:	42ab      	cmp	r3, r5
 80092d6:	dcf2      	bgt.n	80092be <_printf_i+0x21e>
 80092d8:	e7eb      	b.n	80092b2 <_printf_i+0x212>
 80092da:	2500      	movs	r5, #0
 80092dc:	f104 0619 	add.w	r6, r4, #25
 80092e0:	e7f5      	b.n	80092ce <_printf_i+0x22e>
 80092e2:	bf00      	nop
 80092e4:	080096cd 	.word	0x080096cd
 80092e8:	080096de 	.word	0x080096de

080092ec <memmove>:
 80092ec:	4288      	cmp	r0, r1
 80092ee:	b510      	push	{r4, lr}
 80092f0:	eb01 0402 	add.w	r4, r1, r2
 80092f4:	d902      	bls.n	80092fc <memmove+0x10>
 80092f6:	4284      	cmp	r4, r0
 80092f8:	4623      	mov	r3, r4
 80092fa:	d807      	bhi.n	800930c <memmove+0x20>
 80092fc:	1e43      	subs	r3, r0, #1
 80092fe:	42a1      	cmp	r1, r4
 8009300:	d008      	beq.n	8009314 <memmove+0x28>
 8009302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800930a:	e7f8      	b.n	80092fe <memmove+0x12>
 800930c:	4402      	add	r2, r0
 800930e:	4601      	mov	r1, r0
 8009310:	428a      	cmp	r2, r1
 8009312:	d100      	bne.n	8009316 <memmove+0x2a>
 8009314:	bd10      	pop	{r4, pc}
 8009316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800931a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800931e:	e7f7      	b.n	8009310 <memmove+0x24>

08009320 <_realloc_r>:
 8009320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009324:	4680      	mov	r8, r0
 8009326:	4614      	mov	r4, r2
 8009328:	460e      	mov	r6, r1
 800932a:	b921      	cbnz	r1, 8009336 <_realloc_r+0x16>
 800932c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009330:	4611      	mov	r1, r2
 8009332:	f7ff bb73 	b.w	8008a1c <_malloc_r>
 8009336:	b92a      	cbnz	r2, 8009344 <_realloc_r+0x24>
 8009338:	f7ff fc9e 	bl	8008c78 <_free_r>
 800933c:	4625      	mov	r5, r4
 800933e:	4628      	mov	r0, r5
 8009340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009344:	f000 f81b 	bl	800937e <_malloc_usable_size_r>
 8009348:	4284      	cmp	r4, r0
 800934a:	4607      	mov	r7, r0
 800934c:	d802      	bhi.n	8009354 <_realloc_r+0x34>
 800934e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009352:	d812      	bhi.n	800937a <_realloc_r+0x5a>
 8009354:	4621      	mov	r1, r4
 8009356:	4640      	mov	r0, r8
 8009358:	f7ff fb60 	bl	8008a1c <_malloc_r>
 800935c:	4605      	mov	r5, r0
 800935e:	2800      	cmp	r0, #0
 8009360:	d0ed      	beq.n	800933e <_realloc_r+0x1e>
 8009362:	42bc      	cmp	r4, r7
 8009364:	4622      	mov	r2, r4
 8009366:	4631      	mov	r1, r6
 8009368:	bf28      	it	cs
 800936a:	463a      	movcs	r2, r7
 800936c:	f7ff fb20 	bl	80089b0 <memcpy>
 8009370:	4631      	mov	r1, r6
 8009372:	4640      	mov	r0, r8
 8009374:	f7ff fc80 	bl	8008c78 <_free_r>
 8009378:	e7e1      	b.n	800933e <_realloc_r+0x1e>
 800937a:	4635      	mov	r5, r6
 800937c:	e7df      	b.n	800933e <_realloc_r+0x1e>

0800937e <_malloc_usable_size_r>:
 800937e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009382:	1f18      	subs	r0, r3, #4
 8009384:	2b00      	cmp	r3, #0
 8009386:	bfbc      	itt	lt
 8009388:	580b      	ldrlt	r3, [r1, r0]
 800938a:	18c0      	addlt	r0, r0, r3
 800938c:	4770      	bx	lr
	...

08009390 <_init>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	bf00      	nop
 8009394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009396:	bc08      	pop	{r3}
 8009398:	469e      	mov	lr, r3
 800939a:	4770      	bx	lr

0800939c <_fini>:
 800939c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939e:	bf00      	nop
 80093a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a2:	bc08      	pop	{r3}
 80093a4:	469e      	mov	lr, r3
 80093a6:	4770      	bx	lr
